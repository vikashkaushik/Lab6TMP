
c:/Users/Vikash/Downloads/Lab6TMP/target/3.0.0/argon/Lab6TMP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003ec0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d7ee0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e55c  000d7ee4  0001e55c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000022c  2003e5c4  2003e5c4  0002e5c4  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d7f4c  000d7f4c  00027f4c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d7f74  000d7f74  00027f74  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001c4a08  00000000  00000000  00027f78  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000198dd  00000000  00000000  001ec980  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0003a820  00000000  00000000  0020625d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002c38  00000000  00000000  00240a7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00009160  00000000  00000000  002436b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003e2dc  00000000  00000000  0024c815  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000454b4  00000000  00000000  0028aaf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001279a8  00000000  00000000  002cffa5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000080f4  00000000  00000000  003f7950  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 f893 	bl	d715c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 f89b 	bl	d7178 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e55c 	.word	0x2003e55c
   d404c:	000d7ee4 	.word	0x000d7ee4
   d4050:	2003e5c4 	.word	0x2003e5c4
   d4054:	2003e5c4 	.word	0x2003e5c4
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f001 ffeb 	bl	d603c <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d7ebc 	.word	0x000d7ebc
   d4080:	000d7ee0 	.word	0x000d7ee0

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b826 	b.w	d40d4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f83d 	bl	d4108 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f001 bf95 	b.w	d5fc0 <_post_loop>

000d4096 <_Znaj>:
   d4096:	f001 bc85 	b.w	d59a4 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f001 bc8b 	b.w	d59b4 <free>
	...

000d40a0 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a2:	4a03      	ldr	r2, [pc, #12]	; (d40b0 <__cxa_pure_virtual+0x10>)
   d40a4:	2100      	movs	r1, #0
   d40a6:	200c      	movs	r0, #12
   d40a8:	f001 fbe0 	bl	d586c <panic_>
  while (1);
   d40ac:	e7fe      	b.n	d40ac <__cxa_pure_virtual+0xc>
   d40ae:	bf00      	nop
   d40b0:	000d55dd 	.word	0x000d55dd

000d40b4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b4:	7800      	ldrb	r0, [r0, #0]
   d40b6:	fab0 f080 	clz	r0, r0
   d40ba:	0940      	lsrs	r0, r0, #5
   d40bc:	4770      	bx	lr

000d40be <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40be:	2301      	movs	r3, #1
   d40c0:	7003      	strb	r3, [r0, #0]
   d40c2:	4770      	bx	lr

000d40c4 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40c4:	b510      	push	{r4, lr}
   d40c6:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d40c8:	6800      	ldr	r0, [r0, #0]
   d40ca:	b108      	cbz	r0, d40d0 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40cc:	f001 fc72 	bl	d59b4 <free>
class SystemClass {
   d40d0:	4620      	mov	r0, r4
   d40d2:	bd10      	pop	{r4, pc}

000d40d4 <setup>:
#include "oled-wing-adafruit.h"
SYSTEM_MODE(MANUAL);
SYSTEM_THREAD(ENABLED);
OledWingAdafruit display;
// setup() runs once, when the device is first turned on.
void setup() {
   d40d4:	b508      	push	{r3, lr}
  // Put initialization like pinMode and begin functions here.
  // sets up the OLED display and sets input as tmp36
  pinMode(A4, INPUT);
   d40d6:	2100      	movs	r1, #0
   d40d8:	200f      	movs	r0, #15
   d40da:	f002 fadf 	bl	d669c <pinMode>
  display.display();  // cause the display to be updated
   d40de:	4808      	ldr	r0, [pc, #32]	; (d4100 <setup+0x2c>)
   d40e0:	f001 f99a 	bl	d5418 <_ZN16Adafruit_SSD13067displayEv>
  display.clearDisplay();
   d40e4:	4806      	ldr	r0, [pc, #24]	; (d4100 <setup+0x2c>)
   d40e6:	f000 ff2b 	bl	d4f40 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setup();
   d40ea:	4805      	ldr	r0, [pc, #20]	; (d4100 <setup+0x2c>)
   d40ec:	f000 fd1c 	bl	d4b28 <_ZN16OledWingAdafruit5setupEv>
  Serial.begin(9600); 
   d40f0:	f002 f8aa 	bl	d6248 <_Z16_fetch_usbserialv>
}
   d40f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.begin(9600); 
   d40f8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40fc:	f002 b898 	b.w	d6230 <_ZN9USBSerial5beginEl>
   d4100:	2003e5d4 	.word	0x2003e5d4
   d4104:	00000000 	.word	0x00000000

000d4108 <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d4108:	b5d0      	push	{r4, r6, r7, lr}
  // reads the tmp36 in a loop
  display.loop();  // this needs to be called each time loop is run
   d410a:	4c37      	ldr	r4, [pc, #220]	; (d41e8 <loop+0xe0>)
void loop() {
   d410c:	ed2d 8b04 	vpush	{d8-d9}
  display.loop();  // this needs to be called each time loop is run
   d4110:	4620      	mov	r0, r4
   d4112:	f000 fd32 	bl	d4b7a <_ZN16OledWingAdafruit4loopEv>
  uint64_t reading = analogRead(A4);
   d4116:	200f      	movs	r0, #15
   d4118:	f002 fafd 	bl	d6716 <analogRead>
  double voltage = (reading * 3.3) / 4095.0;
   d411c:	17c1      	asrs	r1, r0, #31
   d411e:	f002 fce1 	bl	d6ae4 <__aeabi_ul2d>
   d4122:	a32d      	add	r3, pc, #180	; (adr r3, d41d8 <loop+0xd0>)
   d4124:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4128:	f002 fd12 	bl	d6b50 <__aeabi_dmul>
   d412c:	a32c      	add	r3, pc, #176	; (adr r3, d41e0 <loop+0xd8>)
   d412e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4132:	f002 fe37 	bl	d6da4 <__aeabi_ddiv>
  double temperature = (voltage - 0.5) * 100;
   d4136:	4b2d      	ldr	r3, [pc, #180]	; (d41ec <loop+0xe4>)
   d4138:	2200      	movs	r2, #0
  double voltage = (reading * 3.3) / 4095.0;
   d413a:	4606      	mov	r6, r0
   d413c:	460f      	mov	r7, r1
  double temperature = (voltage - 0.5) * 100;
   d413e:	f002 fb4f 	bl	d67e0 <__aeabi_dsub>
   d4142:	4b2b      	ldr	r3, [pc, #172]	; (d41f0 <loop+0xe8>)
   d4144:	2200      	movs	r2, #0
   d4146:	f002 fd03 	bl	d6b50 <__aeabi_dmul>
   d414a:	ec41 0b19 	vmov	d9, r0, r1
  display.clearDisplay();
   d414e:	4620      	mov	r0, r4
   d4150:	f000 fef6 	bl	d4f40 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(1);
   d4154:	4620      	mov	r0, r4
   d4156:	2101      	movs	r1, #1
   d4158:	f000 fc97 	bl	d4a8a <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(WHITE);
  display.setCursor(0,0);
  display.print(temperature); // prints temp
   d415c:	eeb0 0a49 	vmov.f32	s0, s18
   d4160:	eef0 0a69 	vmov.f32	s1, s19
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   d4164:	2200      	movs	r2, #0
   d4166:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   d416a:	2102      	movs	r1, #2
   d416c:	4620      	mov	r0, r4
   d416e:	e9c4 2304 	strd	r2, r3, [r4, #16]
   d4172:	f001 fe93 	bl	d5e9c <_ZN5Print5printEdi>
  display.println(" C");
   d4176:	491f      	ldr	r1, [pc, #124]	; (d41f4 <loop+0xec>)
   d4178:	4620      	mov	r0, r4
   d417a:	f001 fd9e 	bl	d5cba <_ZN5Print7printlnEPKc>
  display.print(voltage*100); // prints temp in F
   d417e:	4b1c      	ldr	r3, [pc, #112]	; (d41f0 <loop+0xe8>)
   d4180:	2200      	movs	r2, #0
   d4182:	4630      	mov	r0, r6
   d4184:	4639      	mov	r1, r7
   d4186:	f002 fce3 	bl	d6b50 <__aeabi_dmul>
   d418a:	ec41 0b18 	vmov	d8, r0, r1
   d418e:	2102      	movs	r1, #2
   d4190:	eeb0 0a48 	vmov.f32	s0, s16
   d4194:	eef0 0a68 	vmov.f32	s1, s17
   d4198:	4620      	mov	r0, r4
   d419a:	f001 fe7f 	bl	d5e9c <_ZN5Print5printEdi>
  display.println(" F");
   d419e:	4916      	ldr	r1, [pc, #88]	; (d41f8 <loop+0xf0>)
   d41a0:	4620      	mov	r0, r4
   d41a2:	f001 fd8a 	bl	d5cba <_ZN5Print7printlnEPKc>
  display.display();  // cause the display to be updated
   d41a6:	4620      	mov	r0, r4
   d41a8:	f001 f936 	bl	d5418 <_ZN16Adafruit_SSD13067displayEv>
  Serial.println(temperature); 
   d41ac:	f002 f84c 	bl	d6248 <_Z16_fetch_usbserialv>
   d41b0:	eeb0 0a49 	vmov.f32	s0, s18
   d41b4:	eef0 0a69 	vmov.f32	s1, s19
   d41b8:	2102      	movs	r1, #2
   d41ba:	f001 fe72 	bl	d5ea2 <_ZN5Print7printlnEdi>
  Serial.println(voltage*100); 
   d41be:	f002 f843 	bl	d6248 <_Z16_fetch_usbserialv>
   d41c2:	eeb0 0a48 	vmov.f32	s0, s16
   d41c6:	eef0 0a68 	vmov.f32	s1, s17
   d41ca:	ecbd 8b04 	vpop	{d8-d9}
  Serial.println(voltage*100); 
   d41ce:	2102      	movs	r1, #2
   d41d0:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
  Serial.println(voltage*100); 
   d41d4:	f001 be65 	b.w	d5ea2 <_ZN5Print7printlnEdi>
   d41d8:	66666666 	.word	0x66666666
   d41dc:	400a6666 	.word	0x400a6666
   d41e0:	00000000 	.word	0x00000000
   d41e4:	40affe00 	.word	0x40affe00
   d41e8:	2003e5d4 	.word	0x2003e5d4
   d41ec:	3fe00000 	.word	0x3fe00000
   d41f0:	40590000 	.word	0x40590000
   d41f4:	000d71f4 	.word	0x000d71f4
   d41f8:	000d71f7 	.word	0x000d71f7

000d41fc <_GLOBAL__sub_I_SystemMode>:
   d41fc:	b538      	push	{r3, r4, r5, lr}
              error_(SYSTEM_ERROR_NONE) {
   d41fe:	4c0f      	ldr	r4, [pc, #60]	; (d423c <_GLOBAL__sub_I_SystemMode+0x40>)
    SleepResult() {}
   d4200:	4b0f      	ldr	r3, [pc, #60]	; (d4240 <_GLOBAL__sub_I_SystemMode+0x44>)
   d4202:	60a3      	str	r3, [r4, #8]
              error_(SYSTEM_ERROR_NONE) {
   d4204:	2500      	movs	r5, #0
   d4206:	6025      	str	r5, [r4, #0]
   d4208:	80a5      	strh	r5, [r4, #4]
    SleepResult() {}
   d420a:	71a5      	strb	r5, [r4, #6]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d420c:	2003      	movs	r0, #3
   d420e:	f001 fb35 	bl	d587c <set_system_mode>
SYSTEM_MODE(MANUAL);
   d4212:	4a0c      	ldr	r2, [pc, #48]	; (d4244 <_GLOBAL__sub_I_SystemMode+0x48>)
   d4214:	490c      	ldr	r1, [pc, #48]	; (d4248 <_GLOBAL__sub_I_SystemMode+0x4c>)
   d4216:	4620      	mov	r0, r4
OledWingAdafruit display;
   d4218:	4c0c      	ldr	r4, [pc, #48]	; (d424c <_GLOBAL__sub_I_SystemMode+0x50>)
SYSTEM_MODE(MANUAL);
   d421a:	f002 fad3 	bl	d67c4 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);
   d421e:	4629      	mov	r1, r5
   d4220:	2001      	movs	r0, #1
   d4222:	f001 fb3b 	bl	d589c <system_thread_set_state>
OledWingAdafruit display;
   d4226:	2107      	movs	r1, #7
   d4228:	4620      	mov	r0, r4
   d422a:	f000 fc4f 	bl	d4acc <_ZN16OledWingAdafruitC1Ei>
   d422e:	4620      	mov	r0, r4
   d4230:	4a04      	ldr	r2, [pc, #16]	; (d4244 <_GLOBAL__sub_I_SystemMode+0x48>)
   d4232:	4907      	ldr	r1, [pc, #28]	; (d4250 <_GLOBAL__sub_I_SystemMode+0x54>)
   d4234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
OledWingAdafruit display;
   d4238:	f002 bac4 	b.w	d67c4 <__aeabi_atexit>
   d423c:	2003e5c8 	.word	0x2003e5c8
   d4240:	ffff0000 	.word	0xffff0000
   d4244:	2003e5c4 	.word	0x2003e5c4
   d4248:	000d40c5 	.word	0x000d40c5
   d424c:	2003e5d4 	.word	0x2003e5d4
   d4250:	000d4a99 	.word	0x000d4a99

000d4254 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d4254:	4770      	bx	lr

000d4256 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d4256:	b510      	push	{r4, lr}
  }
   d4258:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d425a:	4604      	mov	r4, r0
  }
   d425c:	f002 fab7 	bl	d67ce <_ZdlPvj>
   d4260:	4620      	mov	r0, r4
   d4262:	bd10      	pop	{r4, pc}

000d4264 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4264:	b40e      	push	{r1, r2, r3}
   d4266:	b503      	push	{r0, r1, lr}
   d4268:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d426a:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d426c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d4270:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d4272:	f001 fe21 	bl	d5eb8 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d4276:	b002      	add	sp, #8
   d4278:	f85d eb04 	ldr.w	lr, [sp], #4
   d427c:	b003      	add	sp, #12
   d427e:	4770      	bx	lr

000d4280 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4280:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4282:	4604      	mov	r4, r0
   d4284:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d4286:	7922      	ldrb	r2, [r4, #4]
   d4288:	68a3      	ldr	r3, [r4, #8]
   d428a:	b132      	cbz	r2, d429a <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d428c:	b9a3      	cbnz	r3, d42b8 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d428e:	490b      	ldr	r1, [pc, #44]	; (d42bc <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d4290:	b002      	add	sp, #8
   d4292:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d4296:	f001 bcfd 	b.w	d5c94 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d429a:	4a09      	ldr	r2, [pc, #36]	; (d42c0 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d429c:	7b26      	ldrb	r6, [r4, #12]
   d429e:	4d09      	ldr	r5, [pc, #36]	; (d42c4 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d42a0:	4909      	ldr	r1, [pc, #36]	; (d42c8 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d42a2:	7b64      	ldrb	r4, [r4, #13]
   d42a4:	2e01      	cmp	r6, #1
   d42a6:	bf18      	it	ne
   d42a8:	4629      	movne	r1, r5
   d42aa:	e9cd 1400 	strd	r1, r4, [sp]
   d42ae:	4907      	ldr	r1, [pc, #28]	; (d42cc <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d42b0:	f7ff ffd8 	bl	d4264 <_ZN5Print6printfEPKcz>
  }
   d42b4:	b002      	add	sp, #8
   d42b6:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d42b8:	4a05      	ldr	r2, [pc, #20]	; (d42d0 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d42ba:	e7ef      	b.n	d429c <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d42bc:	000d720b 	.word	0x000d720b
   d42c0:	000d7202 	.word	0x000d7202
   d42c4:	000d7207 	.word	0x000d7207
   d42c8:	000d7203 	.word	0x000d7203
   d42cc:	000d7221 	.word	0x000d7221
   d42d0:	000d71fa 	.word	0x000d71fa

000d42d4 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   d42d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d42d8:	b085      	sub	sp, #20
   d42da:	461f      	mov	r7, r3
   d42dc:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   d42e0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d42e4:	eba8 0902 	sub.w	r9, r8, r2
   d42e8:	eba7 0a01 	sub.w	sl, r7, r1
   d42ec:	f1b9 0f00 	cmp.w	r9, #0
   d42f0:	bfb8      	it	lt
   d42f2:	f1c9 0900 	rsblt	r9, r9, #0
   d42f6:	f1ba 0f00 	cmp.w	sl, #0
   d42fa:	bfb8      	it	lt
   d42fc:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   d4300:	45d1      	cmp	r9, sl
        uint16_t color) {
   d4302:	4683      	mov	fp, r0
   d4304:	460c      	mov	r4, r1
   d4306:	4615      	mov	r5, r2
    if (steep) {
   d4308:	dd04      	ble.n	d4314 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   d430a:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   d430c:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   d430e:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   d4310:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   d4312:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   d4314:	42bc      	cmp	r4, r7
   d4316:	dd05      	ble.n	d4324 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   d4318:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   d431a:	4645      	mov	r5, r8
   d431c:	4690      	mov	r8, r2
    if (x0 > x1) {
   d431e:	4622      	mov	r2, r4
   d4320:	463c      	mov	r4, r7
   d4322:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   d4324:	1b3e      	subs	r6, r7, r4
   d4326:	b2b2      	uxth	r2, r6
   d4328:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   d432a:	eba8 0205 	sub.w	r2, r8, r5
   d432e:	2a00      	cmp	r2, #0
   d4330:	bfb8      	it	lt
   d4332:	4252      	neglt	r2, r2
   d4334:	9201      	str	r2, [sp, #4]

    int16_t err = dx / 2;
   d4336:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   d433a:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   d433e:	4545      	cmp	r5, r8
   d4340:	bfb4      	ite	lt
   d4342:	2201      	movlt	r2, #1
   d4344:	f04f 32ff 	movge.w	r2, #4294967295
    int16_t err = dx / 2;
   d4348:	1076      	asrs	r6, r6, #1
        ystep = -1;
   d434a:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   d434c:	42bc      	cmp	r4, r7
   d434e:	dc1c      	bgt.n	d438a <_ZN12Adafruit_GFX9writeLineEsssst+0xb6>
        if (steep) {
   d4350:	f8db 2000 	ldr.w	r2, [fp]
            writePixel(y0, x0, color);
   d4354:	9303      	str	r3, [sp, #12]
        if (steep) {
   d4356:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   d4358:	f8d2 8018 	ldr.w	r8, [r2, #24]
   d435c:	bfc7      	ittee	gt
   d435e:	4629      	movgt	r1, r5
   d4360:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   d4362:	462a      	movle	r2, r5
   d4364:	4621      	movle	r1, r4
   d4366:	4658      	mov	r0, fp
   d4368:	47c0      	blx	r8
        }
        err -= dy;
   d436a:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   d436c:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   d436e:	1ab6      	subs	r6, r6, r2
   d4370:	b2b1      	uxth	r1, r6
   d4372:	b236      	sxth	r6, r6
        if (err < 0) {
   d4374:	2e00      	cmp	r6, #0
   d4376:	da05      	bge.n	d4384 <_ZN12Adafruit_GFX9writeLineEsssst+0xb0>
            y0 += ystep;
   d4378:	9a02      	ldr	r2, [sp, #8]
   d437a:	4415      	add	r5, r2
            err += dx;
   d437c:	9a00      	ldr	r2, [sp, #0]
   d437e:	1856      	adds	r6, r2, r1
            y0 += ystep;
   d4380:	b22d      	sxth	r5, r5
            err += dx;
   d4382:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   d4384:	3401      	adds	r4, #1
   d4386:	b224      	sxth	r4, r4
   d4388:	e7e0      	b.n	d434c <_ZN12Adafruit_GFX9writeLineEsssst+0x78>
        }
    }
}
   d438a:	b005      	add	sp, #20
   d438c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4390 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   d4390:	4770      	bx	lr

000d4392 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   d4392:	b410      	push	{r4}
    drawPixel(x, y, color);
   d4394:	6804      	ldr	r4, [r0, #0]
   d4396:	6924      	ldr	r4, [r4, #16]
   d4398:	46a4      	mov	ip, r4
}
   d439a:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   d439e:	4760      	bx	ip

000d43a0 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d43a0:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   d43a2:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   d43a4:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   d43a8:	9502      	str	r5, [sp, #8]
   d43aa:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   d43ac:	46a4      	mov	ip, r4
}
   d43ae:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   d43b0:	4760      	bx	ip

000d43b2 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d43b2:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   d43b4:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   d43b6:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   d43ba:	9502      	str	r5, [sp, #8]
   d43bc:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   d43be:	46a4      	mov	ip, r4
}
   d43c0:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   d43c2:	4760      	bx	ip

000d43c4 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d43c4:	b470      	push	{r4, r5, r6}
   d43c6:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   d43ca:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   d43ce:	6804      	ldr	r4, [r0, #0]
   d43d0:	e9cd 5603 	strd	r5, r6, [sp, #12]
   d43d4:	6c24      	ldr	r4, [r4, #64]	; 0x40
   d43d6:	46a4      	mov	ip, r4
}
   d43d8:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   d43da:	4760      	bx	ip

000d43dc <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d43dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d43e0:	461c      	mov	r4, r3
    startWrite();
   d43e2:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   d43e4:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d43e8:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   d43ea:	4605      	mov	r5, r0
   d43ec:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   d43ee:	3c01      	subs	r4, #1
   d43f0:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   d43f2:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   d43f4:	b224      	sxth	r4, r4
    startWrite();
   d43f6:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   d43f8:	682b      	ldr	r3, [r5, #0]
   d43fa:	f8cd 8004 	str.w	r8, [sp, #4]
   d43fe:	9400      	str	r4, [sp, #0]
   d4400:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   d4402:	4628      	mov	r0, r5
   d4404:	463b      	mov	r3, r7
   d4406:	4632      	mov	r2, r6
   d4408:	4639      	mov	r1, r7
   d440a:	47a0      	blx	r4
    endWrite();
   d440c:	682b      	ldr	r3, [r5, #0]
   d440e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4410:	4628      	mov	r0, r5
}
   d4412:	b002      	add	sp, #8
   d4414:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d4418:	4718      	bx	r3

000d441a <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d441a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d441e:	461d      	mov	r5, r3
    startWrite();
   d4420:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   d4422:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d4426:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   d4428:	4604      	mov	r4, r0
   d442a:	4617      	mov	r7, r2
   d442c:	460e      	mov	r6, r1
    startWrite();
   d442e:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   d4430:	e9cd 7800 	strd	r7, r8, [sp]
   d4434:	6822      	ldr	r2, [r4, #0]
   d4436:	1e6b      	subs	r3, r5, #1
   d4438:	4433      	add	r3, r6
   d443a:	6a95      	ldr	r5, [r2, #40]	; 0x28
   d443c:	4620      	mov	r0, r4
   d443e:	b21b      	sxth	r3, r3
   d4440:	463a      	mov	r2, r7
   d4442:	4631      	mov	r1, r6
   d4444:	47a8      	blx	r5
    endWrite();
   d4446:	6823      	ldr	r3, [r4, #0]
   d4448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d444a:	4620      	mov	r0, r4
}
   d444c:	b002      	add	sp, #8
   d444e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d4452:	4718      	bx	r3

000d4454 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4454:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4458:	461e      	mov	r6, r3
    startWrite();
   d445a:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d445c:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   d4460:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d4462:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   d4466:	460c      	mov	r4, r1
   d4468:	4605      	mov	r5, r0
   d446a:	4617      	mov	r7, r2
    startWrite();
   d446c:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   d446e:	4426      	add	r6, r4
   d4470:	42b4      	cmp	r4, r6
   d4472:	682b      	ldr	r3, [r5, #0]
   d4474:	da0b      	bge.n	d448e <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   d4476:	f8cd 8000 	str.w	r8, [sp]
   d447a:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d447e:	4621      	mov	r1, r4
   d4480:	464b      	mov	r3, r9
   d4482:	463a      	mov	r2, r7
   d4484:	4628      	mov	r0, r5
   d4486:	3401      	adds	r4, #1
   d4488:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   d448a:	b224      	sxth	r4, r4
   d448c:	e7f0      	b.n	d4470 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   d448e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4490:	4628      	mov	r0, r5
}
   d4492:	b002      	add	sp, #8
   d4494:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d4498:	4718      	bx	r3

000d449a <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   d449a:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   d449c:	6802      	ldr	r2, [r0, #0]
   d449e:	9101      	str	r1, [sp, #4]
   d44a0:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   d44a4:	9100      	str	r1, [sp, #0]
   d44a6:	6c14      	ldr	r4, [r2, #64]	; 0x40
   d44a8:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d44ac:	2200      	movs	r2, #0
   d44ae:	4611      	mov	r1, r2
   d44b0:	47a0      	blx	r4
}
   d44b2:	b002      	add	sp, #8
   d44b4:	bd10      	pop	{r4, pc}

000d44b6 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d44b6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d44ba:	461d      	mov	r5, r3
    startWrite();
   d44bc:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d44be:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   d44c2:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d44c4:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   d44c8:	4604      	mov	r4, r0
   d44ca:	460f      	mov	r7, r1
   d44cc:	4616      	mov	r6, r2
    startWrite();
   d44ce:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   d44d0:	6823      	ldr	r3, [r4, #0]
   d44d2:	f8cd 8000 	str.w	r8, [sp]
   d44d6:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d44da:	4632      	mov	r2, r6
   d44dc:	462b      	mov	r3, r5
   d44de:	4639      	mov	r1, r7
   d44e0:	4620      	mov	r0, r4
   d44e2:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   d44e4:	6823      	ldr	r3, [r4, #0]
   d44e6:	f8cd 8000 	str.w	r8, [sp]
   d44ea:	f109 32ff 	add.w	r2, r9, #4294967295
   d44ee:	4432      	add	r2, r6
   d44f0:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d44f4:	4639      	mov	r1, r7
   d44f6:	462b      	mov	r3, r5
   d44f8:	4620      	mov	r0, r4
   d44fa:	b212      	sxth	r2, r2
   d44fc:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   d44fe:	6823      	ldr	r3, [r4, #0]
   d4500:	f8cd 8000 	str.w	r8, [sp]
   d4504:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d4508:	4632      	mov	r2, r6
   d450a:	464b      	mov	r3, r9
   d450c:	4639      	mov	r1, r7
   d450e:	4620      	mov	r0, r4
   d4510:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   d4512:	1e6b      	subs	r3, r5, #1
   d4514:	19d9      	adds	r1, r3, r7
   d4516:	6823      	ldr	r3, [r4, #0]
   d4518:	f8cd 8000 	str.w	r8, [sp]
   d451c:	6a1d      	ldr	r5, [r3, #32]
   d451e:	4620      	mov	r0, r4
   d4520:	464b      	mov	r3, r9
   d4522:	4632      	mov	r2, r6
   d4524:	b209      	sxth	r1, r1
   d4526:	47a8      	blx	r5
    endWrite();
   d4528:	6823      	ldr	r3, [r4, #0]
   d452a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d452c:	4620      	mov	r0, r4
}
   d452e:	b002      	add	sp, #8
   d4530:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d4534:	4718      	bx	r3

000d4536 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   d4536:	4770      	bx	lr

000d4538 <_ZN12Adafruit_GFX8drawLineEsssst>:
        uint16_t color) {
   d4538:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if(x0 == x1){
   d453c:	4299      	cmp	r1, r3
        uint16_t color) {
   d453e:	4616      	mov	r6, r2
   d4540:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   d4544:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d4548:	6802      	ldr	r2, [r0, #0]
   d454a:	4680      	mov	r8, r0
   d454c:	460d      	mov	r5, r1
   d454e:	461c      	mov	r4, r3
    if(x0 == x1){
   d4550:	d113      	bne.n	d457a <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   d4552:	42be      	cmp	r6, r7
   d4554:	bfc8      	it	gt
   d4556:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d4558:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   d455c:	bfc4      	itt	gt
   d455e:	463e      	movgt	r6, r7
   d4560:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d4562:	1c7b      	adds	r3, r7, #1
   d4564:	6b94      	ldr	r4, [r2, #56]	; 0x38
   d4566:	1b9b      	subs	r3, r3, r6
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d4568:	b21b      	sxth	r3, r3
   d456a:	4632      	mov	r2, r6
   d456c:	4629      	mov	r1, r5
   d456e:	4640      	mov	r0, r8
   d4570:	46a4      	mov	ip, r4
}
   d4572:	b003      	add	sp, #12
   d4574:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d4578:	4760      	bx	ip
    } else if(y0 == y1){
   d457a:	42be      	cmp	r6, r7
   d457c:	d10a      	bne.n	d4594 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   d457e:	4299      	cmp	r1, r3
   d4580:	bfc2      	ittt	gt
   d4582:	460b      	movgt	r3, r1
   d4584:	4625      	movgt	r5, r4
   d4586:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d4588:	1c63      	adds	r3, r4, #1
   d458a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   d458e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d4590:	1b5b      	subs	r3, r3, r5
   d4592:	e7e9      	b.n	d4568 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   d4594:	6953      	ldr	r3, [r2, #20]
   d4596:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   d4598:	e9cd 7900 	strd	r7, r9, [sp]
   d459c:	f8d8 3000 	ldr.w	r3, [r8]
   d45a0:	4640      	mov	r0, r8
   d45a2:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d45a4:	4632      	mov	r2, r6
   d45a6:	4623      	mov	r3, r4
   d45a8:	4629      	mov	r1, r5
   d45aa:	47b8      	blx	r7
        endWrite();
   d45ac:	f8d8 3000 	ldr.w	r3, [r8]
   d45b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d45b2:	4640      	mov	r0, r8
}
   d45b4:	b003      	add	sp, #12
   d45b6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   d45ba:	4718      	bx	r3

000d45bc <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   d45bc:	f001 0303 	and.w	r3, r1, #3
   d45c0:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   d45c4:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   d45c6:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   d45c8:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d45cc:	bf59      	ittee	pl
   d45ce:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   d45d0:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   d45d2:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   d45d4:	81c3      	strhmi	r3, [r0, #14]
}
   d45d6:	4770      	bx	lr

000d45d8 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d45d8:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   d45da:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   d45dc:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   d45de:	4a07      	ldr	r2, [pc, #28]	; (d45fc <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   d45e0:	4d07      	ldr	r5, [pc, #28]	; (d4600 <_ZN12Adafruit_GFXC1Ess+0x28>)
   d45e2:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   d45e4:	2400      	movs	r4, #0
    _width    = WIDTH;
   d45e6:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   d45e8:	f04f 31ff 	mov.w	r1, #4294967295
   d45ec:	e9c0 1205 	strd	r1, r2, [r0, #20]
   d45f0:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   d45f2:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   d45f4:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   d45f6:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   d45f8:	6204      	str	r4, [r0, #32]
}
   d45fa:	bd30      	pop	{r4, r5, pc}
   d45fc:	01000101 	.word	0x01000101
   d4600:	000d7748 	.word	0x000d7748

000d4604 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d4604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4608:	b089      	sub	sp, #36	; 0x24
   d460a:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   d460e:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d4610:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   d4614:	9304      	str	r3, [sp, #16]
   d4616:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   d461a:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d461c:	9305      	str	r3, [sp, #20]
   d461e:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   d4622:	4604      	mov	r4, r0
    startWrite();
   d4624:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d4626:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   d462a:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d462e:	bf48      	it	mi
   d4630:	f108 020e 	addmi.w	r2, r8, #14
   d4634:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   d4638:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   d463a:	4635      	mov	r5, r6
   d463c:	9b03      	ldr	r3, [sp, #12]
   d463e:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   d4640:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   d4644:	189a      	adds	r2, r3, r2
   d4646:	9b05      	ldr	r3, [sp, #20]
   d4648:	428b      	cmp	r3, r1
   d464a:	b212      	sxth	r2, r2
   d464c:	dd27      	ble.n	d469e <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d464e:	9b04      	ldr	r3, [sp, #16]
   d4650:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   d4652:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d4656:	9306      	str	r3, [sp, #24]
   d4658:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   d465c:	4580      	cmp	r8, r0
   d465e:	fa1f f189 	uxth.w	r1, r9
   d4662:	dd17      	ble.n	d4694 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   d4664:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d4666:	bf05      	ittet	eq
   d4668:	9b06      	ldreq	r3, [sp, #24]
   d466a:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   d466c:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d466e:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   d4670:	bf18      	it	ne
   d4672:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   d4674:	062b      	lsls	r3, r5, #24
   d4676:	d50a      	bpl.n	d468e <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   d4678:	9b02      	ldr	r3, [sp, #8]
   d467a:	6820      	ldr	r0, [r4, #0]
   d467c:	9207      	str	r2, [sp, #28]
   d467e:	4419      	add	r1, r3
   d4680:	6983      	ldr	r3, [r0, #24]
   d4682:	b209      	sxth	r1, r1
   d4684:	461f      	mov	r7, r3
   d4686:	4620      	mov	r0, r4
   d4688:	4653      	mov	r3, sl
   d468a:	47b8      	blx	r7
   d468c:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   d468e:	f109 0901 	add.w	r9, r9, #1
   d4692:	e7e1      	b.n	d4658 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   d4694:	9b01      	ldr	r3, [sp, #4]
   d4696:	3301      	adds	r3, #1
   d4698:	9301      	str	r3, [sp, #4]
   d469a:	445e      	add	r6, fp
   d469c:	e7ce      	b.n	d463c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   d469e:	6823      	ldr	r3, [r4, #0]
   d46a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d46a2:	4620      	mov	r0, r4
}
   d46a4:	b009      	add	sp, #36	; 0x24
   d46a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   d46aa:	4718      	bx	r3

000d46ac <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   d46ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d46b0:	ed2d 8b02 	vpush	{d8}
   d46b4:	b091      	sub	sp, #68	; 0x44
   d46b6:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   d46b8:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   d46ba:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   d46be:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   d46c2:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   d46c6:	9103      	str	r1, [sp, #12]
   d46c8:	461f      	mov	r7, r3
   d46ca:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   d46ce:	9304      	str	r3, [sp, #16]
   d46d0:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   d46d2:	2a00      	cmp	r2, #0
   d46d4:	f040 80c5 	bne.w	d4862 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   d46d8:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d46dc:	428b      	cmp	r3, r1
   d46de:	f340 814c 	ble.w	d497a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   d46e2:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   d46e6:	42b3      	cmp	r3, r6
   d46e8:	f340 8147 	ble.w	d497a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   d46ec:	2306      	movs	r3, #6
   d46ee:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   d46f2:	2b00      	cmp	r3, #0
   d46f4:	f340 8141 	ble.w	d497a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   d46f8:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   d46fc:	2b00      	cmp	r3, #0
   d46fe:	f340 813c 	ble.w	d497a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   d4702:	7f03      	ldrb	r3, [r0, #28]
   d4704:	b91b      	cbnz	r3, d470e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   d4706:	2faf      	cmp	r7, #175	; 0xaf
   d4708:	bf84      	itt	hi
   d470a:	3701      	addhi	r7, #1
   d470c:	b2ff      	uxtbhi	r7, r7
        startWrite();
   d470e:	f8db 3000 	ldr.w	r3, [fp]
   d4712:	4658      	mov	r0, fp
   d4714:	695b      	ldr	r3, [r3, #20]
   d4716:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d4718:	2205      	movs	r2, #5
   d471a:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d471c:	2200      	movs	r2, #0
   d471e:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d4720:	4a98      	ldr	r2, [pc, #608]	; (d4984 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   d4722:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   d4726:	18d3      	adds	r3, r2, r3
   d4728:	930c      	str	r3, [sp, #48]	; 0x30
   d472a:	b2b3      	uxth	r3, r6
   d472c:	9306      	str	r3, [sp, #24]
   d472e:	9a05      	ldr	r2, [sp, #20]
   d4730:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d4732:	5c9b      	ldrb	r3, [r3, r2]
   d4734:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d4736:	b2ab      	uxth	r3, r5
   d4738:	930b      	str	r3, [sp, #44]	; 0x2c
   d473a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d473e:	9308      	str	r3, [sp, #32]
   d4740:	9b03      	ldr	r3, [sp, #12]
   d4742:	fb02 f905 	mul.w	r9, r2, r5
   d4746:	fa19 f983 	uxtah	r9, r9, r3
   d474a:	fa0f f389 	sxth.w	r3, r9
   d474e:	ee08 3a10 	vmov	s16, r3
   d4752:	2308      	movs	r3, #8
   d4754:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   d4756:	9b03      	ldr	r3, [sp, #12]
   d4758:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d475c:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   d4760:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   d4764:	9a07      	ldr	r2, [sp, #28]
   d4766:	f8db 3000 	ldr.w	r3, [fp]
   d476a:	07d2      	lsls	r2, r2, #31
   d476c:	d552      	bpl.n	d4814 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   d476e:	2d01      	cmp	r5, #1
   d4770:	fa1f f289 	uxth.w	r2, r9
   d4774:	d13e      	bne.n	d47f4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   d4776:	2c01      	cmp	r4, #1
   d4778:	d13c      	bne.n	d47f4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   d477a:	699b      	ldr	r3, [r3, #24]
   d477c:	9906      	ldr	r1, [sp, #24]
   d477e:	461f      	mov	r7, r3
   d4780:	9b04      	ldr	r3, [sp, #16]
   d4782:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   d4784:	b212      	sxth	r2, r2
   d4786:	4651      	mov	r1, sl
   d4788:	4658      	mov	r0, fp
   d478a:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d478c:	f109 0301 	add.w	r3, r9, #1
   d4790:	fa4f f983 	sxtb.w	r9, r3
   d4794:	9b07      	ldr	r3, [sp, #28]
   d4796:	085b      	lsrs	r3, r3, #1
   d4798:	9307      	str	r3, [sp, #28]
   d479a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d479c:	3b01      	subs	r3, #1
   d479e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d47a2:	930a      	str	r3, [sp, #40]	; 0x28
   d47a4:	d1de      	bne.n	d4764 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d47a6:	9f05      	ldr	r7, [sp, #20]
   d47a8:	3701      	adds	r7, #1
   d47aa:	b27b      	sxtb	r3, r7
   d47ac:	9305      	str	r3, [sp, #20]
   d47ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d47b0:	3b01      	subs	r3, #1
   d47b2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d47b6:	9309      	str	r3, [sp, #36]	; 0x24
   d47b8:	d1b9      	bne.n	d472e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   d47ba:	9b04      	ldr	r3, [sp, #16]
   d47bc:	4543      	cmp	r3, r8
   d47be:	d00f      	beq.n	d47e0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   d47c0:	2d01      	cmp	r5, #1
   d47c2:	f8db 3000 	ldr.w	r3, [fp]
   d47c6:	d13b      	bne.n	d4840 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d47c8:	2c01      	cmp	r4, #1
   d47ca:	d139      	bne.n	d4840 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d47cc:	9908      	ldr	r1, [sp, #32]
   d47ce:	f8cd 8000 	str.w	r8, [sp]
   d47d2:	3105      	adds	r1, #5
   d47d4:	6a1c      	ldr	r4, [r3, #32]
   d47d6:	4632      	mov	r2, r6
   d47d8:	2308      	movs	r3, #8
   d47da:	b209      	sxth	r1, r1
   d47dc:	4658      	mov	r0, fp
   d47de:	47a0      	blx	r4
        endWrite();
   d47e0:	f8db 3000 	ldr.w	r3, [fp]
   d47e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d47e6:	4658      	mov	r0, fp
}
   d47e8:	b011      	add	sp, #68	; 0x44
   d47ea:	ecbd 8b02 	vpop	{d8}
   d47ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   d47f2:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   d47f4:	9906      	ldr	r1, [sp, #24]
   d47f6:	fb14 f202 	smulbb	r2, r4, r2
   d47fa:	440a      	add	r2, r1
   d47fc:	9904      	ldr	r1, [sp, #16]
   d47fe:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d4800:	9400      	str	r4, [sp, #0]
   d4802:	69db      	ldr	r3, [r3, #28]
   d4804:	ee18 1a10 	vmov	r1, s16
   d4808:	461f      	mov	r7, r3
   d480a:	b212      	sxth	r2, r2
   d480c:	462b      	mov	r3, r5
   d480e:	4658      	mov	r0, fp
   d4810:	47b8      	blx	r7
   d4812:	e7bb      	b.n	d478c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   d4814:	9a04      	ldr	r2, [sp, #16]
   d4816:	4542      	cmp	r2, r8
   d4818:	d0b8      	beq.n	d478c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   d481a:	2d01      	cmp	r5, #1
   d481c:	fa1f f289 	uxth.w	r2, r9
   d4820:	d107      	bne.n	d4832 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   d4822:	2c01      	cmp	r4, #1
   d4824:	d105      	bne.n	d4832 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   d4826:	699b      	ldr	r3, [r3, #24]
   d4828:	9906      	ldr	r1, [sp, #24]
   d482a:	461f      	mov	r7, r3
   d482c:	440a      	add	r2, r1
   d482e:	4643      	mov	r3, r8
   d4830:	e7a8      	b.n	d4784 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d4832:	9906      	ldr	r1, [sp, #24]
   d4834:	f8cd 8004 	str.w	r8, [sp, #4]
   d4838:	fb14 f202 	smulbb	r2, r4, r2
   d483c:	440a      	add	r2, r1
   d483e:	e7df      	b.n	d4800 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   d4840:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d4842:	f8cd 8004 	str.w	r8, [sp, #4]
   d4846:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   d484a:	9a08      	ldr	r2, [sp, #32]
   d484c:	00e4      	lsls	r4, r4, #3
   d484e:	440a      	add	r2, r1
   d4850:	4611      	mov	r1, r2
   d4852:	9400      	str	r4, [sp, #0]
   d4854:	69dc      	ldr	r4, [r3, #28]
   d4856:	4632      	mov	r2, r6
   d4858:	462b      	mov	r3, r5
   d485a:	b209      	sxth	r1, r1
   d485c:	4658      	mov	r0, fp
   d485e:	47a0      	blx	r4
        endWrite();
   d4860:	e7be      	b.n	d47e0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d4862:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   d4864:	6851      	ldr	r1, [r2, #4]
        uint8_t  *bitmap = pgm_read_bitmap_ptr(gfxFont);
   d4866:	6812      	ldr	r2, [r2, #0]
   d4868:	920d      	str	r2, [sp, #52]	; 0x34
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d486a:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   d486c:	b2ff      	uxtb	r7, r7
   d486e:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   d4872:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   d4876:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   d4878:	789a      	ldrb	r2, [r3, #2]
   d487a:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   d487c:	78da      	ldrb	r2, [r3, #3]
   d487e:	920b      	str	r2, [sp, #44]	; 0x2c
        if(size_x > 1 || size_y > 1) {
   d4880:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d4882:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   d4886:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d488a:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   d488c:	d801      	bhi.n	d4892 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   d488e:	2c01      	cmp	r4, #1
   d4890:	d957      	bls.n	d4942 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   d4892:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   d4896:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   d4898:	fa0f f38a 	sxth.w	r3, sl
   d489c:	9307      	str	r3, [sp, #28]
        startWrite();
   d489e:	f8db 3000 	ldr.w	r3, [fp]
   d48a2:	4658      	mov	r0, fp
   d48a4:	695b      	ldr	r3, [r3, #20]
   d48a6:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d48a8:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d48aa:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d48ae:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   d48b0:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d48b4:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   d48b6:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   d48b8:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   d48ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d48bc:	429f      	cmp	r7, r3
   d48be:	d28f      	bcs.n	d47e0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d48c0:	9b07      	ldr	r3, [sp, #28]
   d48c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   d48c4:	443b      	add	r3, r7
   d48c6:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   d48ca:	2200      	movs	r2, #0
   d48cc:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   d48ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d48d0:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d48d2:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d48d6:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d48da:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d48de:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   d48e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d48e2:	9905      	ldr	r1, [sp, #20]
   d48e4:	4291      	cmp	r1, r2
   d48e6:	d241      	bcs.n	d496c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   d48e8:	1c5a      	adds	r2, r3, #1
   d48ea:	b2d2      	uxtb	r2, r2
   d48ec:	075b      	lsls	r3, r3, #29
   d48ee:	920c      	str	r2, [sp, #48]	; 0x30
   d48f0:	d107      	bne.n	d4902 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   d48f2:	9b06      	ldr	r3, [sp, #24]
   d48f4:	9906      	ldr	r1, [sp, #24]
   d48f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   d48f8:	3301      	adds	r3, #1
   d48fa:	b29b      	uxth	r3, r3
   d48fc:	f812 9001 	ldrb.w	r9, [r2, r1]
   d4900:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   d4902:	f019 0f80 	tst.w	r9, #128	; 0x80
   d4906:	d012      	beq.n	d492e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   d4908:	2d01      	cmp	r5, #1
   d490a:	f8db 3000 	ldr.w	r3, [fp]
   d490e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d4912:	d11a      	bne.n	d494a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   d4914:	2c01      	cmp	r4, #1
   d4916:	d118      	bne.n	d494a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4918:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d491a:	699b      	ldr	r3, [r3, #24]
   d491c:	4411      	add	r1, r2
   d491e:	9a05      	ldr	r2, [sp, #20]
   d4920:	4411      	add	r1, r2
   d4922:	461e      	mov	r6, r3
   d4924:	4652      	mov	r2, sl
   d4926:	9b04      	ldr	r3, [sp, #16]
   d4928:	b209      	sxth	r1, r1
   d492a:	4658      	mov	r0, fp
   d492c:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   d492e:	9e05      	ldr	r6, [sp, #20]
   d4930:	3601      	adds	r6, #1
   d4932:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   d4934:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   d4938:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   d493a:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   d493e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            for(xx=0; xx<w; xx++) {
   d4940:	e7ce      	b.n	d48e0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   d4942:	2300      	movs	r3, #0
   d4944:	e9cd 3307 	strd	r3, r3, [sp, #28]
   d4948:	e7a9      	b.n	d489e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d494a:	9805      	ldr	r0, [sp, #20]
   d494c:	9a08      	ldr	r2, [sp, #32]
   d494e:	4402      	add	r2, r0
   d4950:	fb02 1105 	mla	r1, r2, r5, r1
   d4954:	9a04      	ldr	r2, [sp, #16]
   d4956:	e9cd 4200 	strd	r4, r2, [sp]
   d495a:	69db      	ldr	r3, [r3, #28]
   d495c:	ee18 2a10 	vmov	r2, s16
   d4960:	461e      	mov	r6, r3
   d4962:	b209      	sxth	r1, r1
   d4964:	462b      	mov	r3, r5
   d4966:	4658      	mov	r0, fp
   d4968:	47b0      	blx	r6
   d496a:	e7e0      	b.n	d492e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   d496c:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   d496e:	3701      	adds	r7, #1
   d4970:	4498      	add	r8, r3
   d4972:	fa5f f888 	uxtb.w	r8, r8
   d4976:	b2ff      	uxtb	r7, r7
   d4978:	e79f      	b.n	d48ba <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   d497a:	b011      	add	sp, #68	; 0x44
   d497c:	ecbd 8b02 	vpop	{d8}
   d4980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4984:	000d723e 	.word	0x000d723e

000d4988 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   d4988:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   d498a:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   d498c:	b085      	sub	sp, #20
   d498e:	4604      	mov	r4, r0
   d4990:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   d4992:	2a00      	cmp	r2, #0
   d4994:	d134      	bne.n	d4a00 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   d4996:	290a      	cmp	r1, #10
   d4998:	d108      	bne.n	d49ac <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   d499a:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   d499c:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   d499e:	7e42      	ldrb	r2, [r0, #25]
   d49a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   d49a4:	8263      	strh	r3, [r4, #18]
}
   d49a6:	2001      	movs	r0, #1
   d49a8:	b005      	add	sp, #20
   d49aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   d49ac:	290d      	cmp	r1, #13
   d49ae:	d0fa      	beq.n	d49a6 <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   d49b0:	7ee1      	ldrb	r1, [r4, #27]
   d49b2:	7e00      	ldrb	r0, [r0, #24]
   d49b4:	7e65      	ldrb	r5, [r4, #25]
   d49b6:	b171      	cbz	r1, d49d6 <_ZN12Adafruit_GFX5writeEh+0x4e>
   d49b8:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   d49bc:	2106      	movs	r1, #6
   d49be:	fb11 6100 	smlabb	r1, r1, r0, r6
   d49c2:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   d49c6:	42b1      	cmp	r1, r6
   d49c8:	bfc1      	itttt	gt
   d49ca:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   d49ce:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   d49d0:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   d49d4:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   d49d6:	8ae2      	ldrh	r2, [r4, #22]
   d49d8:	9201      	str	r2, [sp, #4]
   d49da:	8aa2      	ldrh	r2, [r4, #20]
   d49dc:	9200      	str	r2, [sp, #0]
   d49de:	e9cd 0502 	strd	r0, r5, [sp, #8]
   d49e2:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d49e6:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d49ea:	4620      	mov	r0, r4
   d49ec:	f7ff fe5e 	bl	d46ac <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   d49f0:	7e23      	ldrb	r3, [r4, #24]
   d49f2:	8a22      	ldrh	r2, [r4, #16]
   d49f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d49f8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d49fc:	8223      	strh	r3, [r4, #16]
   d49fe:	e7d2      	b.n	d49a6 <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   d4a00:	290a      	cmp	r1, #10
   d4a02:	d107      	bne.n	d4a14 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   d4a04:	2300      	movs	r3, #0
   d4a06:	8203      	strh	r3, [r0, #16]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d4a08:	7a93      	ldrb	r3, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   d4a0a:	7e41      	ldrb	r1, [r0, #25]
   d4a0c:	8a42      	ldrh	r2, [r0, #18]
   d4a0e:	fb01 2303 	mla	r3, r1, r3, r2
   d4a12:	e7c7      	b.n	d49a4 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   d4a14:	290d      	cmp	r1, #13
   d4a16:	d0c6      	beq.n	d49a6 <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   d4a18:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   d4a1a:	42a9      	cmp	r1, r5
   d4a1c:	d3c3      	bcc.n	d49a6 <_ZN12Adafruit_GFX5writeEh+0x1e>
   d4a1e:	7a51      	ldrb	r1, [r2, #9]
   d4a20:	4299      	cmp	r1, r3
   d4a22:	d3c0      	bcc.n	d49a6 <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   d4a24:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   d4a26:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   d4a28:	b2ed      	uxtb	r5, r5
   d4a2a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   d4a2e:	78af      	ldrb	r7, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   d4a30:	b32f      	cbz	r7, d4a7e <_ZN12Adafruit_GFX5writeEh+0xf6>
   d4a32:	78e9      	ldrb	r1, [r5, #3]
   d4a34:	b319      	cbz	r1, d4a7e <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   d4a36:	7ee1      	ldrb	r1, [r4, #27]
   d4a38:	7e00      	ldrb	r0, [r0, #24]
   d4a3a:	7e66      	ldrb	r6, [r4, #25]
   d4a3c:	b191      	cbz	r1, d4a64 <_ZN12Adafruit_GFX5writeEh+0xdc>
   d4a3e:	f995 1005 	ldrsb.w	r1, [r5, #5]
   d4a42:	4439      	add	r1, r7
   d4a44:	f9b4 7010 	ldrsh.w	r7, [r4, #16]
   d4a48:	fb00 7101 	mla	r1, r0, r1, r7
   d4a4c:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
   d4a50:	42b9      	cmp	r1, r7
   d4a52:	dd07      	ble.n	d4a64 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   d4a54:	2700      	movs	r7, #0
   d4a56:	8227      	strh	r7, [r4, #16]
   d4a58:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d4a5c:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   d4a5e:	fb02 1206 	mla	r2, r2, r6, r1
   d4a62:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   d4a64:	8ae2      	ldrh	r2, [r4, #22]
   d4a66:	9201      	str	r2, [sp, #4]
   d4a68:	8aa2      	ldrh	r2, [r4, #20]
   d4a6a:	9200      	str	r2, [sp, #0]
   d4a6c:	e9cd 0602 	strd	r0, r6, [sp, #8]
   d4a70:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d4a74:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d4a78:	4620      	mov	r0, r4
   d4a7a:	f7ff fe17 	bl	d46ac <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d4a7e:	7929      	ldrb	r1, [r5, #4]
   d4a80:	7e23      	ldrb	r3, [r4, #24]
   d4a82:	8a22      	ldrh	r2, [r4, #16]
   d4a84:	fb01 2303 	mla	r3, r1, r3, r2
   d4a88:	e7b8      	b.n	d49fc <_ZN12Adafruit_GFX5writeEh+0x74>

000d4a8a <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   d4a8a:	2901      	cmp	r1, #1
   d4a8c:	bf38      	it	cc
   d4a8e:	2101      	movcc	r1, #1
   d4a90:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   d4a92:	7641      	strb	r1, [r0, #25]
}
   d4a94:	4770      	bx	lr
	...

000d4a98 <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   d4a98:	b510      	push	{r4, lr}
   d4a9a:	4b06      	ldr	r3, [pc, #24]	; (d4ab4 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   d4a9c:	6003      	str	r3, [r0, #0]
   d4a9e:	4604      	mov	r4, r0
	if (mutex) {
   d4aa0:	6d00      	ldr	r0, [r0, #80]	; 0x50
   d4aa2:	b108      	cbz	r0, d4aa8 <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   d4aa4:	f000 fdb2 	bl	d560c <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   d4aa8:	4620      	mov	r0, r4
   d4aaa:	f000 f8d1 	bl	d4c50 <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   d4aae:	4620      	mov	r0, r4
   d4ab0:	bd10      	pop	{r4, pc}
   d4ab2:	bf00      	nop
   d4ab4:	000d77a0 	.word	0x000d77a0

000d4ab8 <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   d4ab8:	b510      	push	{r4, lr}
   d4aba:	4604      	mov	r4, r0
}
   d4abc:	f7ff ffec 	bl	d4a98 <_ZN16OledWingAdafruitD1Ev>
   d4ac0:	4620      	mov	r0, r4
   d4ac2:	2170      	movs	r1, #112	; 0x70
   d4ac4:	f001 fe83 	bl	d67ce <_ZdlPvj>
   d4ac8:	4620      	mov	r0, r4
   d4aca:	bd10      	pop	{r4, pc}

000d4acc <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   d4acc:	b530      	push	{r4, r5, lr}
   d4ace:	b085      	sub	sp, #20
   d4ad0:	4604      	mov	r4, r0
   d4ad2:	460d      	mov	r5, r1
   d4ad4:	f001 fe4e 	bl	d6774 <_Z19__fetch_global_Wirev>
   d4ad8:	4a10      	ldr	r2, [pc, #64]	; (d4b1c <_ZN16OledWingAdafruitC1Ei+0x50>)
   d4ada:	4911      	ldr	r1, [pc, #68]	; (d4b20 <_ZN16OledWingAdafruitC1Ei+0x54>)
   d4adc:	e9cd 2101 	strd	r2, r1, [sp, #4]
   d4ae0:	f04f 32ff 	mov.w	r2, #4294967295
   d4ae4:	2180      	movs	r1, #128	; 0x80
   d4ae6:	4603      	mov	r3, r0
   d4ae8:	9200      	str	r2, [sp, #0]
   d4aea:	4620      	mov	r0, r4
   d4aec:	2220      	movs	r2, #32
   d4aee:	f000 f935 	bl	d4d5c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   d4af2:	4b0c      	ldr	r3, [pc, #48]	; (d4b24 <_ZN16OledWingAdafruitC1Ei+0x58>)
   d4af4:	6023      	str	r3, [r4, #0]
   d4af6:	2300      	movs	r3, #0
   d4af8:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   d4afc:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d4b00:	f000 f854 	bl	d4bac <_ZN8DebounceC1Ev>
   d4b04:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d4b08:	f000 f850 	bl	d4bac <_ZN8DebounceC1Ev>
   d4b0c:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d4b10:	f000 f84c 	bl	d4bac <_ZN8DebounceC1Ev>
}
   d4b14:	4620      	mov	r0, r4
   d4b16:	b005      	add	sp, #20
   d4b18:	bd30      	pop	{r4, r5, pc}
   d4b1a:	bf00      	nop
   d4b1c:	00061a80 	.word	0x00061a80
   d4b20:	000186a0 	.word	0x000186a0
   d4b24:	000d77a0 	.word	0x000d77a0

000d4b28 <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   d4b28:	b513      	push	{r0, r1, r4, lr}
   d4b2a:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   d4b2c:	3050      	adds	r0, #80	; 0x50
   d4b2e:	f000 fd65 	bl	d55fc <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   d4b32:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4b34:	07d9      	lsls	r1, r3, #31
   d4b36:	d505      	bpl.n	d4b44 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   d4b38:	2202      	movs	r2, #2
   d4b3a:	2104      	movs	r1, #4
   d4b3c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d4b40:	f000 f848 	bl	d4bd4 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   d4b44:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4b46:	079a      	lsls	r2, r3, #30
   d4b48:	d505      	bpl.n	d4b56 <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   d4b4a:	2200      	movs	r2, #0
   d4b4c:	2103      	movs	r1, #3
   d4b4e:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d4b52:	f000 f83f 	bl	d4bd4 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   d4b56:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4b58:	075b      	lsls	r3, r3, #29
   d4b5a:	d505      	bpl.n	d4b68 <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   d4b5c:	2202      	movs	r2, #2
   d4b5e:	4611      	mov	r1, r2
   d4b60:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d4b64:	f000 f836 	bl	d4bd4 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d4b68:	2301      	movs	r3, #1
   d4b6a:	9300      	str	r3, [sp, #0]
   d4b6c:	223c      	movs	r2, #60	; 0x3c
   d4b6e:	2102      	movs	r1, #2
   d4b70:	4620      	mov	r0, r4
   d4b72:	f000 f9f3 	bl	d4f5c <_ZN16Adafruit_SSD13065beginEhhbb>
}
   d4b76:	b002      	add	sp, #8
   d4b78:	bd10      	pop	{r4, pc}

000d4b7a <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   d4b7a:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   d4b7c:	6d43      	ldr	r3, [r0, #84]	; 0x54
   d4b7e:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   d4b80:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   d4b82:	d502      	bpl.n	d4b8a <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   d4b84:	3058      	adds	r0, #88	; 0x58
   d4b86:	f000 f832 	bl	d4bee <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   d4b8a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4b8c:	079a      	lsls	r2, r3, #30
   d4b8e:	d503      	bpl.n	d4b98 <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   d4b90:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d4b94:	f000 f82b 	bl	d4bee <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   d4b98:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4b9a:	075b      	lsls	r3, r3, #29
   d4b9c:	d505      	bpl.n	d4baa <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   d4b9e:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   d4ba2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   d4ba6:	f000 b822 	b.w	d4bee <_ZN8Debounce6updateEv>
}
   d4baa:	bd10      	pop	{r4, pc}

000d4bac <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   d4bac:	2100      	movs	r1, #0
   d4bae:	220a      	movs	r2, #10
   d4bb0:	e9c0 1200 	strd	r1, r2, [r0]
{}
   d4bb4:	4770      	bx	lr

000d4bb6 <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   d4bb6:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   d4bb8:	b510      	push	{r4, lr}
   d4bba:	4604      	mov	r4, r0
    this->pin = pin;
   d4bbc:	71c1      	strb	r1, [r0, #7]
    state = 0;
   d4bbe:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   d4bc0:	b288      	uxth	r0, r1
   d4bc2:	f001 fd95 	bl	d66f0 <digitalRead>
   d4bc6:	b108      	cbz	r0, d4bcc <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   d4bc8:	2303      	movs	r3, #3
   d4bca:	71a3      	strb	r3, [r4, #6]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4bcc:	f000 fd0e 	bl	d55ec <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   d4bd0:	6020      	str	r0, [r4, #0]
#endif
}
   d4bd2:	bd10      	pop	{r4, pc}

000d4bd4 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   d4bd4:	b538      	push	{r3, r4, r5, lr}
   d4bd6:	460c      	mov	r4, r1
   d4bd8:	4605      	mov	r5, r0
  pinMode(pin, mode);
   d4bda:	4611      	mov	r1, r2
   d4bdc:	b2a0      	uxth	r0, r4
   d4bde:	f001 fd5d 	bl	d669c <pinMode>
  
  this->attach(pin);
   d4be2:	4621      	mov	r1, r4
   d4be4:	4628      	mov	r0, r5
}
   d4be6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   d4bea:	f7ff bfe4 	b.w	d4bb6 <_ZN8Debounce6attachEi>

000d4bee <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   d4bee:	b538      	push	{r3, r4, r5, lr}
   d4bf0:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   d4bf2:	79c0      	ldrb	r0, [r0, #7]
   d4bf4:	f001 fd7c 	bl	d66f0 <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   d4bf8:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   d4bfa:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   d4bfc:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   d4c00:	bf18      	it	ne
   d4c02:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   d4c04:	f3c5 0540 	ubfx	r5, r5, #1, #1
   d4c08:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   d4c0a:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   d4c0c:	d00a      	beq.n	d4c24 <_ZN8Debounce6updateEv+0x36>
   d4c0e:	f000 fced 	bl	d55ec <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   d4c12:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   d4c14:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   d4c16:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   d4c1a:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   d4c1c:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   d4c1e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   d4c22:	bd38      	pop	{r3, r4, r5, pc}
   d4c24:	f000 fce2 	bl	d55ec <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   d4c28:	6823      	ldr	r3, [r4, #0]
   d4c2a:	1ac0      	subs	r0, r0, r3
   d4c2c:	88a3      	ldrh	r3, [r4, #4]
   d4c2e:	4298      	cmp	r0, r3
   d4c30:	d3f4      	bcc.n	d4c1c <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   d4c32:	79a3      	ldrb	r3, [r4, #6]
   d4c34:	f003 0301 	and.w	r3, r3, #1
   d4c38:	42ab      	cmp	r3, r5
   d4c3a:	d0ef      	beq.n	d4c1c <_ZN8Debounce6updateEv+0x2e>
   d4c3c:	f000 fcd6 	bl	d55ec <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   d4c40:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   d4c42:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   d4c44:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   d4c48:	f043 0308 	orr.w	r3, r3, #8
   d4c4c:	e7e5      	b.n	d4c1a <_ZN8Debounce6updateEv+0x2c>
	...

000d4c50 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   d4c50:	b510      	push	{r4, lr}
   d4c52:	4b04      	ldr	r3, [pc, #16]	; (d4c64 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   d4c54:	6003      	str	r3, [r0, #0]
   d4c56:	4604      	mov	r4, r0
  if(buffer) {
   d4c58:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4c5a:	b108      	cbz	r0, d4c60 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   d4c5c:	f000 feaa 	bl	d59b4 <free>
    buffer = NULL;
  }
}
   d4c60:	4620      	mov	r0, r4
   d4c62:	bd10      	pop	{r4, pc}
   d4c64:	000d7cac 	.word	0x000d7cac

000d4c68 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   d4c68:	b510      	push	{r4, lr}
   d4c6a:	4604      	mov	r4, r0
}
   d4c6c:	f7ff fff0 	bl	d4c50 <_ZN16Adafruit_SSD1306D1Ev>
   d4c70:	4620      	mov	r0, r4
   d4c72:	2150      	movs	r1, #80	; 0x50
   d4c74:	f001 fdab 	bl	d67ce <_ZdlPvj>
   d4c78:	4620      	mov	r0, r4
   d4c7a:	bd10      	pop	{r4, pc}

000d4c7c <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d4c7c:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4c7e:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d4c80:	db4b      	blt.n	d4d1a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d4c82:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   d4c86:	428c      	cmp	r4, r1
   d4c88:	dd47      	ble.n	d4d1a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d4c8a:	2a00      	cmp	r2, #0
   d4c8c:	db45      	blt.n	d4d1a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d4c8e:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   d4c92:	4294      	cmp	r4, r2
   d4c94:	dd41      	ble.n	d4d1a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   d4c96:	7e84      	ldrb	r4, [r0, #26]
   d4c98:	2c02      	cmp	r4, #2
   d4c9a:	d01f      	beq.n	d4cdc <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   d4c9c:	2c03      	cmp	r4, #3
   d4c9e:	d026      	beq.n	d4cee <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   d4ca0:	2c01      	cmp	r4, #1
   d4ca2:	d104      	bne.n	d4cae <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   d4ca4:	8904      	ldrh	r4, [r0, #8]
   d4ca6:	43d2      	mvns	r2, r2
   d4ca8:	4414      	add	r4, r2
      break;
   d4caa:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   d4cac:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   d4cae:	2b01      	cmp	r3, #1
   d4cb0:	d023      	beq.n	d4cfa <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   d4cb2:	2b02      	cmp	r3, #2
   d4cb4:	d032      	beq.n	d4d1c <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   d4cb6:	bb83      	cbnz	r3, d4d1a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   d4cb8:	2a00      	cmp	r2, #0
   d4cba:	4613      	mov	r3, r2
   d4cbc:	8904      	ldrh	r4, [r0, #8]
   d4cbe:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4cc0:	bfb8      	it	lt
   d4cc2:	1dd3      	addlt	r3, r2, #7
   d4cc4:	10db      	asrs	r3, r3, #3
   d4cc6:	fb13 1104 	smlabb	r1, r3, r4, r1
   d4cca:	f002 0207 	and.w	r2, r2, #7
   d4cce:	2301      	movs	r3, #1
   d4cd0:	4093      	lsls	r3, r2
   d4cd2:	5c42      	ldrb	r2, [r0, r1]
   d4cd4:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   d4cd8:	5442      	strb	r2, [r0, r1]
    }
  }
}
   d4cda:	e01e      	b.n	d4d1a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   d4cdc:	8904      	ldrh	r4, [r0, #8]
   d4cde:	43c9      	mvns	r1, r1
   d4ce0:	4421      	add	r1, r4
      y = HEIGHT - y - 1;
   d4ce2:	8944      	ldrh	r4, [r0, #10]
   d4ce4:	43d2      	mvns	r2, r2
   d4ce6:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   d4ce8:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   d4cea:	b212      	sxth	r2, r2
      break;
   d4cec:	e7df      	b.n	d4cae <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   d4cee:	8944      	ldrh	r4, [r0, #10]
   d4cf0:	43c9      	mvns	r1, r1
   d4cf2:	440c      	add	r4, r1
      break;
   d4cf4:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   d4cf6:	b222      	sxth	r2, r4
      break;
   d4cf8:	e7d9      	b.n	d4cae <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   d4cfa:	2a00      	cmp	r2, #0
   d4cfc:	8904      	ldrh	r4, [r0, #8]
   d4cfe:	4613      	mov	r3, r2
   d4d00:	bfb8      	it	lt
   d4d02:	1dd3      	addlt	r3, r2, #7
   d4d04:	10db      	asrs	r3, r3, #3
   d4d06:	fb13 1104 	smlabb	r1, r3, r4, r1
   d4d0a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d4d0c:	f002 0007 	and.w	r0, r2, #7
   d4d10:	2201      	movs	r2, #1
   d4d12:	4082      	lsls	r2, r0
   d4d14:	5c58      	ldrb	r0, [r3, r1]
   d4d16:	4302      	orrs	r2, r0
   d4d18:	545a      	strb	r2, [r3, r1]
}
   d4d1a:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   d4d1c:	2a00      	cmp	r2, #0
   d4d1e:	4613      	mov	r3, r2
   d4d20:	8904      	ldrh	r4, [r0, #8]
   d4d22:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4d24:	bfb8      	it	lt
   d4d26:	1dd3      	addlt	r3, r2, #7
   d4d28:	10db      	asrs	r3, r3, #3
   d4d2a:	fb13 1104 	smlabb	r1, r3, r4, r1
   d4d2e:	f002 0207 	and.w	r2, r2, #7
   d4d32:	2301      	movs	r3, #1
   d4d34:	fa03 f202 	lsl.w	r2, r3, r2
   d4d38:	5c43      	ldrb	r3, [r0, r1]
   d4d3a:	405a      	eors	r2, r3
   d4d3c:	e7cc      	b.n	d4cd8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>

000d4d3e <_ZN16Adafruit_SSD130610stopscrollEv.part.0>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d4d3e:	b510      	push	{r4, lr}
   d4d40:	4604      	mov	r4, r0
  TRANSACTION_START
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
  TRANSACTION_END
   d4d42:	f990 0036 	ldrsb.w	r0, [r0, #54]	; 0x36
   d4d46:	2101      	movs	r1, #1
   d4d48:	b280      	uxth	r0, r0
   d4d4a:	f001 fcb8 	bl	d66be <digitalWrite>
   d4d4e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4d50:	b118      	cbz	r0, d4d5a <_ZN16Adafruit_SSD130610stopscrollEv.part.0+0x1c>
}
   d4d52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TRANSACTION_END
   d4d56:	f000 bea4 	b.w	d5aa2 <_ZN8SPIClass14endTransactionEv>
}
   d4d5a:	bd10      	pop	{r4, pc}

000d4d5c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   d4d5c:	b570      	push	{r4, r5, r6, lr}
   d4d5e:	4604      	mov	r4, r0
   d4d60:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   d4d62:	2600      	movs	r6, #0
   d4d64:	f7ff fc38 	bl	d45d8 <_ZN12Adafruit_GFXC1Ess>
   d4d68:	4b11      	ldr	r3, [pc, #68]	; (d4db0 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   d4d6a:	6023      	str	r3, [r4, #0]
   d4d6c:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   d4d6e:	b915      	cbnz	r5, d4d76 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   d4d70:	f001 fd00 	bl	d6774 <_Z19__fetch_global_Wirev>
   d4d74:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   d4d76:	23ff      	movs	r3, #255	; 0xff
   d4d78:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   d4d7c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   d4d80:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   d4d84:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   d4d88:	4b0a      	ldr	r3, [pc, #40]	; (d4db4 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   d4d8a:	63a3      	str	r3, [r4, #56]	; 0x38
   d4d8c:	2301      	movs	r3, #1
   d4d8e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   d4d92:	9b05      	ldr	r3, [sp, #20]
   d4d94:	64a3      	str	r3, [r4, #72]	; 0x48
   d4d96:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4d9a:	9b06      	ldr	r3, [sp, #24]
   d4d9c:	86a2      	strh	r2, [r4, #52]	; 0x34
   d4d9e:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   d4da2:	6426      	str	r6, [r4, #64]	; 0x40
   d4da4:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   d4da8:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   d4daa:	4620      	mov	r0, r4
   d4dac:	bd70      	pop	{r4, r5, r6, pc}
   d4dae:	bf00      	nop
   d4db0:	000d7cac 	.word	0x000d7cac
   d4db4:	000d77f8 	.word	0x000d77f8

000d4db8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   d4db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4dba:	4604      	mov	r4, r0
  if(wire) { // I2C
   d4dbc:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   d4dbe:	460d      	mov	r5, r1
  if(wire) { // I2C
   d4dc0:	b190      	cbz	r0, d4de8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   d4dc2:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d4dc6:	f001 fb33 	bl	d6430 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d4dca:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4dcc:	6803      	ldr	r3, [r0, #0]
   d4dce:	2100      	movs	r1, #0
   d4dd0:	689b      	ldr	r3, [r3, #8]
   d4dd2:	4798      	blx	r3
    WIRE_WRITE(c);
   d4dd4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4dd6:	6803      	ldr	r3, [r0, #0]
   d4dd8:	4629      	mov	r1, r5
   d4dda:	689b      	ldr	r3, [r3, #8]
   d4ddc:	4798      	blx	r3
    wire->endTransmission();
   d4dde:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   d4de0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   d4de4:	f001 bb2b 	b.w	d643e <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   d4de8:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   d4dec:	4601      	mov	r1, r0
   d4dee:	b298      	uxth	r0, r3
   d4df0:	f001 fc65 	bl	d66be <digitalWrite>
  if(spi) {
   d4df4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4df6:	b120      	cbz	r0, d4e02 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   d4df8:	4629      	mov	r1, r5
}
   d4dfa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   d4dfe:	f000 bed7 	b.w	d5bb0 <_ZN8SPIClass8transferEh>
   d4e02:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d4e04:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d4e06:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d4e0a:	ea05 0107 	and.w	r1, r5, r7
   d4e0e:	b280      	uxth	r0, r0
   d4e10:	f001 fc55 	bl	d66be <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d4e14:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d4e18:	2101      	movs	r1, #1
   d4e1a:	b280      	uxth	r0, r0
   d4e1c:	f001 fc4f 	bl	d66be <digitalWrite>
      digitalWrite(clkPin , LOW);
   d4e20:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d4e24:	2100      	movs	r1, #0
   d4e26:	b280      	uxth	r0, r0
   d4e28:	f001 fc49 	bl	d66be <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d4e2c:	3e01      	subs	r6, #1
   d4e2e:	ea4f 0757 	mov.w	r7, r7, lsr #1
   d4e32:	d1e8      	bne.n	d4e06 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   d4e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4e36 <_ZN16Adafruit_SSD130613invertDisplayEb>:
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d4e36:	b538      	push	{r3, r4, r5, lr}
   d4e38:	4604      	mov	r4, r0
  TRANSACTION_START
   d4e3a:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d4e3c:	460d      	mov	r5, r1
  TRANSACTION_START
   d4e3e:	b180      	cbz	r0, d4e62 <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   d4e40:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d4e42:	f001 fae7 	bl	d6414 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   d4e46:	2d00      	cmp	r5, #0
   d4e48:	4620      	mov	r0, r4
   d4e4a:	bf14      	ite	ne
   d4e4c:	21a7      	movne	r1, #167	; 0xa7
   d4e4e:	21a6      	moveq	r1, #166	; 0xa6
   d4e50:	f7ff ffb2 	bl	d4db8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   d4e54:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4e56:	b188      	cbz	r0, d4e7c <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   d4e58:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   d4e5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4e5e:	f001 bad9 	b.w	d6414 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   d4e62:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d4e64:	b118      	cbz	r0, d4e6e <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   d4e66:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d4e6a:	f000 fe33 	bl	d5ad4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d4e6e:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d4e72:	2100      	movs	r1, #0
   d4e74:	b280      	uxth	r0, r0
   d4e76:	f001 fc22 	bl	d66be <digitalWrite>
   d4e7a:	e7e4      	b.n	d4e46 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
   d4e7c:	4620      	mov	r0, r4
}
   d4e7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4e82:	f7ff bf5c 	b.w	d4d3e <_ZN16Adafruit_SSD130610stopscrollEv.part.0>

000d4e86 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   d4e86:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4e8a:	4604      	mov	r4, r0
  if(wire) { // I2C
   d4e8c:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   d4e8e:	460d      	mov	r5, r1
  if(wire) { // I2C
   d4e90:	188f      	adds	r7, r1, r2
   d4e92:	b340      	cbz	r0, d4ee6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   d4e94:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d4e98:	f001 faca 	bl	d6430 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d4e9c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4e9e:	6803      	ldr	r3, [r0, #0]
   d4ea0:	2100      	movs	r1, #0
   d4ea2:	689b      	ldr	r3, [r3, #8]
   d4ea4:	4798      	blx	r3
    uint8_t bytesOut = 1;
   d4ea6:	2601      	movs	r6, #1
    while(n--) {
   d4ea8:	42bd      	cmp	r5, r7
   d4eaa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4eac:	d017      	beq.n	d4ede <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   d4eae:	2e1f      	cmp	r6, #31
   d4eb0:	d90c      	bls.n	d4ecc <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   d4eb2:	f001 fac4 	bl	d643e <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   d4eb6:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d4eba:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4ebc:	f001 fab8 	bl	d6430 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d4ec0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4ec2:	6803      	ldr	r3, [r0, #0]
   d4ec4:	2100      	movs	r1, #0
   d4ec6:	689b      	ldr	r3, [r3, #8]
   d4ec8:	4798      	blx	r3
        bytesOut = 1;
   d4eca:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   d4ecc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4ece:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4ed2:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   d4ed4:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   d4ed6:	689b      	ldr	r3, [r3, #8]
   d4ed8:	4798      	blx	r3
      bytesOut++;
   d4eda:	b2f6      	uxtb	r6, r6
    while(n--) {
   d4edc:	e7e4      	b.n	d4ea8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   d4ede:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   d4ee2:	f001 baac 	b.w	d643e <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   d4ee6:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   d4eea:	4601      	mov	r1, r0
   d4eec:	b298      	uxth	r0, r3
   d4eee:	f001 fbe6 	bl	d66be <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   d4ef2:	42af      	cmp	r7, r5
   d4ef4:	d022      	beq.n	d4f3c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   d4ef6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   d4ef8:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   d4efc:	b118      	cbz	r0, d4f06 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   d4efe:	4649      	mov	r1, r9
   d4f00:	f000 fe56 	bl	d5bb0 <_ZN8SPIClass8transferEh>
   d4f04:	e7f5      	b.n	d4ef2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   d4f06:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d4f08:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d4f0c:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d4f10:	ea09 0108 	and.w	r1, r9, r8
   d4f14:	b280      	uxth	r0, r0
   d4f16:	f001 fbd2 	bl	d66be <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d4f1a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d4f1e:	2101      	movs	r1, #1
   d4f20:	b280      	uxth	r0, r0
   d4f22:	f001 fbcc 	bl	d66be <digitalWrite>
      digitalWrite(clkPin , LOW);
   d4f26:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d4f2a:	2100      	movs	r1, #0
   d4f2c:	b280      	uxth	r0, r0
   d4f2e:	f001 fbc6 	bl	d66be <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d4f32:	3e01      	subs	r6, #1
   d4f34:	ea4f 0858 	mov.w	r8, r8, lsr #1
   d4f38:	d1e8      	bne.n	d4f0c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   d4f3a:	e7da      	b.n	d4ef2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   d4f3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4f40 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   d4f40:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d4f44:	1dda      	adds	r2, r3, #7
   d4f46:	bf48      	it	mi
   d4f48:	f103 020e 	addmi.w	r2, r3, #14
   d4f4c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d4f50:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4f52:	10d2      	asrs	r2, r2, #3
   d4f54:	435a      	muls	r2, r3
   d4f56:	2100      	movs	r1, #0
   d4f58:	f002 b90e 	b.w	d7178 <memset>

000d4f5c <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   d4f5c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d4f60:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d4f62:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   d4f64:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d4f68:	4604      	mov	r4, r0
   d4f6a:	460f      	mov	r7, r1
   d4f6c:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d4f6e:	b1b3      	cbz	r3, d4f9e <_ZN16Adafruit_SSD13065beginEhhbb+0x42>
  clearDisplay();
   d4f70:	4620      	mov	r0, r4
   d4f72:	f7ff ffe5 	bl	d4f40 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   d4f76:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   d4f7a:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   d4f7e:	2820      	cmp	r0, #32
   d4f80:	dc1f      	bgt.n	d4fc2 <_ZN16Adafruit_SSD13065beginEhhbb+0x66>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   d4f82:	2320      	movs	r3, #32
   d4f84:	2201      	movs	r2, #1
   d4f86:	e9cd 3201 	strd	r3, r2, [sp, #4]
   d4f8a:	3820      	subs	r0, #32
   d4f8c:	2373      	movs	r3, #115	; 0x73
   d4f8e:	3973      	subs	r1, #115	; 0x73
   d4f90:	9300      	str	r3, [sp, #0]
   d4f92:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   d4f96:	4b89      	ldr	r3, [pc, #548]	; (d51bc <_ZN16Adafruit_SSD13065beginEhhbb+0x260>)
   d4f98:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   d4f9c:	e01f      	b.n	d4fde <_ZN16Adafruit_SSD13065beginEhhbb+0x82>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d4f9e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d4fa2:	1dd8      	adds	r0, r3, #7
   d4fa4:	bf48      	it	mi
   d4fa6:	f103 000e 	addmi.w	r0, r3, #14
   d4faa:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   d4fae:	10c0      	asrs	r0, r0, #3
   d4fb0:	4358      	muls	r0, r3
   d4fb2:	f000 fcf7 	bl	d59a4 <malloc>
   d4fb6:	62e0      	str	r0, [r4, #44]	; 0x2c
   d4fb8:	2800      	cmp	r0, #0
   d4fba:	d1d9      	bne.n	d4f70 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   d4fbc:	b004      	add	sp, #16
   d4fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   d4fc2:	2340      	movs	r3, #64	; 0x40
   d4fc4:	f04f 0c01 	mov.w	ip, #1
   d4fc8:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   d4fcc:	2352      	movs	r3, #82	; 0x52
   d4fce:	3840      	subs	r0, #64	; 0x40
   d4fd0:	3952      	subs	r1, #82	; 0x52
   d4fd2:	9300      	str	r3, [sp, #0]
   d4fd4:	4b7a      	ldr	r3, [pc, #488]	; (d51c0 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   d4fd6:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   d4fda:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   d4fde:	f340 024f 	sbfx	r2, r0, #1, #16
   d4fe2:	f341 014f 	sbfx	r1, r1, #1, #16
   d4fe6:	4620      	mov	r0, r4
   d4fe8:	f7ff fb0c 	bl	d4604 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   d4fec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   d4fee:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   d4ff2:	2800      	cmp	r0, #0
   d4ff4:	d078      	beq.n	d50e8 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   d4ff6:	2d00      	cmp	r5, #0
   d4ff8:	d174      	bne.n	d50e4 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   d4ffa:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d4ffe:	2b20      	cmp	r3, #32
   d5000:	bf0c      	ite	eq
   d5002:	253c      	moveq	r5, #60	; 0x3c
   d5004:	253d      	movne	r5, #61	; 0x3d
   d5006:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   d500a:	f1b8 0f00 	cmp.w	r8, #0
   d500e:	d001      	beq.n	d5014 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
   d5010:	f001 fa04 	bl	d641c <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   d5014:	b1fe      	cbz	r6, d5056 <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
   d5016:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d501a:	2800      	cmp	r0, #0
   d501c:	db1b      	blt.n	d5056 <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
    pinMode(     rstPin, OUTPUT);
   d501e:	2101      	movs	r1, #1
   d5020:	b280      	uxth	r0, r0
   d5022:	f001 fb3b 	bl	d669c <pinMode>
    digitalWrite(rstPin, HIGH);
   d5026:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d502a:	2101      	movs	r1, #1
   d502c:	b280      	uxth	r0, r0
   d502e:	f001 fb46 	bl	d66be <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   d5032:	2001      	movs	r0, #1
   d5034:	f000 ff8a 	bl	d5f4c <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   d5038:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d503c:	2100      	movs	r1, #0
   d503e:	b280      	uxth	r0, r0
   d5040:	f001 fb3d 	bl	d66be <digitalWrite>
    delay(10);                  // Wait 10 ms
   d5044:	200a      	movs	r0, #10
   d5046:	f000 ff81 	bl	d5f4c <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   d504a:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d504e:	2101      	movs	r1, #1
   d5050:	b280      	uxth	r0, r0
   d5052:	f001 fb34 	bl	d66be <digitalWrite>
  TRANSACTION_START
   d5056:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5058:	2800      	cmp	r0, #0
   d505a:	d074      	beq.n	d5146 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ea>
   d505c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d505e:	f001 f9d9 	bl	d6414 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   d5062:	2204      	movs	r2, #4
   d5064:	4957      	ldr	r1, [pc, #348]	; (d51c4 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   d5066:	4620      	mov	r0, r4
   d5068:	f7ff ff0d 	bl	d4e86 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   d506c:	7aa1      	ldrb	r1, [r4, #10]
   d506e:	3901      	subs	r1, #1
   d5070:	b2c9      	uxtb	r1, r1
   d5072:	4620      	mov	r0, r4
   d5074:	f7ff fea0 	bl	d4db8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   d5078:	4953      	ldr	r1, [pc, #332]	; (d51c8 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   d507a:	2204      	movs	r2, #4
   d507c:	4620      	mov	r0, r4
   d507e:	f7ff ff02 	bl	d4e86 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   d5082:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d5086:	2b01      	cmp	r3, #1
   d5088:	bf0c      	ite	eq
   d508a:	2110      	moveq	r1, #16
   d508c:	2114      	movne	r1, #20
   d508e:	4620      	mov	r0, r4
   d5090:	f7ff fe92 	bl	d4db8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   d5094:	2204      	movs	r2, #4
   d5096:	494d      	ldr	r1, [pc, #308]	; (d51cc <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   d5098:	4620      	mov	r0, r4
   d509a:	f7ff fef4 	bl	d4e86 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   d509e:	68a3      	ldr	r3, [r4, #8]
   d50a0:	4a4b      	ldr	r2, [pc, #300]	; (d51d0 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   d50a2:	4293      	cmp	r3, r2
   d50a4:	d15c      	bne.n	d5160 <_ZN16Adafruit_SSD13065beginEhhbb+0x204>
    ssd1306_commandList(init4a, sizeof(init4a));
   d50a6:	494b      	ldr	r1, [pc, #300]	; (d51d4 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   d50a8:	2204      	movs	r2, #4
   d50aa:	4620      	mov	r0, r4
   d50ac:	f7ff feeb 	bl	d4e86 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   d50b0:	21d9      	movs	r1, #217	; 0xd9
   d50b2:	4620      	mov	r0, r4
   d50b4:	f7ff fe80 	bl	d4db8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   d50b8:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d50bc:	2b01      	cmp	r3, #1
   d50be:	bf0c      	ite	eq
   d50c0:	2122      	moveq	r1, #34	; 0x22
   d50c2:	21f1      	movne	r1, #241	; 0xf1
   d50c4:	4620      	mov	r0, r4
   d50c6:	f7ff fe77 	bl	d4db8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   d50ca:	4620      	mov	r0, r4
   d50cc:	4942      	ldr	r1, [pc, #264]	; (d51d8 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   d50ce:	2206      	movs	r2, #6
   d50d0:	f7ff fed9 	bl	d4e86 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   d50d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d50d6:	2800      	cmp	r0, #0
   d50d8:	d063      	beq.n	d51a2 <_ZN16Adafruit_SSD13065beginEhhbb+0x246>
   d50da:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   d50dc:	f001 f99a 	bl	d6414 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   d50e0:	2001      	movs	r0, #1
   d50e2:	e76b      	b.n	d4fbc <_ZN16Adafruit_SSD13065beginEhhbb+0x60>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   d50e4:	b26d      	sxtb	r5, r5
   d50e6:	e78e      	b.n	d5006 <_ZN16Adafruit_SSD13065beginEhhbb+0xaa>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   d50e8:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   d50ec:	2101      	movs	r1, #1
   d50ee:	b280      	uxth	r0, r0
   d50f0:	f001 fad4 	bl	d669c <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   d50f4:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d50f8:	2101      	movs	r1, #1
   d50fa:	b280      	uxth	r0, r0
   d50fc:	f001 face 	bl	d669c <pinMode>
    SSD1306_DESELECT
   d5100:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5104:	2101      	movs	r1, #1
   d5106:	b280      	uxth	r0, r0
   d5108:	f001 fad9 	bl	d66be <digitalWrite>
    if(spi) { // Hardware SPI
   d510c:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d510e:	b13d      	cbz	r5, d5120 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c4>
      if(periphBegin) spi->begin();
   d5110:	f1b8 0f00 	cmp.w	r8, #0
   d5114:	f43f af7e 	beq.w	d5014 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
   d5118:	4628      	mov	r0, r5
   d511a:	f000 fcb1 	bl	d5a80 <_ZN8SPIClass5beginEv>
   d511e:	e779      	b.n	d5014 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   d5120:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d5124:	2101      	movs	r1, #1
   d5126:	b280      	uxth	r0, r0
   d5128:	f001 fab8 	bl	d669c <pinMode>
      pinMode(clkPin , OUTPUT);
   d512c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5130:	2101      	movs	r1, #1
   d5132:	b280      	uxth	r0, r0
   d5134:	f001 fab2 	bl	d669c <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   d5138:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d513c:	4629      	mov	r1, r5
   d513e:	b280      	uxth	r0, r0
   d5140:	f001 fabd 	bl	d66be <digitalWrite>
   d5144:	e766      	b.n	d5014 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
  TRANSACTION_START
   d5146:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5148:	b118      	cbz	r0, d5152 <_ZN16Adafruit_SSD13065beginEhhbb+0x1f6>
   d514a:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d514e:	f000 fcc1 	bl	d5ad4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d5152:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5156:	2100      	movs	r1, #0
   d5158:	b280      	uxth	r0, r0
   d515a:	f001 fab0 	bl	d66be <digitalWrite>
   d515e:	e780      	b.n	d5062 <_ZN16Adafruit_SSD13065beginEhhbb+0x106>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   d5160:	4a1e      	ldr	r2, [pc, #120]	; (d51dc <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   d5162:	4293      	cmp	r3, r2
   d5164:	d10e      	bne.n	d5184 <_ZN16Adafruit_SSD13065beginEhhbb+0x228>
    ssd1306_commandList(init4b, sizeof(init4b));
   d5166:	491e      	ldr	r1, [pc, #120]	; (d51e0 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   d5168:	2203      	movs	r2, #3
   d516a:	4620      	mov	r0, r4
   d516c:	f7ff fe8b 	bl	d4e86 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   d5170:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d5174:	2b01      	cmp	r3, #1
   d5176:	bf0c      	ite	eq
   d5178:	219f      	moveq	r1, #159	; 0x9f
   d517a:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   d517c:	4620      	mov	r0, r4
   d517e:	f7ff fe1b 	bl	d4db8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   d5182:	e795      	b.n	d50b0 <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   d5184:	4a17      	ldr	r2, [pc, #92]	; (d51e4 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   d5186:	4293      	cmp	r3, r2
   d5188:	d192      	bne.n	d50b0 <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
    ssd1306_commandList(init4c, sizeof(init4c));
   d518a:	4917      	ldr	r1, [pc, #92]	; (d51e8 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   d518c:	2203      	movs	r2, #3
   d518e:	4620      	mov	r0, r4
   d5190:	f7ff fe79 	bl	d4e86 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   d5194:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d5198:	2b01      	cmp	r3, #1
   d519a:	bf0c      	ite	eq
   d519c:	2110      	moveq	r1, #16
   d519e:	21af      	movne	r1, #175	; 0xaf
   d51a0:	e7ec      	b.n	d517c <_ZN16Adafruit_SSD13065beginEhhbb+0x220>
  TRANSACTION_END
   d51a2:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d51a6:	2101      	movs	r1, #1
   d51a8:	b280      	uxth	r0, r0
   d51aa:	f001 fa88 	bl	d66be <digitalWrite>
   d51ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d51b0:	2800      	cmp	r0, #0
   d51b2:	d095      	beq.n	d50e0 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
   d51b4:	f000 fc75 	bl	d5aa2 <_ZN8SPIClass14endTransactionEv>
   d51b8:	e792      	b.n	d50e0 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
   d51ba:	bf00      	nop
   d51bc:	000d7ac4 	.word	0x000d7ac4
   d51c0:	000d7804 	.word	0x000d7804
   d51c4:	000d7d0c 	.word	0x000d7d0c
   d51c8:	000d7d10 	.word	0x000d7d10
   d51cc:	000d7d14 	.word	0x000d7d14
   d51d0:	00200080 	.word	0x00200080
   d51d4:	000d7d1e 	.word	0x000d7d1e
   d51d8:	000d7d18 	.word	0x000d7d18
   d51dc:	00400080 	.word	0x00400080
   d51e0:	000d7d22 	.word	0x000d7d22
   d51e4:	00100060 	.word	0x00100060
   d51e8:	000d7d25 	.word	0x000d7d25

000d51ec <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d51ec:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   d51ee:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d51f0:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   d51f4:	db3d      	blt.n	d5272 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d51f6:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d51fa:	4294      	cmp	r4, r2
   d51fc:	dd39      	ble.n	d5272 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   d51fe:	2900      	cmp	r1, #0
      w += x;
   d5200:	bfbe      	ittt	lt
   d5202:	185b      	addlt	r3, r3, r1
   d5204:	b21b      	sxthlt	r3, r3
      x  = 0;
   d5206:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   d5208:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d520c:	18ce      	adds	r6, r1, r3
   d520e:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   d5210:	bfc4      	itt	gt
   d5212:	1a63      	subgt	r3, r4, r1
   d5214:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   d5216:	2b00      	cmp	r3, #0
   d5218:	dd2b      	ble.n	d5272 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   d521a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d521c:	10d6      	asrs	r6, r2, #3
   d521e:	fb14 1106 	smlabb	r1, r4, r6, r1
   d5222:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   d5224:	f002 0007 	and.w	r0, r2, #7
   d5228:	2201      	movs	r2, #1
   d522a:	4082      	lsls	r2, r0
      switch(color) {
   d522c:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   d522e:	b2d2      	uxtb	r2, r2
      switch(color) {
   d5230:	d016      	beq.n	d5260 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   d5232:	2d02      	cmp	r5, #2
   d5234:	d00b      	beq.n	d524e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   d5236:	b9e5      	cbnz	r5, d5272 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   d5238:	43d2      	mvns	r2, r2
   d523a:	b2d2      	uxtb	r2, r2
   d523c:	440b      	add	r3, r1
   d523e:	4299      	cmp	r1, r3
   d5240:	d017      	beq.n	d5272 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d5242:	f811 0b01 	ldrb.w	r0, [r1], #1
   d5246:	4010      	ands	r0, r2
   d5248:	f801 0c01 	strb.w	r0, [r1, #-1]
   d524c:	e7f7      	b.n	d523e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   d524e:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   d5250:	4299      	cmp	r1, r3
   d5252:	d00e      	beq.n	d5272 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d5254:	f811 0b01 	ldrb.w	r0, [r1], #1
   d5258:	4050      	eors	r0, r2
   d525a:	f801 0c01 	strb.w	r0, [r1, #-1]
   d525e:	e7f7      	b.n	d5250 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   d5260:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   d5262:	4299      	cmp	r1, r3
   d5264:	d005      	beq.n	d5272 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d5266:	f811 0b01 	ldrb.w	r0, [r1], #1
   d526a:	4310      	orrs	r0, r2
   d526c:	f801 0c01 	strb.w	r0, [r1, #-1]
   d5270:	e7f7      	b.n	d5262 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   d5272:	bd70      	pop	{r4, r5, r6, pc}

000d5274 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   d5274:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   d5276:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   d5278:	f8bd 6014 	ldrh.w	r6, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   d527c:	db76      	blt.n	d536c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   d527e:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   d5282:	42a9      	cmp	r1, r5
   d5284:	da72      	bge.n	d536c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   d5286:	2a00      	cmp	r2, #0
      __h += __y;
   d5288:	bfbc      	itt	lt
   d528a:	18d2      	addlt	r2, r2, r3
   d528c:	b213      	sxthlt	r3, r2
    if((__y + __h) > HEIGHT) { // Clip bottom
   d528e:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
      __y = 0;
   d5292:	bfb8      	it	lt
   d5294:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   d5296:	18d7      	adds	r7, r2, r3
   d5298:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   d529a:	bfc4      	itt	gt
   d529c:	1aa3      	subgt	r3, r4, r2
   d529e:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   d52a0:	2b00      	cmp	r3, #0
   d52a2:	dd63      	ble.n	d536c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   d52a4:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   d52a8:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   d52aa:	fb15 1104 	smlabb	r1, r5, r4, r1
      if(mod) {
   d52ae:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   d52b2:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   d52b4:	eb07 0401 	add.w	r4, r7, r1
      if(mod) {
   d52b8:	d023      	beq.n	d5302 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8e>
        mod = 8 - mod;
   d52ba:	f1c2 0208 	rsb	r2, r2, #8
   d52be:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   d52c0:	4d2c      	ldr	r5, [pc, #176]	; (d5374 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   d52c2:	4293      	cmp	r3, r2
   d52c4:	bf3c      	itt	cc
   d52c6:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   d52ca:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   d52ce:	5cad      	ldrb	r5, [r5, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   d52d0:	bf3c      	itt	cc
   d52d2:	fa4c fc0e 	asrcc.w	ip, ip, lr
   d52d6:	ea0c 0505 	andcc.w	r5, ip, r5
        switch(color) {
   d52da:	2e01      	cmp	r6, #1
   d52dc:	d007      	beq.n	d52ee <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x7a>
   d52de:	2e02      	cmp	r6, #2
   d52e0:	d02e      	beq.n	d5340 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xcc>
   d52e2:	b94e      	cbnz	r6, d52f8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x84>
         case BLACK:   *pBuf &= ~mask; break;
   d52e4:	f817 c001 	ldrb.w	ip, [r7, r1]
   d52e8:	ea2c 0505 	bic.w	r5, ip, r5
   d52ec:	e003      	b.n	d52f6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case WHITE:   *pBuf |=  mask; break;
   d52ee:	f817 c001 	ldrb.w	ip, [r7, r1]
   d52f2:	ea45 050c 	orr.w	r5, r5, ip
         case INVERSE: *pBuf ^=  mask; break;
   d52f6:	547d      	strb	r5, [r7, r1]
      if(h >= mod) { // More to go?
   d52f8:	4293      	cmp	r3, r2
   d52fa:	d337      	bcc.n	d536c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   d52fc:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   d5300:	440c      	add	r4, r1
        h -= mod;
   d5302:	1a9a      	subs	r2, r3, r2
   d5304:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   d5306:	2a07      	cmp	r2, #7
   d5308:	d90e      	bls.n	d5328 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb4>
          if(color == INVERSE) {
   d530a:	2e02      	cmp	r6, #2
   d530c:	d11d      	bne.n	d534a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd6>
   d530e:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   d5310:	7821      	ldrb	r1, [r4, #0]
   d5312:	43c9      	mvns	r1, r1
   d5314:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   d5316:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   d5318:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   d531c:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   d531e:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   d5320:	440c      	add	r4, r1
            } while(h >= 8);
   d5322:	d8f5      	bhi.n	d5310 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9c>
   d5324:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   d5328:	b302      	cbz	r2, d536c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   d532a:	4b13      	ldr	r3, [pc, #76]	; (d5378 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   d532c:	2e01      	cmp	r6, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   d532e:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   d5330:	d019      	beq.n	d5366 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   d5332:	2e02      	cmp	r6, #2
   d5334:	d01b      	beq.n	d536e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   d5336:	b9ce      	cbnz	r6, d536c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   d5338:	7822      	ldrb	r2, [r4, #0]
   d533a:	ea22 0303 	bic.w	r3, r2, r3
   d533e:	e014      	b.n	d536a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   d5340:	f817 c001 	ldrb.w	ip, [r7, r1]
   d5344:	ea85 050c 	eor.w	r5, r5, ip
   d5348:	e7d5      	b.n	d52f6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
            uint8_t val = (color != BLACK) ? 255 : 0;
   d534a:	2e00      	cmp	r6, #0
   d534c:	bf14      	ite	ne
   d534e:	25ff      	movne	r5, #255	; 0xff
   d5350:	2500      	moveq	r5, #0
   d5352:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   d5354:	7025      	strb	r5, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   d5356:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   d5358:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   d535c:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   d535e:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   d5360:	440c      	add	r4, r1
            } while(h >= 8);
   d5362:	d8f7      	bhi.n	d5354 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   d5364:	e7de      	b.n	d5324 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb0>
           case WHITE:   *pBuf |=  mask; break;
   d5366:	7822      	ldrb	r2, [r4, #0]
   d5368:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   d536a:	7023      	strb	r3, [r4, #0]
}
   d536c:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   d536e:	7822      	ldrb	r2, [r4, #0]
   d5370:	4053      	eors	r3, r2
   d5372:	e7fa      	b.n	d536a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   d5374:	000d7cfc 	.word	0x000d7cfc
   d5378:	000d7d04 	.word	0x000d7d04

000d537c <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d537c:	b470      	push	{r4, r5, r6}
   d537e:	4614      	mov	r4, r2
  switch(rotation) {
   d5380:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5382:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   d5386:	2a02      	cmp	r2, #2
   d5388:	d00d      	beq.n	d53a6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   d538a:	2a03      	cmp	r2, #3
   d538c:	d018      	beq.n	d53c0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   d538e:	2a01      	cmp	r2, #1
   d5390:	d111      	bne.n	d53b6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   d5392:	8902      	ldrh	r2, [r0, #8]
   d5394:	43e4      	mvns	r4, r4
   d5396:	4414      	add	r4, r2
   d5398:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   d539a:	9603      	str	r6, [sp, #12]
   d539c:	460a      	mov	r2, r1
   d539e:	4621      	mov	r1, r4
}
   d53a0:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   d53a2:	f7ff bf67 	b.w	d5274 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   d53a6:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   d53a8:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   d53aa:	43e4      	mvns	r4, r4
    x -= (w-1);
   d53ac:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   d53ae:	4414      	add	r4, r2
    x -= (w-1);
   d53b0:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   d53b2:	b224      	sxth	r4, r4
    x -= (w-1);
   d53b4:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   d53b6:	9603      	str	r6, [sp, #12]
   d53b8:	4622      	mov	r2, r4
}
   d53ba:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   d53bc:	f7ff bf16 	b.w	d51ec <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   d53c0:	8945      	ldrh	r5, [r0, #10]
   d53c2:	4419      	add	r1, r3
   d53c4:	1a69      	subs	r1, r5, r1
   d53c6:	b209      	sxth	r1, r1
    break;
   d53c8:	e7e7      	b.n	d539a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000d53ca <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   d53ca:	b430      	push	{r4, r5}
   d53cc:	4614      	mov	r4, r2
  switch(rotation) {
   d53ce:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   d53d0:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   d53d4:	2a02      	cmp	r2, #2
   d53d6:	d00d      	beq.n	d53f4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   d53d8:	2a03      	cmp	r2, #3
   d53da:	d018      	beq.n	d540e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   d53dc:	2a01      	cmp	r2, #1
   d53de:	d111      	bne.n	d5404 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   d53e0:	18e2      	adds	r2, r4, r3
   d53e2:	8904      	ldrh	r4, [r0, #8]
   d53e4:	1aa4      	subs	r4, r4, r2
   d53e6:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   d53e8:	9502      	str	r5, [sp, #8]
   d53ea:	460a      	mov	r2, r1
   d53ec:	4621      	mov	r1, r4
}
   d53ee:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   d53f0:	f7ff befc 	b.w	d51ec <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   d53f4:	8902      	ldrh	r2, [r0, #8]
   d53f6:	43c9      	mvns	r1, r1
   d53f8:	4411      	add	r1, r2
    y -= (h-1);
   d53fa:	18e2      	adds	r2, r4, r3
   d53fc:	8944      	ldrh	r4, [r0, #10]
   d53fe:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   d5400:	b209      	sxth	r1, r1
    y -= (h-1);
   d5402:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   d5404:	9502      	str	r5, [sp, #8]
   d5406:	4622      	mov	r2, r4
}
   d5408:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   d540a:	f7ff bf33 	b.w	d5274 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   d540e:	8942      	ldrh	r2, [r0, #10]
   d5410:	43c9      	mvns	r1, r1
   d5412:	4411      	add	r1, r2
   d5414:	b209      	sxth	r1, r1
    break;
   d5416:	e7e7      	b.n	d53e8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000d5418 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   d5418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d541c:	4604      	mov	r4, r0
  TRANSACTION_START
   d541e:	6a80      	ldr	r0, [r0, #40]	; 0x28
   d5420:	2800      	cmp	r0, #0
   d5422:	d042      	beq.n	d54aa <_ZN16Adafruit_SSD13067displayEv+0x92>
   d5424:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d5426:	f000 fff5 	bl	d6414 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   d542a:	4947      	ldr	r1, [pc, #284]	; (d5548 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   d542c:	2205      	movs	r2, #5
   d542e:	4620      	mov	r0, r4
   d5430:	f7ff fd29 	bl	d4e86 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   d5434:	7a21      	ldrb	r1, [r4, #8]
   d5436:	3901      	subs	r1, #1
   d5438:	4620      	mov	r0, r4
   d543a:	b2c9      	uxtb	r1, r1
   d543c:	f7ff fcbc 	bl	d4db8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d5440:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d5444:	1dde      	adds	r6, r3, #7
   d5446:	bf48      	it	mi
   d5448:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   d544c:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d5450:	8923      	ldrh	r3, [r4, #8]
   d5452:	10f6      	asrs	r6, r6, #3
   d5454:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   d5458:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   d545c:	2800      	cmp	r0, #0
   d545e:	d03a      	beq.n	d54d6 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   d5460:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d5464:	f000 ffe4 	bl	d6430 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   d5468:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d546a:	6803      	ldr	r3, [r0, #0]
   d546c:	2140      	movs	r1, #64	; 0x40
   d546e:	689b      	ldr	r3, [r3, #8]
   d5470:	4798      	blx	r3
    uint8_t bytesOut = 1;
   d5472:	2701      	movs	r7, #1
    while(count--) {
   d5474:	42b5      	cmp	r5, r6
   d5476:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5478:	d024      	beq.n	d54c4 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   d547a:	2f1f      	cmp	r7, #31
   d547c:	d90c      	bls.n	d5498 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   d547e:	f000 ffde 	bl	d643e <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   d5482:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d5486:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5488:	f000 ffd2 	bl	d6430 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   d548c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d548e:	6803      	ldr	r3, [r0, #0]
   d5490:	2140      	movs	r1, #64	; 0x40
   d5492:	689b      	ldr	r3, [r3, #8]
   d5494:	4798      	blx	r3
        bytesOut = 1;
   d5496:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   d5498:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d549a:	f815 1b01 	ldrb.w	r1, [r5], #1
   d549e:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   d54a0:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   d54a2:	689b      	ldr	r3, [r3, #8]
   d54a4:	4798      	blx	r3
      bytesOut++;
   d54a6:	b2ff      	uxtb	r7, r7
    while(count--) {
   d54a8:	e7e4      	b.n	d5474 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   d54aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d54ac:	b118      	cbz	r0, d54b6 <_ZN16Adafruit_SSD13067displayEv+0x9e>
   d54ae:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d54b2:	f000 fb0f 	bl	d5ad4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d54b6:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d54ba:	2100      	movs	r1, #0
   d54bc:	b280      	uxth	r0, r0
   d54be:	f001 f8fe 	bl	d66be <digitalWrite>
   d54c2:	e7b2      	b.n	d542a <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   d54c4:	f000 ffbb 	bl	d643e <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   d54c8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d54ca:	b378      	cbz	r0, d552c <_ZN16Adafruit_SSD13067displayEv+0x114>
   d54cc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   d54ce:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d54d2:	f000 bf9f 	b.w	d6414 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   d54d6:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   d54da:	2101      	movs	r1, #1
   d54dc:	b280      	uxth	r0, r0
   d54de:	f001 f8ee 	bl	d66be <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   d54e2:	42b5      	cmp	r5, r6
   d54e4:	d0f0      	beq.n	d54c8 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   d54e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   d54e8:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   d54ec:	b118      	cbz	r0, d54f6 <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   d54ee:	4649      	mov	r1, r9
   d54f0:	f000 fb5e 	bl	d5bb0 <_ZN8SPIClass8transferEh>
   d54f4:	e7f5      	b.n	d54e2 <_ZN16Adafruit_SSD13067displayEv+0xca>
   d54f6:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d54f8:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d54fc:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d5500:	ea09 0108 	and.w	r1, r9, r8
   d5504:	b280      	uxth	r0, r0
   d5506:	f001 f8da 	bl	d66be <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d550a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d550e:	2101      	movs	r1, #1
   d5510:	b280      	uxth	r0, r0
   d5512:	f001 f8d4 	bl	d66be <digitalWrite>
      digitalWrite(clkPin , LOW);
   d5516:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d551a:	2100      	movs	r1, #0
   d551c:	b280      	uxth	r0, r0
   d551e:	f001 f8ce 	bl	d66be <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5522:	3f01      	subs	r7, #1
   d5524:	ea4f 0858 	mov.w	r8, r8, lsr #1
   d5528:	d1e8      	bne.n	d54fc <_ZN16Adafruit_SSD13067displayEv+0xe4>
   d552a:	e7da      	b.n	d54e2 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   d552c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5530:	2101      	movs	r1, #1
   d5532:	b280      	uxth	r0, r0
   d5534:	f001 f8c3 	bl	d66be <digitalWrite>
   d5538:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d553a:	b118      	cbz	r0, d5544 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   d553c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   d5540:	f000 baaf 	b.w	d5aa2 <_ZN8SPIClass14endTransactionEv>
}
   d5544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d5548:	000d7d28 	.word	0x000d7d28

000d554c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d554c:	b508      	push	{r3, lr}
   d554e:	4b02      	ldr	r3, [pc, #8]	; (d5558 <netdb_freeaddrinfo+0xc>)
   d5550:	681b      	ldr	r3, [r3, #0]
   d5552:	689b      	ldr	r3, [r3, #8]
   d5554:	9301      	str	r3, [sp, #4]
   d5556:	bd08      	pop	{r3, pc}
   d5558:	00030268 	.word	0x00030268

000d555c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d555c:	b508      	push	{r3, lr}
   d555e:	4b02      	ldr	r3, [pc, #8]	; (d5568 <netdb_getaddrinfo+0xc>)
   d5560:	681b      	ldr	r3, [r3, #0]
   d5562:	68db      	ldr	r3, [r3, #12]
   d5564:	9301      	str	r3, [sp, #4]
   d5566:	bd08      	pop	{r3, pc}
   d5568:	00030268 	.word	0x00030268

000d556c <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d556c:	b508      	push	{r3, lr}
   d556e:	4b02      	ldr	r3, [pc, #8]	; (d5578 <HAL_Validate_Pin_Function+0xc>)
   d5570:	681b      	ldr	r3, [r3, #0]
   d5572:	685b      	ldr	r3, [r3, #4]
   d5574:	9301      	str	r3, [sp, #4]
   d5576:	bd08      	pop	{r3, pc}
   d5578:	0003022c 	.word	0x0003022c

000d557c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d557c:	b508      	push	{r3, lr}
   d557e:	4b02      	ldr	r3, [pc, #8]	; (d5588 <HAL_Pin_Mode+0xc>)
   d5580:	681b      	ldr	r3, [r3, #0]
   d5582:	689b      	ldr	r3, [r3, #8]
   d5584:	9301      	str	r3, [sp, #4]
   d5586:	bd08      	pop	{r3, pc}
   d5588:	0003022c 	.word	0x0003022c

000d558c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d558c:	b508      	push	{r3, lr}
   d558e:	4b02      	ldr	r3, [pc, #8]	; (d5598 <HAL_Get_Pin_Mode+0xc>)
   d5590:	681b      	ldr	r3, [r3, #0]
   d5592:	68db      	ldr	r3, [r3, #12]
   d5594:	9301      	str	r3, [sp, #4]
   d5596:	bd08      	pop	{r3, pc}
   d5598:	0003022c 	.word	0x0003022c

000d559c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d559c:	b508      	push	{r3, lr}
   d559e:	4b02      	ldr	r3, [pc, #8]	; (d55a8 <HAL_GPIO_Write+0xc>)
   d55a0:	681b      	ldr	r3, [r3, #0]
   d55a2:	691b      	ldr	r3, [r3, #16]
   d55a4:	9301      	str	r3, [sp, #4]
   d55a6:	bd08      	pop	{r3, pc}
   d55a8:	0003022c 	.word	0x0003022c

000d55ac <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d55ac:	b508      	push	{r3, lr}
   d55ae:	4b02      	ldr	r3, [pc, #8]	; (d55b8 <HAL_GPIO_Read+0xc>)
   d55b0:	681b      	ldr	r3, [r3, #0]
   d55b2:	695b      	ldr	r3, [r3, #20]
   d55b4:	9301      	str	r3, [sp, #4]
   d55b6:	bd08      	pop	{r3, pc}
   d55b8:	0003022c 	.word	0x0003022c

000d55bc <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d55bc:	b508      	push	{r3, lr}
   d55be:	4b02      	ldr	r3, [pc, #8]	; (d55c8 <hal_adc_read+0xc>)
   d55c0:	681b      	ldr	r3, [r3, #0]
   d55c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d55c4:	9301      	str	r3, [sp, #4]
   d55c6:	bd08      	pop	{r3, pc}
   d55c8:	0003022c 	.word	0x0003022c

000d55cc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d55cc:	b508      	push	{r3, lr}
   d55ce:	4b02      	ldr	r3, [pc, #8]	; (d55d8 <HAL_RNG_GetRandomNumber+0xc>)
   d55d0:	681b      	ldr	r3, [r3, #0]
   d55d2:	685b      	ldr	r3, [r3, #4]
   d55d4:	9301      	str	r3, [sp, #4]
   d55d6:	bd08      	pop	{r3, pc}
   d55d8:	00030218 	.word	0x00030218

000d55dc <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d55dc:	b508      	push	{r3, lr}
   d55de:	4b02      	ldr	r3, [pc, #8]	; (d55e8 <HAL_Delay_Microseconds+0xc>)
   d55e0:	681b      	ldr	r3, [r3, #0]
   d55e2:	68db      	ldr	r3, [r3, #12]
   d55e4:	9301      	str	r3, [sp, #4]
   d55e6:	bd08      	pop	{r3, pc}
   d55e8:	00030218 	.word	0x00030218

000d55ec <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d55ec:	b508      	push	{r3, lr}
   d55ee:	4b02      	ldr	r3, [pc, #8]	; (d55f8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d55f0:	681b      	ldr	r3, [r3, #0]
   d55f2:	695b      	ldr	r3, [r3, #20]
   d55f4:	9301      	str	r3, [sp, #4]
   d55f6:	bd08      	pop	{r3, pc}
   d55f8:	00030218 	.word	0x00030218

000d55fc <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d55fc:	b508      	push	{r3, lr}
   d55fe:	4b02      	ldr	r3, [pc, #8]	; (d5608 <os_mutex_create+0xc>)
   d5600:	681b      	ldr	r3, [r3, #0]
   d5602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5604:	9301      	str	r3, [sp, #4]
   d5606:	bd08      	pop	{r3, pc}
   d5608:	00030248 	.word	0x00030248

000d560c <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   d560c:	b508      	push	{r3, lr}
   d560e:	4b02      	ldr	r3, [pc, #8]	; (d5618 <os_mutex_destroy+0xc>)
   d5610:	681b      	ldr	r3, [r3, #0]
   d5612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5614:	9301      	str	r3, [sp, #4]
   d5616:	bd08      	pop	{r3, pc}
   d5618:	00030248 	.word	0x00030248

000d561c <os_mutex_recursive_create>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d561c:	b508      	push	{r3, lr}
   d561e:	4b02      	ldr	r3, [pc, #8]	; (d5628 <os_mutex_recursive_create+0xc>)
   d5620:	681b      	ldr	r3, [r3, #0]
   d5622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5624:	9301      	str	r3, [sp, #4]
   d5626:	bd08      	pop	{r3, pc}
   d5628:	00030248 	.word	0x00030248

000d562c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d562c:	b508      	push	{r3, lr}
   d562e:	4b02      	ldr	r3, [pc, #8]	; (d5638 <os_mutex_recursive_destroy+0xc>)
   d5630:	681b      	ldr	r3, [r3, #0]
   d5632:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5634:	9301      	str	r3, [sp, #4]
   d5636:	bd08      	pop	{r3, pc}
   d5638:	00030248 	.word	0x00030248

000d563c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d563c:	b508      	push	{r3, lr}
   d563e:	4b02      	ldr	r3, [pc, #8]	; (d5648 <inet_inet_ntop+0xc>)
   d5640:	681b      	ldr	r3, [r3, #0]
   d5642:	695b      	ldr	r3, [r3, #20]
   d5644:	9301      	str	r3, [sp, #4]
   d5646:	bd08      	pop	{r3, pc}
   d5648:	00030264 	.word	0x00030264

000d564c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d564c:	b508      	push	{r3, lr}
   d564e:	4b02      	ldr	r3, [pc, #8]	; (d5658 <hal_usart_init+0xc>)
   d5650:	681b      	ldr	r3, [r3, #0]
   d5652:	681b      	ldr	r3, [r3, #0]
   d5654:	9301      	str	r3, [sp, #4]
   d5656:	bd08      	pop	{r3, pc}
   d5658:	0003023c 	.word	0x0003023c

000d565c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d565c:	b508      	push	{r3, lr}
   d565e:	4b02      	ldr	r3, [pc, #8]	; (d5668 <hal_usart_write+0xc>)
   d5660:	681b      	ldr	r3, [r3, #0]
   d5662:	68db      	ldr	r3, [r3, #12]
   d5664:	9301      	str	r3, [sp, #4]
   d5666:	bd08      	pop	{r3, pc}
   d5668:	0003023c 	.word	0x0003023c

000d566c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d566c:	b508      	push	{r3, lr}
   d566e:	4b02      	ldr	r3, [pc, #8]	; (d5678 <hal_usart_available+0xc>)
   d5670:	681b      	ldr	r3, [r3, #0]
   d5672:	691b      	ldr	r3, [r3, #16]
   d5674:	9301      	str	r3, [sp, #4]
   d5676:	bd08      	pop	{r3, pc}
   d5678:	0003023c 	.word	0x0003023c

000d567c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d567c:	b508      	push	{r3, lr}
   d567e:	4b02      	ldr	r3, [pc, #8]	; (d5688 <hal_usart_read+0xc>)
   d5680:	681b      	ldr	r3, [r3, #0]
   d5682:	695b      	ldr	r3, [r3, #20]
   d5684:	9301      	str	r3, [sp, #4]
   d5686:	bd08      	pop	{r3, pc}
   d5688:	0003023c 	.word	0x0003023c

000d568c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d568c:	b508      	push	{r3, lr}
   d568e:	4b02      	ldr	r3, [pc, #8]	; (d5698 <hal_usart_peek+0xc>)
   d5690:	681b      	ldr	r3, [r3, #0]
   d5692:	699b      	ldr	r3, [r3, #24]
   d5694:	9301      	str	r3, [sp, #4]
   d5696:	bd08      	pop	{r3, pc}
   d5698:	0003023c 	.word	0x0003023c

000d569c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d569c:	b508      	push	{r3, lr}
   d569e:	4b02      	ldr	r3, [pc, #8]	; (d56a8 <hal_usart_flush+0xc>)
   d56a0:	681b      	ldr	r3, [r3, #0]
   d56a2:	69db      	ldr	r3, [r3, #28]
   d56a4:	9301      	str	r3, [sp, #4]
   d56a6:	bd08      	pop	{r3, pc}
   d56a8:	0003023c 	.word	0x0003023c

000d56ac <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d56ac:	b508      	push	{r3, lr}
   d56ae:	4b02      	ldr	r3, [pc, #8]	; (d56b8 <hal_usart_is_enabled+0xc>)
   d56b0:	681b      	ldr	r3, [r3, #0]
   d56b2:	6a1b      	ldr	r3, [r3, #32]
   d56b4:	9301      	str	r3, [sp, #4]
   d56b6:	bd08      	pop	{r3, pc}
   d56b8:	0003023c 	.word	0x0003023c

000d56bc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d56bc:	b508      	push	{r3, lr}
   d56be:	4b02      	ldr	r3, [pc, #8]	; (d56c8 <hal_usart_available_data_for_write+0xc>)
   d56c0:	681b      	ldr	r3, [r3, #0]
   d56c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d56c4:	9301      	str	r3, [sp, #4]
   d56c6:	bd08      	pop	{r3, pc}
   d56c8:	0003023c 	.word	0x0003023c

000d56cc <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   d56cc:	b508      	push	{r3, lr}
   d56ce:	4b02      	ldr	r3, [pc, #8]	; (d56d8 <hal_i2c_set_speed+0xc>)
   d56d0:	681b      	ldr	r3, [r3, #0]
   d56d2:	681b      	ldr	r3, [r3, #0]
   d56d4:	9301      	str	r3, [sp, #4]
   d56d6:	bd08      	pop	{r3, pc}
   d56d8:	00030228 	.word	0x00030228

000d56dc <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d56dc:	b508      	push	{r3, lr}
   d56de:	4b02      	ldr	r3, [pc, #8]	; (d56e8 <hal_i2c_begin+0xc>)
   d56e0:	681b      	ldr	r3, [r3, #0]
   d56e2:	68db      	ldr	r3, [r3, #12]
   d56e4:	9301      	str	r3, [sp, #4]
   d56e6:	bd08      	pop	{r3, pc}
   d56e8:	00030228 	.word	0x00030228

000d56ec <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d56ec:	b508      	push	{r3, lr}
   d56ee:	4b02      	ldr	r3, [pc, #8]	; (d56f8 <hal_i2c_begin_transmission+0xc>)
   d56f0:	681b      	ldr	r3, [r3, #0]
   d56f2:	699b      	ldr	r3, [r3, #24]
   d56f4:	9301      	str	r3, [sp, #4]
   d56f6:	bd08      	pop	{r3, pc}
   d56f8:	00030228 	.word	0x00030228

000d56fc <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d56fc:	b508      	push	{r3, lr}
   d56fe:	4b02      	ldr	r3, [pc, #8]	; (d5708 <hal_i2c_end_transmission+0xc>)
   d5700:	681b      	ldr	r3, [r3, #0]
   d5702:	69db      	ldr	r3, [r3, #28]
   d5704:	9301      	str	r3, [sp, #4]
   d5706:	bd08      	pop	{r3, pc}
   d5708:	00030228 	.word	0x00030228

000d570c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d570c:	b508      	push	{r3, lr}
   d570e:	4b02      	ldr	r3, [pc, #8]	; (d5718 <hal_i2c_write+0xc>)
   d5710:	681b      	ldr	r3, [r3, #0]
   d5712:	6a1b      	ldr	r3, [r3, #32]
   d5714:	9301      	str	r3, [sp, #4]
   d5716:	bd08      	pop	{r3, pc}
   d5718:	00030228 	.word	0x00030228

000d571c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d571c:	b508      	push	{r3, lr}
   d571e:	4b02      	ldr	r3, [pc, #8]	; (d5728 <hal_i2c_available+0xc>)
   d5720:	681b      	ldr	r3, [r3, #0]
   d5722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5724:	9301      	str	r3, [sp, #4]
   d5726:	bd08      	pop	{r3, pc}
   d5728:	00030228 	.word	0x00030228

000d572c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d572c:	b508      	push	{r3, lr}
   d572e:	4b02      	ldr	r3, [pc, #8]	; (d5738 <hal_i2c_read+0xc>)
   d5730:	681b      	ldr	r3, [r3, #0]
   d5732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5734:	9301      	str	r3, [sp, #4]
   d5736:	bd08      	pop	{r3, pc}
   d5738:	00030228 	.word	0x00030228

000d573c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d573c:	b508      	push	{r3, lr}
   d573e:	4b02      	ldr	r3, [pc, #8]	; (d5748 <hal_i2c_peek+0xc>)
   d5740:	681b      	ldr	r3, [r3, #0]
   d5742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5744:	9301      	str	r3, [sp, #4]
   d5746:	bd08      	pop	{r3, pc}
   d5748:	00030228 	.word	0x00030228

000d574c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d574c:	b508      	push	{r3, lr}
   d574e:	4b02      	ldr	r3, [pc, #8]	; (d5758 <hal_i2c_flush+0xc>)
   d5750:	681b      	ldr	r3, [r3, #0]
   d5752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5754:	9301      	str	r3, [sp, #4]
   d5756:	bd08      	pop	{r3, pc}
   d5758:	00030228 	.word	0x00030228

000d575c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d575c:	b508      	push	{r3, lr}
   d575e:	4b02      	ldr	r3, [pc, #8]	; (d5768 <hal_i2c_is_enabled+0xc>)
   d5760:	681b      	ldr	r3, [r3, #0]
   d5762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5764:	9301      	str	r3, [sp, #4]
   d5766:	bd08      	pop	{r3, pc}
   d5768:	00030228 	.word	0x00030228

000d576c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d576c:	b508      	push	{r3, lr}
   d576e:	4b02      	ldr	r3, [pc, #8]	; (d5778 <hal_i2c_init+0xc>)
   d5770:	681b      	ldr	r3, [r3, #0]
   d5772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5774:	9301      	str	r3, [sp, #4]
   d5776:	bd08      	pop	{r3, pc}
   d5778:	00030228 	.word	0x00030228

000d577c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d577c:	b508      	push	{r3, lr}
   d577e:	4b02      	ldr	r3, [pc, #8]	; (d5788 <hal_spi_begin+0xc>)
   d5780:	681b      	ldr	r3, [r3, #0]
   d5782:	681b      	ldr	r3, [r3, #0]
   d5784:	9301      	str	r3, [sp, #4]
   d5786:	bd08      	pop	{r3, pc}
   d5788:	00030230 	.word	0x00030230

000d578c <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d578c:	b508      	push	{r3, lr}
   d578e:	4b02      	ldr	r3, [pc, #8]	; (d5798 <hal_spi_transfer+0xc>)
   d5790:	681b      	ldr	r3, [r3, #0]
   d5792:	695b      	ldr	r3, [r3, #20]
   d5794:	9301      	str	r3, [sp, #4]
   d5796:	bd08      	pop	{r3, pc}
   d5798:	00030230 	.word	0x00030230

000d579c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d579c:	b508      	push	{r3, lr}
   d579e:	4b02      	ldr	r3, [pc, #8]	; (d57a8 <hal_spi_init+0xc>)
   d57a0:	681b      	ldr	r3, [r3, #0]
   d57a2:	69db      	ldr	r3, [r3, #28]
   d57a4:	9301      	str	r3, [sp, #4]
   d57a6:	bd08      	pop	{r3, pc}
   d57a8:	00030230 	.word	0x00030230

000d57ac <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d57ac:	b508      	push	{r3, lr}
   d57ae:	4b02      	ldr	r3, [pc, #8]	; (d57b8 <hal_spi_is_enabled+0xc>)
   d57b0:	681b      	ldr	r3, [r3, #0]
   d57b2:	6a1b      	ldr	r3, [r3, #32]
   d57b4:	9301      	str	r3, [sp, #4]
   d57b6:	bd08      	pop	{r3, pc}
   d57b8:	00030230 	.word	0x00030230

000d57bc <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d57bc:	b508      	push	{r3, lr}
   d57be:	4b02      	ldr	r3, [pc, #8]	; (d57c8 <hal_spi_info+0xc>)
   d57c0:	681b      	ldr	r3, [r3, #0]
   d57c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d57c4:	9301      	str	r3, [sp, #4]
   d57c6:	bd08      	pop	{r3, pc}
   d57c8:	00030230 	.word	0x00030230

000d57cc <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d57cc:	b508      	push	{r3, lr}
   d57ce:	4b02      	ldr	r3, [pc, #8]	; (d57d8 <hal_spi_set_settings+0xc>)
   d57d0:	681b      	ldr	r3, [r3, #0]
   d57d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d57d4:	9301      	str	r3, [sp, #4]
   d57d6:	bd08      	pop	{r3, pc}
   d57d8:	00030230 	.word	0x00030230

000d57dc <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d57dc:	b508      	push	{r3, lr}
   d57de:	4b02      	ldr	r3, [pc, #8]	; (d57e8 <hal_spi_acquire+0xc>)
   d57e0:	681b      	ldr	r3, [r3, #0]
   d57e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d57e4:	9301      	str	r3, [sp, #4]
   d57e6:	bd08      	pop	{r3, pc}
   d57e8:	00030230 	.word	0x00030230

000d57ec <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d57ec:	b508      	push	{r3, lr}
   d57ee:	4b02      	ldr	r3, [pc, #8]	; (d57f8 <hal_spi_release+0xc>)
   d57f0:	681b      	ldr	r3, [r3, #0]
   d57f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d57f4:	9301      	str	r3, [sp, #4]
   d57f6:	bd08      	pop	{r3, pc}
   d57f8:	00030230 	.word	0x00030230

000d57fc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d57fc:	b508      	push	{r3, lr}
   d57fe:	4b02      	ldr	r3, [pc, #8]	; (d5808 <HAL_USB_USART_Init+0xc>)
   d5800:	681b      	ldr	r3, [r3, #0]
   d5802:	681b      	ldr	r3, [r3, #0]
   d5804:	9301      	str	r3, [sp, #4]
   d5806:	bd08      	pop	{r3, pc}
   d5808:	0003024c 	.word	0x0003024c

000d580c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d580c:	b508      	push	{r3, lr}
   d580e:	4b02      	ldr	r3, [pc, #8]	; (d5818 <HAL_USB_USART_Begin+0xc>)
   d5810:	681b      	ldr	r3, [r3, #0]
   d5812:	685b      	ldr	r3, [r3, #4]
   d5814:	9301      	str	r3, [sp, #4]
   d5816:	bd08      	pop	{r3, pc}
   d5818:	0003024c 	.word	0x0003024c

000d581c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d581c:	b508      	push	{r3, lr}
   d581e:	4b02      	ldr	r3, [pc, #8]	; (d5828 <HAL_USB_USART_Available_Data+0xc>)
   d5820:	681b      	ldr	r3, [r3, #0]
   d5822:	691b      	ldr	r3, [r3, #16]
   d5824:	9301      	str	r3, [sp, #4]
   d5826:	bd08      	pop	{r3, pc}
   d5828:	0003024c 	.word	0x0003024c

000d582c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d582c:	b508      	push	{r3, lr}
   d582e:	4b02      	ldr	r3, [pc, #8]	; (d5838 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5830:	681b      	ldr	r3, [r3, #0]
   d5832:	695b      	ldr	r3, [r3, #20]
   d5834:	9301      	str	r3, [sp, #4]
   d5836:	bd08      	pop	{r3, pc}
   d5838:	0003024c 	.word	0x0003024c

000d583c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d583c:	b508      	push	{r3, lr}
   d583e:	4b02      	ldr	r3, [pc, #8]	; (d5848 <HAL_USB_USART_Receive_Data+0xc>)
   d5840:	681b      	ldr	r3, [r3, #0]
   d5842:	699b      	ldr	r3, [r3, #24]
   d5844:	9301      	str	r3, [sp, #4]
   d5846:	bd08      	pop	{r3, pc}
   d5848:	0003024c 	.word	0x0003024c

000d584c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d584c:	b508      	push	{r3, lr}
   d584e:	4b02      	ldr	r3, [pc, #8]	; (d5858 <HAL_USB_USART_Send_Data+0xc>)
   d5850:	681b      	ldr	r3, [r3, #0]
   d5852:	69db      	ldr	r3, [r3, #28]
   d5854:	9301      	str	r3, [sp, #4]
   d5856:	bd08      	pop	{r3, pc}
   d5858:	0003024c 	.word	0x0003024c

000d585c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d585c:	b508      	push	{r3, lr}
   d585e:	4b02      	ldr	r3, [pc, #8]	; (d5868 <HAL_USB_USART_Flush_Data+0xc>)
   d5860:	681b      	ldr	r3, [r3, #0]
   d5862:	6a1b      	ldr	r3, [r3, #32]
   d5864:	9301      	str	r3, [sp, #4]
   d5866:	bd08      	pop	{r3, pc}
   d5868:	0003024c 	.word	0x0003024c

000d586c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d586c:	b508      	push	{r3, lr}
   d586e:	4b02      	ldr	r3, [pc, #8]	; (d5878 <panic_+0xc>)
   d5870:	681b      	ldr	r3, [r3, #0]
   d5872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5874:	9301      	str	r3, [sp, #4]
   d5876:	bd08      	pop	{r3, pc}
   d5878:	00030260 	.word	0x00030260

000d587c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d587c:	b508      	push	{r3, lr}
   d587e:	4b02      	ldr	r3, [pc, #8]	; (d5888 <set_system_mode+0xc>)
   d5880:	681b      	ldr	r3, [r3, #0]
   d5882:	685b      	ldr	r3, [r3, #4]
   d5884:	9301      	str	r3, [sp, #4]
   d5886:	bd08      	pop	{r3, pc}
   d5888:	00030220 	.word	0x00030220

000d588c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d588c:	b508      	push	{r3, lr}
   d588e:	4b02      	ldr	r3, [pc, #8]	; (d5898 <system_delay_ms+0xc>)
   d5890:	681b      	ldr	r3, [r3, #0]
   d5892:	695b      	ldr	r3, [r3, #20]
   d5894:	9301      	str	r3, [sp, #4]
   d5896:	bd08      	pop	{r3, pc}
   d5898:	00030220 	.word	0x00030220

000d589c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d589c:	b508      	push	{r3, lr}
   d589e:	4b02      	ldr	r3, [pc, #8]	; (d58a8 <system_thread_set_state+0xc>)
   d58a0:	681b      	ldr	r3, [r3, #0]
   d58a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d58a4:	9301      	str	r3, [sp, #4]
   d58a6:	bd08      	pop	{r3, pc}
   d58a8:	00030220 	.word	0x00030220

000d58ac <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d58ac:	b508      	push	{r3, lr}
   d58ae:	4b03      	ldr	r3, [pc, #12]	; (d58bc <system_ctrl_set_app_request_handler+0x10>)
   d58b0:	681b      	ldr	r3, [r3, #0]
   d58b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d58b6:	9301      	str	r3, [sp, #4]
   d58b8:	bd08      	pop	{r3, pc}
   d58ba:	0000      	.short	0x0000
   d58bc:	00030220 	.word	0x00030220

000d58c0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d58c0:	b508      	push	{r3, lr}
   d58c2:	4b03      	ldr	r3, [pc, #12]	; (d58d0 <system_ctrl_set_result+0x10>)
   d58c4:	681b      	ldr	r3, [r3, #0]
   d58c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d58ca:	9301      	str	r3, [sp, #4]
   d58cc:	bd08      	pop	{r3, pc}
   d58ce:	0000      	.short	0x0000
   d58d0:	00030220 	.word	0x00030220

000d58d4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d58d4:	b508      	push	{r3, lr}
   d58d6:	4b02      	ldr	r3, [pc, #8]	; (d58e0 <network_connect+0xc>)
   d58d8:	681b      	ldr	r3, [r3, #0]
   d58da:	685b      	ldr	r3, [r3, #4]
   d58dc:	9301      	str	r3, [sp, #4]
   d58de:	bd08      	pop	{r3, pc}
   d58e0:	00030240 	.word	0x00030240

000d58e4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d58e4:	b508      	push	{r3, lr}
   d58e6:	4b02      	ldr	r3, [pc, #8]	; (d58f0 <network_connecting+0xc>)
   d58e8:	681b      	ldr	r3, [r3, #0]
   d58ea:	689b      	ldr	r3, [r3, #8]
   d58ec:	9301      	str	r3, [sp, #4]
   d58ee:	bd08      	pop	{r3, pc}
   d58f0:	00030240 	.word	0x00030240

000d58f4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d58f4:	b508      	push	{r3, lr}
   d58f6:	4b02      	ldr	r3, [pc, #8]	; (d5900 <network_disconnect+0xc>)
   d58f8:	681b      	ldr	r3, [r3, #0]
   d58fa:	68db      	ldr	r3, [r3, #12]
   d58fc:	9301      	str	r3, [sp, #4]
   d58fe:	bd08      	pop	{r3, pc}
   d5900:	00030240 	.word	0x00030240

000d5904 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5904:	b508      	push	{r3, lr}
   d5906:	4b02      	ldr	r3, [pc, #8]	; (d5910 <network_ready+0xc>)
   d5908:	681b      	ldr	r3, [r3, #0]
   d590a:	691b      	ldr	r3, [r3, #16]
   d590c:	9301      	str	r3, [sp, #4]
   d590e:	bd08      	pop	{r3, pc}
   d5910:	00030240 	.word	0x00030240

000d5914 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5914:	b508      	push	{r3, lr}
   d5916:	4b02      	ldr	r3, [pc, #8]	; (d5920 <network_on+0xc>)
   d5918:	681b      	ldr	r3, [r3, #0]
   d591a:	695b      	ldr	r3, [r3, #20]
   d591c:	9301      	str	r3, [sp, #4]
   d591e:	bd08      	pop	{r3, pc}
   d5920:	00030240 	.word	0x00030240

000d5924 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5924:	b508      	push	{r3, lr}
   d5926:	4b02      	ldr	r3, [pc, #8]	; (d5930 <network_off+0xc>)
   d5928:	681b      	ldr	r3, [r3, #0]
   d592a:	699b      	ldr	r3, [r3, #24]
   d592c:	9301      	str	r3, [sp, #4]
   d592e:	bd08      	pop	{r3, pc}
   d5930:	00030240 	.word	0x00030240

000d5934 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5934:	b508      	push	{r3, lr}
   d5936:	4b02      	ldr	r3, [pc, #8]	; (d5940 <network_listen+0xc>)
   d5938:	681b      	ldr	r3, [r3, #0]
   d593a:	69db      	ldr	r3, [r3, #28]
   d593c:	9301      	str	r3, [sp, #4]
   d593e:	bd08      	pop	{r3, pc}
   d5940:	00030240 	.word	0x00030240

000d5944 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5944:	b508      	push	{r3, lr}
   d5946:	4b02      	ldr	r3, [pc, #8]	; (d5950 <network_listening+0xc>)
   d5948:	681b      	ldr	r3, [r3, #0]
   d594a:	6a1b      	ldr	r3, [r3, #32]
   d594c:	9301      	str	r3, [sp, #4]
   d594e:	bd08      	pop	{r3, pc}
   d5950:	00030240 	.word	0x00030240

000d5954 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5954:	b508      	push	{r3, lr}
   d5956:	4b02      	ldr	r3, [pc, #8]	; (d5960 <network_set_listen_timeout+0xc>)
   d5958:	681b      	ldr	r3, [r3, #0]
   d595a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d595c:	9301      	str	r3, [sp, #4]
   d595e:	bd08      	pop	{r3, pc}
   d5960:	00030240 	.word	0x00030240

000d5964 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5964:	b508      	push	{r3, lr}
   d5966:	4b02      	ldr	r3, [pc, #8]	; (d5970 <network_get_listen_timeout+0xc>)
   d5968:	681b      	ldr	r3, [r3, #0]
   d596a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d596c:	9301      	str	r3, [sp, #4]
   d596e:	bd08      	pop	{r3, pc}
   d5970:	00030240 	.word	0x00030240

000d5974 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d5974:	b508      	push	{r3, lr}
   d5976:	4b02      	ldr	r3, [pc, #8]	; (d5980 <network_is_on+0xc>)
   d5978:	681b      	ldr	r3, [r3, #0]
   d597a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d597c:	9301      	str	r3, [sp, #4]
   d597e:	bd08      	pop	{r3, pc}
   d5980:	00030240 	.word	0x00030240

000d5984 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d5984:	b508      	push	{r3, lr}
   d5986:	4b02      	ldr	r3, [pc, #8]	; (d5990 <network_is_off+0xc>)
   d5988:	681b      	ldr	r3, [r3, #0]
   d598a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d598c:	9301      	str	r3, [sp, #4]
   d598e:	bd08      	pop	{r3, pc}
   d5990:	00030240 	.word	0x00030240

000d5994 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5994:	b508      	push	{r3, lr}
   d5996:	4b02      	ldr	r3, [pc, #8]	; (d59a0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5998:	681b      	ldr	r3, [r3, #0]
   d599a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d599c:	9301      	str	r3, [sp, #4]
   d599e:	bd08      	pop	{r3, pc}
   d59a0:	00030244 	.word	0x00030244

000d59a4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d59a4:	b508      	push	{r3, lr}
   d59a6:	4b02      	ldr	r3, [pc, #8]	; (d59b0 <malloc+0xc>)
   d59a8:	681b      	ldr	r3, [r3, #0]
   d59aa:	681b      	ldr	r3, [r3, #0]
   d59ac:	9301      	str	r3, [sp, #4]
   d59ae:	bd08      	pop	{r3, pc}
   d59b0:	0003021c 	.word	0x0003021c

000d59b4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d59b4:	b508      	push	{r3, lr}
   d59b6:	4b02      	ldr	r3, [pc, #8]	; (d59c0 <free+0xc>)
   d59b8:	681b      	ldr	r3, [r3, #0]
   d59ba:	685b      	ldr	r3, [r3, #4]
   d59bc:	9301      	str	r3, [sp, #4]
   d59be:	bd08      	pop	{r3, pc}
   d59c0:	0003021c 	.word	0x0003021c

000d59c4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d59c4:	b508      	push	{r3, lr}
   d59c6:	4b02      	ldr	r3, [pc, #8]	; (d59d0 <vsnprintf+0xc>)
   d59c8:	681b      	ldr	r3, [r3, #0]
   d59ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d59cc:	9301      	str	r3, [sp, #4]
   d59ce:	bd08      	pop	{r3, pc}
   d59d0:	0003021c 	.word	0x0003021c

000d59d4 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d59d4:	b508      	push	{r3, lr}
   d59d6:	4b02      	ldr	r3, [pc, #8]	; (d59e0 <newlib_impure_ptr_callback+0xc>)
   d59d8:	681b      	ldr	r3, [r3, #0]
   d59da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d59dc:	9301      	str	r3, [sp, #4]
   d59de:	bd08      	pop	{r3, pc}
   d59e0:	0003021c 	.word	0x0003021c

000d59e4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d59e4:	2200      	movs	r2, #0
   d59e6:	6840      	ldr	r0, [r0, #4]
   d59e8:	4611      	mov	r1, r2
   d59ea:	f7ff bfab 	b.w	d5944 <network_listening>

000d59ee <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d59ee:	2200      	movs	r2, #0
   d59f0:	6840      	ldr	r0, [r0, #4]
   d59f2:	4611      	mov	r1, r2
   d59f4:	f7ff bfb6 	b.w	d5964 <network_get_listen_timeout>

000d59f8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d59f8:	6840      	ldr	r0, [r0, #4]
   d59fa:	2200      	movs	r2, #0
   d59fc:	f7ff bfaa 	b.w	d5954 <network_set_listen_timeout>

000d5a00 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5a00:	6840      	ldr	r0, [r0, #4]
   d5a02:	2200      	movs	r2, #0
   d5a04:	f081 0101 	eor.w	r1, r1, #1
   d5a08:	f7ff bf94 	b.w	d5934 <network_listen>

000d5a0c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5a0c:	2300      	movs	r3, #0
   d5a0e:	6840      	ldr	r0, [r0, #4]
   d5a10:	461a      	mov	r2, r3
   d5a12:	4619      	mov	r1, r3
   d5a14:	f7ff bf86 	b.w	d5924 <network_off>

000d5a18 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5a18:	2300      	movs	r3, #0
   d5a1a:	6840      	ldr	r0, [r0, #4]
   d5a1c:	461a      	mov	r2, r3
   d5a1e:	4619      	mov	r1, r3
   d5a20:	f7ff bf78 	b.w	d5914 <network_on>

000d5a24 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5a24:	2200      	movs	r2, #0
   d5a26:	6840      	ldr	r0, [r0, #4]
   d5a28:	4611      	mov	r1, r2
   d5a2a:	f7ff bf6b 	b.w	d5904 <network_ready>

000d5a2e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5a2e:	2200      	movs	r2, #0
   d5a30:	6840      	ldr	r0, [r0, #4]
   d5a32:	4611      	mov	r1, r2
   d5a34:	f7ff bf56 	b.w	d58e4 <network_connecting>

000d5a38 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5a38:	6840      	ldr	r0, [r0, #4]
   d5a3a:	2200      	movs	r2, #0
   d5a3c:	2102      	movs	r1, #2
   d5a3e:	f7ff bf59 	b.w	d58f4 <network_disconnect>

000d5a42 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5a42:	2300      	movs	r3, #0
   d5a44:	6840      	ldr	r0, [r0, #4]
   d5a46:	461a      	mov	r2, r3
   d5a48:	f7ff bf44 	b.w	d58d4 <network_connect>

000d5a4c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5a4c:	4b02      	ldr	r3, [pc, #8]	; (d5a58 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5a4e:	2203      	movs	r2, #3
   d5a50:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5a52:	4a02      	ldr	r2, [pc, #8]	; (d5a5c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5a54:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d5a56:	4770      	bx	lr
   d5a58:	2003e650 	.word	0x2003e650
   d5a5c:	000d7d38 	.word	0x000d7d38

000d5a60 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d5a60:	2100      	movs	r1, #0
   d5a62:	f7ff bebb 	b.w	d57dc <hal_spi_acquire>

000d5a66 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d5a66:	2100      	movs	r1, #0
   d5a68:	f7ff bec0 	b.w	d57ec <hal_spi_release>

000d5a6c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d5a6c:	b510      	push	{r4, lr}
   d5a6e:	4604      	mov	r4, r0
   d5a70:	4608      	mov	r0, r1
{
    _spi = spi;
   d5a72:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d5a74:	f7ff fe92 	bl	d579c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5a78:	2300      	movs	r3, #0
   d5a7a:	6063      	str	r3, [r4, #4]
}
   d5a7c:	4620      	mov	r0, r4
   d5a7e:	bd10      	pop	{r4, pc}

000d5a80 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d5a80:	b510      	push	{r4, lr}
   d5a82:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d5a84:	7800      	ldrb	r0, [r0, #0]
   d5a86:	f7ff ffeb 	bl	d5a60 <_ZN8SPIClass4lockEv.isra.0>
   d5a8a:	b948      	cbnz	r0, d5aa0 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d5a8c:	7820      	ldrb	r0, [r4, #0]
   d5a8e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d5a92:	f7ff fe73 	bl	d577c <hal_spi_begin>
        unlock();
   d5a96:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d5a9c:	f7ff bfe3 	b.w	d5a66 <_ZN8SPIClass6unlockEv.isra.0>
}
   d5aa0:	bd10      	pop	{r4, pc}

000d5aa2 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d5aa2:	7800      	ldrb	r0, [r0, #0]
   d5aa4:	f7ff bfdf 	b.w	d5a66 <_ZN8SPIClass6unlockEv.isra.0>

000d5aa8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5aa8:	0840      	lsrs	r0, r0, #1
{
   d5aaa:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d5aac:	6018      	str	r0, [r3, #0]
   d5aae:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d5ab0:	6818      	ldr	r0, [r3, #0]
   d5ab2:	4288      	cmp	r0, r1
   d5ab4:	b2e5      	uxtb	r5, r4
   d5ab6:	d906      	bls.n	d5ac6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d5ab8:	3401      	adds	r4, #1
   d5aba:	2c08      	cmp	r4, #8
   d5abc:	d002      	beq.n	d5ac4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d5abe:	0840      	lsrs	r0, r0, #1
   d5ac0:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d5ac2:	e7f5      	b.n	d5ab0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d5ac4:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d5ac6:	4b02      	ldr	r3, [pc, #8]	; (d5ad0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d5ac8:	5d5b      	ldrb	r3, [r3, r5]
   d5aca:	7013      	strb	r3, [r2, #0]
}
   d5acc:	bd30      	pop	{r4, r5, pc}
   d5ace:	bf00      	nop
   d5ad0:	000d7d6c 	.word	0x000d7d6c

000d5ad4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d5ad4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5ad8:	4606      	mov	r6, r0
   d5ada:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d5adc:	7800      	ldrb	r0, [r0, #0]
{
   d5ade:	460c      	mov	r4, r1
    CHECK(lock());
   d5ae0:	f7ff ffbe 	bl	d5a60 <_ZN8SPIClass4lockEv.isra.0>
   d5ae4:	2800      	cmp	r0, #0
   d5ae6:	db1b      	blt.n	d5b20 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d5ae8:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d5aea:	2214      	movs	r2, #20
   d5aec:	2100      	movs	r1, #0
   d5aee:	a809      	add	r0, sp, #36	; 0x24
   d5af0:	f001 fb42 	bl	d7178 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d5af4:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d5af6:	2200      	movs	r2, #0
   d5af8:	a909      	add	r1, sp, #36	; 0x24
   d5afa:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d5afc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d5b00:	f7ff fe5c 	bl	d57bc <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d5b04:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d5b08:	b113      	cbz	r3, d5b10 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d5b0a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d5b0e:	b155      	cbz	r5, d5b26 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d5b10:	2700      	movs	r7, #0
   d5b12:	46b9      	mov	r9, r7
   d5b14:	46b8      	mov	r8, r7
   d5b16:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d5b18:	7923      	ldrb	r3, [r4, #4]
   d5b1a:	b15d      	cbz	r5, d5b34 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d5b1c:	b1c3      	cbz	r3, d5b50 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d5b1e:	2000      	movs	r0, #0
}
   d5b20:	b00f      	add	sp, #60	; 0x3c
   d5b22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d5b26:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d5b2a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d5b2e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d5b32:	e7f1      	b.n	d5b18 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d5b34:	2b00      	cmp	r3, #0
   d5b36:	d135      	bne.n	d5ba4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d5b38:	68a3      	ldr	r3, [r4, #8]
   d5b3a:	4543      	cmp	r3, r8
   d5b3c:	d108      	bne.n	d5b50 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d5b3e:	f88d 9020 	strb.w	r9, [sp, #32]
   d5b42:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d5b46:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d5b4a:	89a3      	ldrh	r3, [r4, #12]
   d5b4c:	429a      	cmp	r2, r3
   d5b4e:	d0e6      	beq.n	d5b1e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d5b50:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d5b52:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d5b54:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d5b58:	980a      	ldr	r0, [sp, #40]	; 0x28
   d5b5a:	ab04      	add	r3, sp, #16
   d5b5c:	f10d 020f 	add.w	r2, sp, #15
   d5b60:	f7ff ffa2 	bl	d5aa8 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d5b64:	7921      	ldrb	r1, [r4, #4]
   d5b66:	b985      	cbnz	r5, d5b8a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d5b68:	b989      	cbnz	r1, d5b8e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d5b6a:	68a3      	ldr	r3, [r4, #8]
   d5b6c:	4543      	cmp	r3, r8
   d5b6e:	d30e      	bcc.n	d5b8e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d5b70:	f88d 9020 	strb.w	r9, [sp, #32]
   d5b74:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d5b78:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d5b7c:	89a3      	ldrh	r3, [r4, #12]
   d5b7e:	429a      	cmp	r2, r3
   d5b80:	d105      	bne.n	d5b8e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d5b82:	9b04      	ldr	r3, [sp, #16]
   d5b84:	4543      	cmp	r3, r8
   d5b86:	d102      	bne.n	d5b8e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d5b88:	e7c9      	b.n	d5b1e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d5b8a:	2900      	cmp	r1, #0
   d5b8c:	d1f9      	bne.n	d5b82 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d5b8e:	2300      	movs	r3, #0
   d5b90:	9301      	str	r3, [sp, #4]
   d5b92:	7b63      	ldrb	r3, [r4, #13]
   d5b94:	9300      	str	r3, [sp, #0]
   d5b96:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d5b9a:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d5b9c:	7830      	ldrb	r0, [r6, #0]
   d5b9e:	f7ff fe15 	bl	d57cc <hal_spi_set_settings>
   d5ba2:	e7bc      	b.n	d5b1e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d5ba4:	e9cd 5500 	strd	r5, r5, [sp]
   d5ba8:	462b      	mov	r3, r5
   d5baa:	462a      	mov	r2, r5
   d5bac:	2101      	movs	r1, #1
   d5bae:	e7f5      	b.n	d5b9c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d5bb0 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d5bb0:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d5bb2:	7800      	ldrb	r0, [r0, #0]
   d5bb4:	f7ff fdea 	bl	d578c <hal_spi_transfer>
}
   d5bb8:	b2c0      	uxtb	r0, r0
   d5bba:	bd08      	pop	{r3, pc}

000d5bbc <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5bbc:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5bbe:	4b09      	ldr	r3, [pc, #36]	; (d5be4 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5bc0:	4c09      	ldr	r4, [pc, #36]	; (d5be8 <_GLOBAL__sub_I_System+0x2c>)
   d5bc2:	2202      	movs	r2, #2
   d5bc4:	2000      	movs	r0, #0
   d5bc6:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d5bc8:	4b08      	ldr	r3, [pc, #32]	; (d5bec <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d5bca:	6020      	str	r0, [r4, #0]
   d5bcc:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d5bce:	71a0      	strb	r0, [r4, #6]
   d5bd0:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5bd2:	f7ff fe53 	bl	d587c <set_system_mode>
SystemClass System;
   d5bd6:	4620      	mov	r0, r4
   d5bd8:	4a05      	ldr	r2, [pc, #20]	; (d5bf0 <_GLOBAL__sub_I_System+0x34>)
   d5bda:	4906      	ldr	r1, [pc, #24]	; (d5bf4 <_GLOBAL__sub_I_System+0x38>)
   d5bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d5be0:	f000 bdf0 	b.w	d67c4 <__aeabi_atexit>
   d5be4:	2003e664 	.word	0x2003e664
   d5be8:	2003e658 	.word	0x2003e658
   d5bec:	ffff0000 	.word	0xffff0000
   d5bf0:	2003e5c4 	.word	0x2003e5c4
   d5bf4:	000d40c5 	.word	0x000d40c5

000d5bf8 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5bf8:	b510      	push	{r4, lr}
   d5bfa:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5bfc:	6800      	ldr	r0, [r0, #0]
   d5bfe:	b108      	cbz	r0, d5c04 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5c00:	f7ff fd14 	bl	d562c <os_mutex_recursive_destroy>
    }
   d5c04:	4620      	mov	r0, r4
   d5c06:	bd10      	pop	{r4, pc}

000d5c08 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5c08:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5c0a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d5c0c:	4604      	mov	r4, r0
      if (_M_manager)
   d5c0e:	b113      	cbz	r3, d5c16 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5c10:	2203      	movs	r2, #3
   d5c12:	4601      	mov	r1, r0
   d5c14:	4798      	blx	r3
    }
   d5c16:	4620      	mov	r0, r4
   d5c18:	bd10      	pop	{r4, pc}
	...

000d5c1c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d5c1c:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d5c1e:	4c06      	ldr	r4, [pc, #24]	; (d5c38 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5c20:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d5c22:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d5c24:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d5c26:	f7ff fcf9 	bl	d561c <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d5c2a:	4620      	mov	r0, r4
   d5c2c:	4a03      	ldr	r2, [pc, #12]	; (d5c3c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5c2e:	4904      	ldr	r1, [pc, #16]	; (d5c40 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d5c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d5c34:	f000 bdc6 	b.w	d67c4 <__aeabi_atexit>
   d5c38:	2003e668 	.word	0x2003e668
   d5c3c:	2003e5c4 	.word	0x2003e5c4
   d5c40:	000d5bf9 	.word	0x000d5bf9

000d5c44 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5c46:	4606      	mov	r6, r0
   d5c48:	460d      	mov	r5, r1
  size_t n = 0;
   d5c4a:	188f      	adds	r7, r1, r2
   d5c4c:	2400      	movs	r4, #0
  while (size--) {
   d5c4e:	42bd      	cmp	r5, r7
   d5c50:	d00c      	beq.n	d5c6c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5c52:	6833      	ldr	r3, [r6, #0]
   d5c54:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5c58:	689b      	ldr	r3, [r3, #8]
   d5c5a:	4630      	mov	r0, r6
   d5c5c:	4798      	blx	r3
     if (chunk>=0)
   d5c5e:	1e03      	subs	r3, r0, #0
   d5c60:	db01      	blt.n	d5c66 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5c62:	441c      	add	r4, r3
  while (size--) {
   d5c64:	e7f3      	b.n	d5c4e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5c66:	2c00      	cmp	r4, #0
   d5c68:	bf08      	it	eq
   d5c6a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d5c6c:	4620      	mov	r0, r4
   d5c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5c70 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5c70:	b513      	push	{r0, r1, r4, lr}
   d5c72:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d5c74:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d5c76:	b159      	cbz	r1, d5c90 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5c78:	9101      	str	r1, [sp, #4]
   d5c7a:	f001 faa9 	bl	d71d0 <strlen>
   d5c7e:	6823      	ldr	r3, [r4, #0]
   d5c80:	9901      	ldr	r1, [sp, #4]
   d5c82:	68db      	ldr	r3, [r3, #12]
   d5c84:	4602      	mov	r2, r0
   d5c86:	4620      	mov	r0, r4
    }
   d5c88:	b002      	add	sp, #8
   d5c8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d5c8e:	4718      	bx	r3
    }
   d5c90:	b002      	add	sp, #8
   d5c92:	bd10      	pop	{r4, pc}

000d5c94 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d5c94:	b508      	push	{r3, lr}
  return write(str);
   d5c96:	f7ff ffeb 	bl	d5c70 <_ZN5Print5writeEPKc>
}
   d5c9a:	bd08      	pop	{r3, pc}

000d5c9c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d5c9c:	6803      	ldr	r3, [r0, #0]
   d5c9e:	689b      	ldr	r3, [r3, #8]
   d5ca0:	4718      	bx	r3

000d5ca2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5ca2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5ca4:	210d      	movs	r1, #13
{
   d5ca6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5ca8:	f7ff fff8 	bl	d5c9c <_ZN5Print5printEc>
  n += print('\n');
   d5cac:	210a      	movs	r1, #10
  size_t n = print('\r');
   d5cae:	4604      	mov	r4, r0
  n += print('\n');
   d5cb0:	4628      	mov	r0, r5
   d5cb2:	f7ff fff3 	bl	d5c9c <_ZN5Print5printEc>
  return n;
}
   d5cb6:	4420      	add	r0, r4
   d5cb8:	bd38      	pop	{r3, r4, r5, pc}

000d5cba <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5cba:	b538      	push	{r3, r4, r5, lr}
   d5cbc:	4605      	mov	r5, r0
  return write(str);
   d5cbe:	f7ff ffd7 	bl	d5c70 <_ZN5Print5writeEPKc>
   d5cc2:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d5cc4:	4628      	mov	r0, r5
   d5cc6:	f7ff ffec 	bl	d5ca2 <_ZN5Print7printlnEv>
  return n;
}
   d5cca:	4420      	add	r0, r4
   d5ccc:	bd38      	pop	{r3, r4, r5, pc}

000d5cce <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5cce:	b530      	push	{r4, r5, lr}
   d5cd0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5cd2:	2300      	movs	r3, #0
   d5cd4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5cd8:	2a01      	cmp	r2, #1
   d5cda:	bf98      	it	ls
   d5cdc:	220a      	movls	r2, #10
   d5cde:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d5ce0:	460d      	mov	r5, r1
   d5ce2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d5ce6:	fb01 5312 	mls	r3, r1, r2, r5
   d5cea:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5cee:	2b09      	cmp	r3, #9
   d5cf0:	bf94      	ite	ls
   d5cf2:	3330      	addls	r3, #48	; 0x30
   d5cf4:	3337      	addhi	r3, #55	; 0x37
   d5cf6:	b2db      	uxtb	r3, r3
  } while(n);
   d5cf8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5cfa:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d5cfe:	d9ef      	bls.n	d5ce0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5d00:	4621      	mov	r1, r4
   d5d02:	f7ff ffb5 	bl	d5c70 <_ZN5Print5writeEPKc>
}
   d5d06:	b00b      	add	sp, #44	; 0x2c
   d5d08:	bd30      	pop	{r4, r5, pc}
	...

000d5d0c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d5d0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5d10:	ec55 4b10 	vmov	r4, r5, d0
   d5d14:	4606      	mov	r6, r0
   d5d16:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d5d18:	ee10 2a10 	vmov	r2, s0
   d5d1c:	ee10 0a10 	vmov	r0, s0
   d5d20:	462b      	mov	r3, r5
   d5d22:	4629      	mov	r1, r5
   d5d24:	f001 f9ae 	bl	d7084 <__aeabi_dcmpun>
   d5d28:	b140      	cbz	r0, d5d3c <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d5d2a:	4953      	ldr	r1, [pc, #332]	; (d5e78 <_ZN5Print10printFloatEdh+0x16c>)
   d5d2c:	4630      	mov	r0, r6
   d5d2e:	f7ff ff9f 	bl	d5c70 <_ZN5Print5writeEPKc>
   d5d32:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d5d34:	4650      	mov	r0, sl
   d5d36:	b003      	add	sp, #12
   d5d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d5d3c:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d5d40:	4b4e      	ldr	r3, [pc, #312]	; (d5e7c <_ZN5Print10printFloatEdh+0x170>)
   d5d42:	f04f 32ff 	mov.w	r2, #4294967295
   d5d46:	4620      	mov	r0, r4
   d5d48:	4649      	mov	r1, r9
   d5d4a:	f001 f99b 	bl	d7084 <__aeabi_dcmpun>
   d5d4e:	b948      	cbnz	r0, d5d64 <_ZN5Print10printFloatEdh+0x58>
   d5d50:	4b4a      	ldr	r3, [pc, #296]	; (d5e7c <_ZN5Print10printFloatEdh+0x170>)
   d5d52:	f04f 32ff 	mov.w	r2, #4294967295
   d5d56:	4620      	mov	r0, r4
   d5d58:	4649      	mov	r1, r9
   d5d5a:	f001 f975 	bl	d7048 <__aeabi_dcmple>
   d5d5e:	b908      	cbnz	r0, d5d64 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d5d60:	4947      	ldr	r1, [pc, #284]	; (d5e80 <_ZN5Print10printFloatEdh+0x174>)
   d5d62:	e7e3      	b.n	d5d2c <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d5d64:	4b47      	ldr	r3, [pc, #284]	; (d5e84 <_ZN5Print10printFloatEdh+0x178>)
   d5d66:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d5d6a:	4620      	mov	r0, r4
   d5d6c:	4629      	mov	r1, r5
   d5d6e:	f001 f97f 	bl	d7070 <__aeabi_dcmpgt>
   d5d72:	b108      	cbz	r0, d5d78 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d5d74:	4944      	ldr	r1, [pc, #272]	; (d5e88 <_ZN5Print10printFloatEdh+0x17c>)
   d5d76:	e7d9      	b.n	d5d2c <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d5d78:	4b44      	ldr	r3, [pc, #272]	; (d5e8c <_ZN5Print10printFloatEdh+0x180>)
   d5d7a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d5d7e:	4620      	mov	r0, r4
   d5d80:	4629      	mov	r1, r5
   d5d82:	f001 f957 	bl	d7034 <__aeabi_dcmplt>
   d5d86:	2800      	cmp	r0, #0
   d5d88:	d1f4      	bne.n	d5d74 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d5d8a:	2200      	movs	r2, #0
   d5d8c:	2300      	movs	r3, #0
   d5d8e:	4620      	mov	r0, r4
   d5d90:	4629      	mov	r1, r5
   d5d92:	f001 f94f 	bl	d7034 <__aeabi_dcmplt>
   d5d96:	b1d0      	cbz	r0, d5dce <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d5d98:	212d      	movs	r1, #45	; 0x2d
   d5d9a:	4630      	mov	r0, r6
   d5d9c:	f7ff ff7e 	bl	d5c9c <_ZN5Print5printEc>
     number = -number;
   d5da0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d5da4:	4682      	mov	sl, r0
     number = -number;
   d5da6:	461d      	mov	r5, r3
  double rounding = 0.5;
   d5da8:	4939      	ldr	r1, [pc, #228]	; (d5e90 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d5daa:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d5e98 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d5dae:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d5db2:	2000      	movs	r0, #0
    rounding /= 10.0;
   d5db4:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d5db8:	fa5f f38b 	uxtb.w	r3, fp
   d5dbc:	429f      	cmp	r7, r3
   d5dbe:	d908      	bls.n	d5dd2 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d5dc0:	4642      	mov	r2, r8
   d5dc2:	464b      	mov	r3, r9
   d5dc4:	f000 ffee 	bl	d6da4 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d5dc8:	f10b 0b01 	add.w	fp, fp, #1
   d5dcc:	e7f4      	b.n	d5db8 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d5dce:	4682      	mov	sl, r0
   d5dd0:	e7ea      	b.n	d5da8 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d5dd2:	4622      	mov	r2, r4
   d5dd4:	462b      	mov	r3, r5
   d5dd6:	f000 fd05 	bl	d67e4 <__adddf3>
   d5dda:	460d      	mov	r5, r1
   d5ddc:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d5dde:	f001 f98f 	bl	d7100 <__aeabi_d2uiz>
   d5de2:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d5de4:	f000 fe3a 	bl	d6a5c <__aeabi_ui2d>
   d5de8:	4602      	mov	r2, r0
   d5dea:	460b      	mov	r3, r1
   d5dec:	4620      	mov	r0, r4
   d5dee:	4629      	mov	r1, r5
   d5df0:	f000 fcf6 	bl	d67e0 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5df4:	220a      	movs	r2, #10
   d5df6:	4604      	mov	r4, r0
   d5df8:	460d      	mov	r5, r1
   d5dfa:	4630      	mov	r0, r6
   d5dfc:	4641      	mov	r1, r8
   d5dfe:	f7ff ff66 	bl	d5cce <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d5e02:	4482      	add	sl, r0
  if (digits > 0) {
   d5e04:	b127      	cbz	r7, d5e10 <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d5e06:	4923      	ldr	r1, [pc, #140]	; (d5e94 <_ZN5Print10printFloatEdh+0x188>)
   d5e08:	4630      	mov	r0, r6
   d5e0a:	f7ff ff31 	bl	d5c70 <_ZN5Print5writeEPKc>
    n += print(".");
   d5e0e:	4482      	add	sl, r0
    remainder *= 10.0;
   d5e10:	f8df 9084 	ldr.w	r9, [pc, #132]	; d5e98 <_ZN5Print10printFloatEdh+0x18c>
   d5e14:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d5e18:	3f01      	subs	r7, #1
   d5e1a:	b2ff      	uxtb	r7, r7
   d5e1c:	2fff      	cmp	r7, #255	; 0xff
   d5e1e:	d089      	beq.n	d5d34 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d5e20:	4642      	mov	r2, r8
   d5e22:	464b      	mov	r3, r9
   d5e24:	4620      	mov	r0, r4
   d5e26:	4629      	mov	r1, r5
   d5e28:	f000 fe92 	bl	d6b50 <__aeabi_dmul>
   d5e2c:	4604      	mov	r4, r0
   d5e2e:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d5e30:	f001 f93e 	bl	d70b0 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d5e34:	f1b0 0b00 	subs.w	fp, r0, #0
   d5e38:	da1a      	bge.n	d5e70 <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d5e3a:	212d      	movs	r1, #45	; 0x2d
   d5e3c:	4630      	mov	r0, r6
   d5e3e:	f7ff ff2d 	bl	d5c9c <_ZN5Print5printEc>
            val = -n;
   d5e42:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d5e46:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d5e48:	220a      	movs	r2, #10
   d5e4a:	4630      	mov	r0, r6
   d5e4c:	9301      	str	r3, [sp, #4]
   d5e4e:	f7ff ff3e 	bl	d5cce <_ZN5Print11printNumberEmh>
   d5e52:	9b01      	ldr	r3, [sp, #4]
   d5e54:	4418      	add	r0, r3
    n += print(toPrint);
   d5e56:	4482      	add	sl, r0
    remainder -= toPrint;
   d5e58:	4658      	mov	r0, fp
   d5e5a:	f000 fe0f 	bl	d6a7c <__aeabi_i2d>
   d5e5e:	4602      	mov	r2, r0
   d5e60:	460b      	mov	r3, r1
   d5e62:	4620      	mov	r0, r4
   d5e64:	4629      	mov	r1, r5
   d5e66:	f000 fcbb 	bl	d67e0 <__aeabi_dsub>
   d5e6a:	4604      	mov	r4, r0
   d5e6c:	460d      	mov	r5, r1
  while (digits-- > 0)
   d5e6e:	e7d3      	b.n	d5e18 <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d5e70:	4659      	mov	r1, fp
        size_t t = 0;
   d5e72:	2300      	movs	r3, #0
   d5e74:	e7e8      	b.n	d5e48 <_ZN5Print10printFloatEdh+0x13c>
   d5e76:	bf00      	nop
   d5e78:	000d7d74 	.word	0x000d7d74
   d5e7c:	7fefffff 	.word	0x7fefffff
   d5e80:	000d7d78 	.word	0x000d7d78
   d5e84:	41efffff 	.word	0x41efffff
   d5e88:	000d7d7c 	.word	0x000d7d7c
   d5e8c:	c1efffff 	.word	0xc1efffff
   d5e90:	3fe00000 	.word	0x3fe00000
   d5e94:	000d7d80 	.word	0x000d7d80
   d5e98:	40240000 	.word	0x40240000

000d5e9c <_ZN5Print5printEdi>:
  return printFloat(n, digits);
   d5e9c:	b2c9      	uxtb	r1, r1
   d5e9e:	f7ff bf35 	b.w	d5d0c <_ZN5Print10printFloatEdh>

000d5ea2 <_ZN5Print7printlnEdi>:
{
   d5ea2:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   d5ea4:	b2c9      	uxtb	r1, r1
{
   d5ea6:	4605      	mov	r5, r0
  return printFloat(n, digits);
   d5ea8:	f7ff ff30 	bl	d5d0c <_ZN5Print10printFloatEdh>
   d5eac:	4604      	mov	r4, r0
  n += println();
   d5eae:	4628      	mov	r0, r5
   d5eb0:	f7ff fef7 	bl	d5ca2 <_ZN5Print7printlnEv>
}
   d5eb4:	4420      	add	r0, r4
   d5eb6:	bd38      	pop	{r3, r4, r5, pc}

000d5eb8 <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d5eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5ebc:	b086      	sub	sp, #24
   d5ebe:	af00      	add	r7, sp, #0
   d5ec0:	4605      	mov	r5, r0
   d5ec2:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d5ec4:	1d38      	adds	r0, r7, #4
   d5ec6:	2114      	movs	r1, #20
{
   d5ec8:	4614      	mov	r4, r2
    va_copy(args2, args);
   d5eca:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d5ecc:	f7ff fd7a 	bl	d59c4 <vsnprintf>

    if (n<bufsize)
   d5ed0:	2813      	cmp	r0, #19
   d5ed2:	d80e      	bhi.n	d5ef2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d5ed4:	1d39      	adds	r1, r7, #4
   d5ed6:	4628      	mov	r0, r5
   d5ed8:	f7ff feca 	bl	d5c70 <_ZN5Print5writeEPKc>
   d5edc:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d5ede:	b11e      	cbz	r6, d5ee8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d5ee0:	4628      	mov	r0, r5
   d5ee2:	f7ff fede 	bl	d5ca2 <_ZN5Print7printlnEv>
   d5ee6:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d5ee8:	4620      	mov	r0, r4
   d5eea:	3718      	adds	r7, #24
   d5eec:	46bd      	mov	sp, r7
   d5eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d5ef2:	f100 0308 	add.w	r3, r0, #8
   d5ef6:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d5efa:	46e8      	mov	r8, sp
        char bigger[n+1];
   d5efc:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d5f00:	4622      	mov	r2, r4
   d5f02:	1c41      	adds	r1, r0, #1
   d5f04:	683b      	ldr	r3, [r7, #0]
   d5f06:	4668      	mov	r0, sp
   d5f08:	f7ff fd5c 	bl	d59c4 <vsnprintf>
  return write(str);
   d5f0c:	4669      	mov	r1, sp
   d5f0e:	4628      	mov	r0, r5
   d5f10:	f7ff feae 	bl	d5c70 <_ZN5Print5writeEPKc>
   d5f14:	4604      	mov	r4, r0
   d5f16:	46c5      	mov	sp, r8
   d5f18:	e7e1      	b.n	d5ede <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d5f1a <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5f1a:	2300      	movs	r3, #0
   d5f1c:	6840      	ldr	r0, [r0, #4]
   d5f1e:	461a      	mov	r2, r3
   d5f20:	4619      	mov	r1, r3
   d5f22:	f7ff bcf7 	b.w	d5914 <network_on>
	...

000d5f28 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5f28:	4b01      	ldr	r3, [pc, #4]	; (d5f30 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5f2a:	4a02      	ldr	r2, [pc, #8]	; (d5f34 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5f2c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d5f2e:	4770      	bx	lr
   d5f30:	2003e66c 	.word	0x2003e66c
   d5f34:	000d7d82 	.word	0x000d7d82

000d5f38 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5f38:	4b02      	ldr	r3, [pc, #8]	; (d5f44 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5f3a:	681a      	ldr	r2, [r3, #0]
   d5f3c:	4b02      	ldr	r3, [pc, #8]	; (d5f48 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5f3e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d5f40:	4770      	bx	lr
   d5f42:	bf00      	nop
   d5f44:	2003e55c 	.word	0x2003e55c
   d5f48:	2003e670 	.word	0x2003e670

000d5f4c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5f4c:	2100      	movs	r1, #0
   d5f4e:	f7ff bc9d 	b.w	d588c <system_delay_ms>

000d5f52 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5f52:	b510      	push	{r4, lr}
   d5f54:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5f56:	f7ff fe57 	bl	d5c08 <_ZNSt14_Function_baseD1Ev>
   d5f5a:	4620      	mov	r0, r4
   d5f5c:	bd10      	pop	{r4, pc}
	...

000d5f60 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d5f60:	4803      	ldr	r0, [pc, #12]	; (d5f70 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5f62:	4a04      	ldr	r2, [pc, #16]	; (d5f74 <_GLOBAL__sub_I_RGB+0x14>)
   d5f64:	4904      	ldr	r1, [pc, #16]	; (d5f78 <_GLOBAL__sub_I_RGB+0x18>)
   d5f66:	2300      	movs	r3, #0
   d5f68:	6083      	str	r3, [r0, #8]
   d5f6a:	f000 bc2b 	b.w	d67c4 <__aeabi_atexit>
   d5f6e:	bf00      	nop
   d5f70:	2003e674 	.word	0x2003e674
   d5f74:	2003e5c4 	.word	0x2003e5c4
   d5f78:	000d5f53 	.word	0x000d5f53

000d5f7c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d5f7c:	4b01      	ldr	r3, [pc, #4]	; (d5f84 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d5f7e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d5f80:	4770      	bx	lr
   d5f82:	bf00      	nop
   d5f84:	2003e560 	.word	0x2003e560

000d5f88 <serialEventRun>:
{
   d5f88:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5f8a:	4b0b      	ldr	r3, [pc, #44]	; (d5fb8 <serialEventRun+0x30>)
   d5f8c:	b143      	cbz	r3, d5fa0 <serialEventRun+0x18>
   d5f8e:	f000 f95b 	bl	d6248 <_Z16_fetch_usbserialv>
   d5f92:	6803      	ldr	r3, [r0, #0]
   d5f94:	691b      	ldr	r3, [r3, #16]
   d5f96:	4798      	blx	r3
   d5f98:	2800      	cmp	r0, #0
   d5f9a:	dd01      	ble.n	d5fa0 <serialEventRun+0x18>
        serialEvent();
   d5f9c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d5fa0:	4b06      	ldr	r3, [pc, #24]	; (d5fbc <serialEventRun+0x34>)
   d5fa2:	b143      	cbz	r3, d5fb6 <serialEventRun+0x2e>
   d5fa4:	f000 f9ce 	bl	d6344 <_Z22__fetch_global_Serial1v>
   d5fa8:	6803      	ldr	r3, [r0, #0]
   d5faa:	691b      	ldr	r3, [r3, #16]
   d5fac:	4798      	blx	r3
   d5fae:	2800      	cmp	r0, #0
   d5fb0:	dd01      	ble.n	d5fb6 <serialEventRun+0x2e>
        serialEvent1();
   d5fb2:	f3af 8000 	nop.w
}
   d5fb6:	bd08      	pop	{r3, pc}
	...

000d5fc0 <_post_loop>:
{
   d5fc0:	b508      	push	{r3, lr}
	serialEventRun();
   d5fc2:	f7ff ffe1 	bl	d5f88 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5fc6:	f7ff fb11 	bl	d55ec <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5fca:	4b01      	ldr	r3, [pc, #4]	; (d5fd0 <_post_loop+0x10>)
   d5fcc:	6018      	str	r0, [r3, #0]
}
   d5fce:	bd08      	pop	{r3, pc}
   d5fd0:	2003e7d4 	.word	0x2003e7d4

000d5fd4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5fd4:	4802      	ldr	r0, [pc, #8]	; (d5fe0 <_Z33system_initialize_user_backup_ramv+0xc>)
   d5fd6:	4a03      	ldr	r2, [pc, #12]	; (d5fe4 <_Z33system_initialize_user_backup_ramv+0x10>)
   d5fd8:	4903      	ldr	r1, [pc, #12]	; (d5fe8 <_Z33system_initialize_user_backup_ramv+0x14>)
   d5fda:	1a12      	subs	r2, r2, r0
   d5fdc:	f001 b8be 	b.w	d715c <memcpy>
   d5fe0:	2003f400 	.word	0x2003f400
   d5fe4:	2003f404 	.word	0x2003f404
   d5fe8:	000d7ee0 	.word	0x000d7ee0

000d5fec <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5fec:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5fee:	2300      	movs	r3, #0
   d5ff0:	9300      	str	r3, [sp, #0]
   d5ff2:	461a      	mov	r2, r3
   d5ff4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5ff8:	f7ff fc62 	bl	d58c0 <system_ctrl_set_result>
}
   d5ffc:	b003      	add	sp, #12
   d5ffe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6004 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d6004:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6006:	8843      	ldrh	r3, [r0, #2]
   d6008:	2b0a      	cmp	r3, #10
   d600a:	d008      	beq.n	d601e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d600c:	2b50      	cmp	r3, #80	; 0x50
   d600e:	d10b      	bne.n	d6028 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d6010:	4b09      	ldr	r3, [pc, #36]	; (d6038 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6012:	681b      	ldr	r3, [r3, #0]
   d6014:	b14b      	cbz	r3, d602a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d6016:	b003      	add	sp, #12
   d6018:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d601c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d601e:	f7ff ffe5 	bl	d5fec <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d6022:	b003      	add	sp, #12
   d6024:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6028:	2300      	movs	r3, #0
   d602a:	9300      	str	r3, [sp, #0]
   d602c:	461a      	mov	r2, r3
   d602e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6032:	f7ff fc45 	bl	d58c0 <system_ctrl_set_result>
}
   d6036:	e7f4      	b.n	d6022 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d6038:	2003e688 	.word	0x2003e688

000d603c <module_user_init_hook>:
{
   d603c:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d603e:	4c12      	ldr	r4, [pc, #72]	; (d6088 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6040:	4812      	ldr	r0, [pc, #72]	; (d608c <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6042:	4d13      	ldr	r5, [pc, #76]	; (d6090 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6044:	2100      	movs	r1, #0
   d6046:	f7ff fcc5 	bl	d59d4 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d604a:	6823      	ldr	r3, [r4, #0]
   d604c:	42ab      	cmp	r3, r5
   d604e:	4b11      	ldr	r3, [pc, #68]	; (d6094 <module_user_init_hook+0x58>)
   d6050:	bf0c      	ite	eq
   d6052:	2201      	moveq	r2, #1
   d6054:	2200      	movne	r2, #0
   d6056:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6058:	d002      	beq.n	d6060 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d605a:	f7ff ffbb 	bl	d5fd4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d605e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6060:	f7ff fab4 	bl	d55cc <HAL_RNG_GetRandomNumber>
   d6064:	4604      	mov	r4, r0
    srand(seed);
   d6066:	f001 f88f 	bl	d7188 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d606a:	4b0b      	ldr	r3, [pc, #44]	; (d6098 <module_user_init_hook+0x5c>)
   d606c:	b113      	cbz	r3, d6074 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d606e:	4620      	mov	r0, r4
   d6070:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6074:	2100      	movs	r1, #0
   d6076:	4808      	ldr	r0, [pc, #32]	; (d6098 <module_user_init_hook+0x5c>)
   d6078:	f7ff fc8c 	bl	d5994 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d607c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6080:	4806      	ldr	r0, [pc, #24]	; (d609c <module_user_init_hook+0x60>)
   d6082:	2100      	movs	r1, #0
   d6084:	f7ff bc12 	b.w	d58ac <system_ctrl_set_app_request_handler>
   d6088:	2003f400 	.word	0x2003f400
   d608c:	000d5f7d 	.word	0x000d5f7d
   d6090:	9a271c1e 	.word	0x9a271c1e
   d6094:	2003e684 	.word	0x2003e684
   d6098:	00000000 	.word	0x00000000
   d609c:	000d6005 	.word	0x000d6005

000d60a0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d60a0:	4770      	bx	lr

000d60a2 <_ZN9IPAddressD0Ev>:
   d60a2:	b510      	push	{r4, lr}
   d60a4:	2118      	movs	r1, #24
   d60a6:	4604      	mov	r4, r0
   d60a8:	f000 fb91 	bl	d67ce <_ZdlPvj>
   d60ac:	4620      	mov	r0, r4
   d60ae:	bd10      	pop	{r4, pc}

000d60b0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d60b0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d60b2:	7d03      	ldrb	r3, [r0, #20]
   d60b4:	2b06      	cmp	r3, #6
{
   d60b6:	b08d      	sub	sp, #52	; 0x34
   d60b8:	460e      	mov	r6, r1
   d60ba:	f100 0704 	add.w	r7, r0, #4
   d60be:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d60c2:	d012      	beq.n	d60ea <_ZNK9IPAddress7printToER5Print+0x3a>
   d60c4:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d60c8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d60cc:	220a      	movs	r2, #10
   d60ce:	4630      	mov	r0, r6
   d60d0:	f7ff fdfd 	bl	d5cce <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d60d4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d60d6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d60d8:	d019      	beq.n	d610e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d60da:	2c00      	cmp	r4, #0
   d60dc:	d0f4      	beq.n	d60c8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d60de:	212e      	movs	r1, #46	; 0x2e
   d60e0:	4630      	mov	r0, r6
   d60e2:	f7ff fddb 	bl	d5c9c <_ZN5Print5printEc>
   d60e6:	4404      	add	r4, r0
   d60e8:	e7ee      	b.n	d60c8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d60ea:	232f      	movs	r3, #47	; 0x2f
   d60ec:	466a      	mov	r2, sp
   d60ee:	4639      	mov	r1, r7
   d60f0:	200a      	movs	r0, #10
		buf[0] = 0;
   d60f2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d60f6:	f7ff faa1 	bl	d563c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d60fa:	4668      	mov	r0, sp
   d60fc:	f001 f868 	bl	d71d0 <strlen>
   d6100:	6833      	ldr	r3, [r6, #0]
   d6102:	4602      	mov	r2, r0
   d6104:	68db      	ldr	r3, [r3, #12]
   d6106:	4669      	mov	r1, sp
   d6108:	4630      	mov	r0, r6
   d610a:	4798      	blx	r3
   d610c:	4604      	mov	r4, r0
    }
    return n;
}
   d610e:	4620      	mov	r0, r4
   d6110:	b00d      	add	sp, #52	; 0x34
   d6112:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6114 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d6114:	b510      	push	{r4, lr}
   d6116:	4b05      	ldr	r3, [pc, #20]	; (d612c <_ZN9IPAddressC1Ev+0x18>)
   d6118:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d611a:	2211      	movs	r2, #17
   d611c:	f840 3b04 	str.w	r3, [r0], #4
   d6120:	2100      	movs	r1, #0
   d6122:	f001 f829 	bl	d7178 <memset>
}
   d6126:	4620      	mov	r0, r4
   d6128:	bd10      	pop	{r4, pc}
   d612a:	bf00      	nop
   d612c:	000d7dac 	.word	0x000d7dac

000d6130 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d6130:	4603      	mov	r3, r0
   d6132:	4a07      	ldr	r2, [pc, #28]	; (d6150 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6134:	b510      	push	{r4, lr}
   d6136:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d613a:	f101 0210 	add.w	r2, r1, #16
   d613e:	f851 4b04 	ldr.w	r4, [r1], #4
   d6142:	f843 4b04 	str.w	r4, [r3], #4
   d6146:	4291      	cmp	r1, r2
   d6148:	d1f9      	bne.n	d613e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d614a:	780a      	ldrb	r2, [r1, #0]
   d614c:	701a      	strb	r2, [r3, #0]
}
   d614e:	bd10      	pop	{r4, pc}
   d6150:	000d7dac 	.word	0x000d7dac

000d6154 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d6154:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6156:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d615a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d615e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6162:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d6166:	2304      	movs	r3, #4
   d6168:	6041      	str	r1, [r0, #4]
   d616a:	7503      	strb	r3, [r0, #20]
}
   d616c:	bd10      	pop	{r4, pc}
	...

000d6170 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d6170:	b513      	push	{r0, r1, r4, lr}
   d6172:	4b05      	ldr	r3, [pc, #20]	; (d6188 <_ZN9IPAddressC1EPKh+0x18>)
   d6174:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d6176:	78cb      	ldrb	r3, [r1, #3]
   d6178:	9300      	str	r3, [sp, #0]
   d617a:	788b      	ldrb	r3, [r1, #2]
   d617c:	784a      	ldrb	r2, [r1, #1]
   d617e:	7809      	ldrb	r1, [r1, #0]
   d6180:	f7ff ffe8 	bl	d6154 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d6184:	b002      	add	sp, #8
   d6186:	bd10      	pop	{r4, pc}
   d6188:	000d7dac 	.word	0x000d7dac

000d618c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d618c:	7441      	strb	r1, [r0, #17]
}
   d618e:	4770      	bx	lr

000d6190 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6190:	4770      	bx	lr

000d6192 <_ZN9USBSerial4readEv>:
{
   d6192:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6194:	2100      	movs	r1, #0
   d6196:	7c00      	ldrb	r0, [r0, #16]
   d6198:	f7ff fb50 	bl	d583c <HAL_USB_USART_Receive_Data>
}
   d619c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d61a0:	bd08      	pop	{r3, pc}

000d61a2 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d61a2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d61a4:	2101      	movs	r1, #1
   d61a6:	7c00      	ldrb	r0, [r0, #16]
   d61a8:	f7ff fb48 	bl	d583c <HAL_USB_USART_Receive_Data>
}
   d61ac:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d61b0:	bd08      	pop	{r3, pc}

000d61b2 <_ZN9USBSerial17availableForWriteEv>:
{
   d61b2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d61b4:	7c00      	ldrb	r0, [r0, #16]
   d61b6:	f7ff fb39 	bl	d582c <HAL_USB_USART_Available_Data_For_Write>
}
   d61ba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d61be:	bd08      	pop	{r3, pc}

000d61c0 <_ZN9USBSerial9availableEv>:
{
   d61c0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d61c2:	7c00      	ldrb	r0, [r0, #16]
   d61c4:	f7ff fb2a 	bl	d581c <HAL_USB_USART_Available_Data>
}
   d61c8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d61cc:	bd08      	pop	{r3, pc}

000d61ce <_ZN9USBSerial5writeEh>:
{
   d61ce:	b513      	push	{r0, r1, r4, lr}
   d61d0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d61d2:	7c00      	ldrb	r0, [r0, #16]
{
   d61d4:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d61d6:	f7ff fb29 	bl	d582c <HAL_USB_USART_Available_Data_For_Write>
   d61da:	2800      	cmp	r0, #0
   d61dc:	9901      	ldr	r1, [sp, #4]
   d61de:	dc01      	bgt.n	d61e4 <_ZN9USBSerial5writeEh+0x16>
   d61e0:	7c60      	ldrb	r0, [r4, #17]
   d61e2:	b120      	cbz	r0, d61ee <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d61e4:	7c20      	ldrb	r0, [r4, #16]
   d61e6:	f7ff fb31 	bl	d584c <HAL_USB_USART_Send_Data>
   d61ea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d61ee:	b002      	add	sp, #8
   d61f0:	bd10      	pop	{r4, pc}

000d61f2 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d61f2:	7c00      	ldrb	r0, [r0, #16]
   d61f4:	f7ff bb32 	b.w	d585c <HAL_USB_USART_Flush_Data>

000d61f8 <_ZN9USBSerialD0Ev>:
   d61f8:	b510      	push	{r4, lr}
   d61fa:	2114      	movs	r1, #20
   d61fc:	4604      	mov	r4, r0
   d61fe:	f000 fae6 	bl	d67ce <_ZdlPvj>
   d6202:	4620      	mov	r0, r4
   d6204:	bd10      	pop	{r4, pc}
	...

000d6208 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6208:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d620a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d620e:	4604      	mov	r4, r0
   d6210:	4608      	mov	r0, r1
   d6212:	2100      	movs	r1, #0
   d6214:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6218:	4b04      	ldr	r3, [pc, #16]	; (d622c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d621a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d621c:	2301      	movs	r3, #1
  _serial = serial;
   d621e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6220:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d6222:	4611      	mov	r1, r2
   d6224:	f7ff faea 	bl	d57fc <HAL_USB_USART_Init>
}
   d6228:	4620      	mov	r0, r4
   d622a:	bd10      	pop	{r4, pc}
   d622c:	000d7dc0 	.word	0x000d7dc0

000d6230 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6230:	7c00      	ldrb	r0, [r0, #16]
   d6232:	2200      	movs	r2, #0
   d6234:	f7ff baea 	b.w	d580c <HAL_USB_USART_Begin>

000d6238 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6238:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d623a:	2214      	movs	r2, #20
{
   d623c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d623e:	2100      	movs	r1, #0
   d6240:	f000 ff9a 	bl	d7178 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6244:	4620      	mov	r0, r4
   d6246:	bd10      	pop	{r4, pc}

000d6248 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6248:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d624a:	4c10      	ldr	r4, [pc, #64]	; (d628c <_Z16_fetch_usbserialv+0x44>)
{
   d624c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d624e:	a803      	add	r0, sp, #12
   d6250:	f7ff fff2 	bl	d6238 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6254:	7821      	ldrb	r1, [r4, #0]
   d6256:	f3bf 8f5b 	dmb	ish
   d625a:	f011 0101 	ands.w	r1, r1, #1
   d625e:	d111      	bne.n	d6284 <_Z16_fetch_usbserialv+0x3c>
   d6260:	4620      	mov	r0, r4
   d6262:	9101      	str	r1, [sp, #4]
   d6264:	f7fd ff26 	bl	d40b4 <__cxa_guard_acquire>
   d6268:	9901      	ldr	r1, [sp, #4]
   d626a:	b158      	cbz	r0, d6284 <_Z16_fetch_usbserialv+0x3c>
   d626c:	aa03      	add	r2, sp, #12
   d626e:	4808      	ldr	r0, [pc, #32]	; (d6290 <_Z16_fetch_usbserialv+0x48>)
   d6270:	f7ff ffca 	bl	d6208 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6274:	4620      	mov	r0, r4
   d6276:	f7fd ff22 	bl	d40be <__cxa_guard_release>
   d627a:	4a06      	ldr	r2, [pc, #24]	; (d6294 <_Z16_fetch_usbserialv+0x4c>)
   d627c:	4906      	ldr	r1, [pc, #24]	; (d6298 <_Z16_fetch_usbserialv+0x50>)
   d627e:	4804      	ldr	r0, [pc, #16]	; (d6290 <_Z16_fetch_usbserialv+0x48>)
   d6280:	f000 faa0 	bl	d67c4 <__aeabi_atexit>
	return _usbserial;
}
   d6284:	4802      	ldr	r0, [pc, #8]	; (d6290 <_Z16_fetch_usbserialv+0x48>)
   d6286:	b008      	add	sp, #32
   d6288:	bd10      	pop	{r4, pc}
   d628a:	bf00      	nop
   d628c:	2003e68c 	.word	0x2003e68c
   d6290:	2003e690 	.word	0x2003e690
   d6294:	2003e5c4 	.word	0x2003e5c4
   d6298:	000d6191 	.word	0x000d6191

000d629c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d629c:	4770      	bx	lr

000d629e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d629e:	7441      	strb	r1, [r0, #17]
}
   d62a0:	4770      	bx	lr

000d62a2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d62a2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d62a4:	7c00      	ldrb	r0, [r0, #16]
   d62a6:	f7ff fa09 	bl	d56bc <hal_usart_available_data_for_write>
}
   d62aa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d62ae:	bd08      	pop	{r3, pc}

000d62b0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d62b0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d62b2:	7c00      	ldrb	r0, [r0, #16]
   d62b4:	f7ff f9da 	bl	d566c <hal_usart_available>
}
   d62b8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d62bc:	bd08      	pop	{r3, pc}

000d62be <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d62be:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d62c0:	7c00      	ldrb	r0, [r0, #16]
   d62c2:	f7ff f9e3 	bl	d568c <hal_usart_peek>
}
   d62c6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d62ca:	bd08      	pop	{r3, pc}

000d62cc <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d62cc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d62ce:	7c00      	ldrb	r0, [r0, #16]
   d62d0:	f7ff f9d4 	bl	d567c <hal_usart_read>
}
   d62d4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d62d8:	bd08      	pop	{r3, pc}

000d62da <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d62da:	7c00      	ldrb	r0, [r0, #16]
   d62dc:	f7ff b9de 	b.w	d569c <hal_usart_flush>

000d62e0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d62e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d62e2:	7c45      	ldrb	r5, [r0, #17]
{
   d62e4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d62e6:	b12d      	cbz	r5, d62f4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d62e8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d62ea:	b003      	add	sp, #12
   d62ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d62f0:	f7ff b9b4 	b.w	d565c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d62f4:	7c00      	ldrb	r0, [r0, #16]
   d62f6:	9101      	str	r1, [sp, #4]
   d62f8:	f7ff f9e0 	bl	d56bc <hal_usart_available_data_for_write>
   d62fc:	2800      	cmp	r0, #0
   d62fe:	9901      	ldr	r1, [sp, #4]
   d6300:	dcf2      	bgt.n	d62e8 <_ZN11USARTSerial5writeEh+0x8>
}
   d6302:	4628      	mov	r0, r5
   d6304:	b003      	add	sp, #12
   d6306:	bd30      	pop	{r4, r5, pc}

000d6308 <_ZN11USARTSerialD0Ev>:
   d6308:	b510      	push	{r4, lr}
   d630a:	2114      	movs	r1, #20
   d630c:	4604      	mov	r4, r0
   d630e:	f000 fa5e 	bl	d67ce <_ZdlPvj>
   d6312:	4620      	mov	r0, r4
   d6314:	bd10      	pop	{r4, pc}
	...

000d6318 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d6318:	b510      	push	{r4, lr}
   d631a:	f04f 0c00 	mov.w	ip, #0
   d631e:	4604      	mov	r4, r0
   d6320:	4608      	mov	r0, r1
   d6322:	4611      	mov	r1, r2
   d6324:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6328:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d632c:	4a04      	ldr	r2, [pc, #16]	; (d6340 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d632e:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d6330:	2201      	movs	r2, #1
  _serial = serial;
   d6332:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6334:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d6336:	461a      	mov	r2, r3
   d6338:	f7ff f988 	bl	d564c <hal_usart_init>
}
   d633c:	4620      	mov	r0, r4
   d633e:	bd10      	pop	{r4, pc}
   d6340:	000d7df0 	.word	0x000d7df0

000d6344 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6344:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6346:	4c0e      	ldr	r4, [pc, #56]	; (d6380 <_Z22__fetch_global_Serial1v+0x3c>)
   d6348:	7821      	ldrb	r1, [r4, #0]
   d634a:	f3bf 8f5b 	dmb	ish
   d634e:	f011 0101 	ands.w	r1, r1, #1
   d6352:	d112      	bne.n	d637a <_Z22__fetch_global_Serial1v+0x36>
   d6354:	4620      	mov	r0, r4
   d6356:	9101      	str	r1, [sp, #4]
   d6358:	f7fd feac 	bl	d40b4 <__cxa_guard_acquire>
   d635c:	9901      	ldr	r1, [sp, #4]
   d635e:	b160      	cbz	r0, d637a <_Z22__fetch_global_Serial1v+0x36>
   d6360:	4a08      	ldr	r2, [pc, #32]	; (d6384 <_Z22__fetch_global_Serial1v+0x40>)
   d6362:	4b09      	ldr	r3, [pc, #36]	; (d6388 <_Z22__fetch_global_Serial1v+0x44>)
   d6364:	4809      	ldr	r0, [pc, #36]	; (d638c <_Z22__fetch_global_Serial1v+0x48>)
   d6366:	f7ff ffd7 	bl	d6318 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d636a:	4620      	mov	r0, r4
   d636c:	f7fd fea7 	bl	d40be <__cxa_guard_release>
   d6370:	4a07      	ldr	r2, [pc, #28]	; (d6390 <_Z22__fetch_global_Serial1v+0x4c>)
   d6372:	4908      	ldr	r1, [pc, #32]	; (d6394 <_Z22__fetch_global_Serial1v+0x50>)
   d6374:	4805      	ldr	r0, [pc, #20]	; (d638c <_Z22__fetch_global_Serial1v+0x48>)
   d6376:	f000 fa25 	bl	d67c4 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d637a:	4804      	ldr	r0, [pc, #16]	; (d638c <_Z22__fetch_global_Serial1v+0x48>)
   d637c:	b002      	add	sp, #8
   d637e:	bd10      	pop	{r4, pc}
   d6380:	2003e6a4 	.word	0x2003e6a4
   d6384:	2003e6a8 	.word	0x2003e6a8
   d6388:	2003e72c 	.word	0x2003e72c
   d638c:	2003e7b0 	.word	0x2003e7b0
   d6390:	2003e5c4 	.word	0x2003e5c4
   d6394:	000d629d 	.word	0x000d629d

000d6398 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d6398:	4770      	bx	lr

000d639a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d639a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d639c:	4606      	mov	r6, r0
   d639e:	4615      	mov	r5, r2
   d63a0:	460c      	mov	r4, r1
   d63a2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d63a4:	42bc      	cmp	r4, r7
   d63a6:	d006      	beq.n	d63b6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d63a8:	6833      	ldr	r3, [r6, #0]
   d63aa:	f814 1b01 	ldrb.w	r1, [r4], #1
   d63ae:	689b      	ldr	r3, [r3, #8]
   d63b0:	4630      	mov	r0, r6
   d63b2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d63b4:	e7f6      	b.n	d63a4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d63b6:	4628      	mov	r0, r5
   d63b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d63ba <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d63ba:	7c00      	ldrb	r0, [r0, #16]
   d63bc:	2200      	movs	r2, #0
   d63be:	f7ff b9a5 	b.w	d570c <hal_i2c_write>

000d63c2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d63c2:	7c00      	ldrb	r0, [r0, #16]
   d63c4:	2100      	movs	r1, #0
   d63c6:	f7ff b9a9 	b.w	d571c <hal_i2c_available>

000d63ca <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d63ca:	7c00      	ldrb	r0, [r0, #16]
   d63cc:	2100      	movs	r1, #0
   d63ce:	f7ff b9ad 	b.w	d572c <hal_i2c_read>

000d63d2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d63d2:	7c00      	ldrb	r0, [r0, #16]
   d63d4:	2100      	movs	r1, #0
   d63d6:	f7ff b9b1 	b.w	d573c <hal_i2c_peek>

000d63da <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d63da:	7c00      	ldrb	r0, [r0, #16]
   d63dc:	2100      	movs	r1, #0
   d63de:	f7ff b9b5 	b.w	d574c <hal_i2c_flush>

000d63e2 <_ZN7TwoWireD0Ev>:
   d63e2:	b510      	push	{r4, lr}
   d63e4:	2114      	movs	r1, #20
   d63e6:	4604      	mov	r4, r0
   d63e8:	f000 f9f1 	bl	d67ce <_ZdlPvj>
   d63ec:	4620      	mov	r0, r4
   d63ee:	bd10      	pop	{r4, pc}

000d63f0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d63f0:	b510      	push	{r4, lr}
   d63f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d63f6:	4604      	mov	r4, r0
   d63f8:	4608      	mov	r0, r1
   d63fa:	2100      	movs	r1, #0
   d63fc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6400:	4b03      	ldr	r3, [pc, #12]	; (d6410 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d6402:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d6404:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d6406:	4611      	mov	r1, r2
   d6408:	f7ff f9b0 	bl	d576c <hal_i2c_init>
}
   d640c:	4620      	mov	r0, r4
   d640e:	bd10      	pop	{r4, pc}
   d6410:	000d7e20 	.word	0x000d7e20

000d6414 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   d6414:	7c00      	ldrb	r0, [r0, #16]
   d6416:	2200      	movs	r2, #0
   d6418:	f7ff b958 	b.w	d56cc <hal_i2c_set_speed>

000d641c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d641c:	2300      	movs	r3, #0
   d641e:	7c00      	ldrb	r0, [r0, #16]
   d6420:	461a      	mov	r2, r3
   d6422:	4619      	mov	r1, r3
   d6424:	f7ff b95a 	b.w	d56dc <hal_i2c_begin>

000d6428 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d6428:	7c00      	ldrb	r0, [r0, #16]
   d642a:	2200      	movs	r2, #0
   d642c:	f7ff b95e 	b.w	d56ec <hal_i2c_begin_transmission>

000d6430 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d6430:	b2c9      	uxtb	r1, r1
   d6432:	f7ff bff9 	b.w	d6428 <_ZN7TwoWire17beginTransmissionEh>

000d6436 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d6436:	7c00      	ldrb	r0, [r0, #16]
   d6438:	2200      	movs	r2, #0
   d643a:	f7ff b95f 	b.w	d56fc <hal_i2c_end_transmission>

000d643e <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d643e:	2101      	movs	r1, #1
   d6440:	f7ff bff9 	b.w	d6436 <_ZN7TwoWire15endTransmissionEh>

000d6444 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6444:	2200      	movs	r2, #0
   d6446:	6840      	ldr	r0, [r0, #4]
   d6448:	4611      	mov	r1, r2
   d644a:	f7ff ba5b 	b.w	d5904 <network_ready>

000d644e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d644e:	2200      	movs	r2, #0
   d6450:	6840      	ldr	r0, [r0, #4]
   d6452:	4611      	mov	r1, r2
   d6454:	f7ff ba76 	b.w	d5944 <network_listening>

000d6458 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6458:	2200      	movs	r2, #0
   d645a:	6840      	ldr	r0, [r0, #4]
   d645c:	4611      	mov	r1, r2
   d645e:	f7ff ba81 	b.w	d5964 <network_get_listen_timeout>

000d6462 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6462:	6840      	ldr	r0, [r0, #4]
   d6464:	2200      	movs	r2, #0
   d6466:	f7ff ba75 	b.w	d5954 <network_set_listen_timeout>

000d646a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d646a:	6840      	ldr	r0, [r0, #4]
   d646c:	2200      	movs	r2, #0
   d646e:	f081 0101 	eor.w	r1, r1, #1
   d6472:	f7ff ba5f 	b.w	d5934 <network_listen>

000d6476 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6476:	2300      	movs	r3, #0
   d6478:	6840      	ldr	r0, [r0, #4]
   d647a:	461a      	mov	r2, r3
   d647c:	4619      	mov	r1, r3
   d647e:	f7ff ba51 	b.w	d5924 <network_off>

000d6482 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6482:	2200      	movs	r2, #0
   d6484:	6840      	ldr	r0, [r0, #4]
   d6486:	4611      	mov	r1, r2
   d6488:	f7ff ba2c 	b.w	d58e4 <network_connecting>

000d648c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d648c:	6840      	ldr	r0, [r0, #4]
   d648e:	2200      	movs	r2, #0
   d6490:	2102      	movs	r1, #2
   d6492:	f7ff ba2f 	b.w	d58f4 <network_disconnect>

000d6496 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6496:	2300      	movs	r3, #0
   d6498:	6840      	ldr	r0, [r0, #4]
   d649a:	461a      	mov	r2, r3
   d649c:	f7ff ba1a 	b.w	d58d4 <network_connect>

000d64a0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d64a0:	4b02      	ldr	r3, [pc, #8]	; (d64ac <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d64a2:	2204      	movs	r2, #4
   d64a4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d64a6:	4a02      	ldr	r2, [pc, #8]	; (d64b0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d64a8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d64aa:	4770      	bx	lr
   d64ac:	2003e7c4 	.word	0x2003e7c4
   d64b0:	000d7e48 	.word	0x000d7e48

000d64b4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d64b4:	2300      	movs	r3, #0
   d64b6:	6840      	ldr	r0, [r0, #4]
   d64b8:	461a      	mov	r2, r3
   d64ba:	f7ff ba0b 	b.w	d58d4 <network_connect>

000d64be <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d64be:	6840      	ldr	r0, [r0, #4]
   d64c0:	2200      	movs	r2, #0
   d64c2:	2102      	movs	r1, #2
   d64c4:	f7ff ba16 	b.w	d58f4 <network_disconnect>

000d64c8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d64c8:	2200      	movs	r2, #0
   d64ca:	6840      	ldr	r0, [r0, #4]
   d64cc:	4611      	mov	r1, r2
   d64ce:	f7ff ba09 	b.w	d58e4 <network_connecting>

000d64d2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d64d2:	2200      	movs	r2, #0
   d64d4:	6840      	ldr	r0, [r0, #4]
   d64d6:	4611      	mov	r1, r2
   d64d8:	f7ff ba14 	b.w	d5904 <network_ready>

000d64dc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d64dc:	2300      	movs	r3, #0
   d64de:	6840      	ldr	r0, [r0, #4]
   d64e0:	461a      	mov	r2, r3
   d64e2:	4619      	mov	r1, r3
   d64e4:	f7ff ba16 	b.w	d5914 <network_on>

000d64e8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d64e8:	2300      	movs	r3, #0
   d64ea:	6840      	ldr	r0, [r0, #4]
   d64ec:	461a      	mov	r2, r3
   d64ee:	4619      	mov	r1, r3
   d64f0:	f7ff ba18 	b.w	d5924 <network_off>

000d64f4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d64f4:	6840      	ldr	r0, [r0, #4]
   d64f6:	2100      	movs	r1, #0
   d64f8:	f7ff ba3c 	b.w	d5974 <network_is_on>

000d64fc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d64fc:	6840      	ldr	r0, [r0, #4]
   d64fe:	2100      	movs	r1, #0
   d6500:	f7ff ba40 	b.w	d5984 <network_is_off>

000d6504 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6504:	6840      	ldr	r0, [r0, #4]
   d6506:	2200      	movs	r2, #0
   d6508:	f081 0101 	eor.w	r1, r1, #1
   d650c:	f7ff ba12 	b.w	d5934 <network_listen>

000d6510 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6510:	6840      	ldr	r0, [r0, #4]
   d6512:	2200      	movs	r2, #0
   d6514:	f7ff ba1e 	b.w	d5954 <network_set_listen_timeout>

000d6518 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6518:	2200      	movs	r2, #0
   d651a:	6840      	ldr	r0, [r0, #4]
   d651c:	4611      	mov	r1, r2
   d651e:	f7ff ba21 	b.w	d5964 <network_get_listen_timeout>

000d6522 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6522:	2200      	movs	r2, #0
   d6524:	6840      	ldr	r0, [r0, #4]
   d6526:	4611      	mov	r1, r2
   d6528:	f7ff ba0c 	b.w	d5944 <network_listening>

000d652c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d652c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6530:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d6532:	b095      	sub	sp, #84	; 0x54
   d6534:	4616      	mov	r6, r2
   d6536:	460d      	mov	r5, r1
   d6538:	4607      	mov	r7, r0
    IPAddress addr;
   d653a:	f7ff fdeb 	bl	d6114 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d653e:	4621      	mov	r1, r4
   d6540:	2218      	movs	r2, #24
   d6542:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d6544:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6546:	f000 fe17 	bl	d7178 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d654a:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d654c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6550:	4621      	mov	r1, r4
   d6552:	466b      	mov	r3, sp
   d6554:	aa0c      	add	r2, sp, #48	; 0x30
   d6556:	4630      	mov	r0, r6
   d6558:	f7ff f800 	bl	d555c <netdb_getaddrinfo>
    if (!r) {
   d655c:	4604      	mov	r4, r0
   d655e:	2800      	cmp	r0, #0
   d6560:	d14c      	bne.n	d65fc <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6562:	4602      	mov	r2, r0
   d6564:	2101      	movs	r1, #1
   d6566:	6868      	ldr	r0, [r5, #4]
   d6568:	f7ff f9cc 	bl	d5904 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d656c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d656e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6570:	4622      	mov	r2, r4
   d6572:	6868      	ldr	r0, [r5, #4]
   d6574:	f7ff f9c6 	bl	d5904 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6578:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d657a:	4681      	mov	r9, r0
        bool ok = false;
   d657c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d657e:	2e00      	cmp	r6, #0
   d6580:	d03c      	beq.n	d65fc <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d6582:	2900      	cmp	r1, #0
   d6584:	d13a      	bne.n	d65fc <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6586:	6873      	ldr	r3, [r6, #4]
   d6588:	2b02      	cmp	r3, #2
   d658a:	d003      	beq.n	d6594 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d658c:	2b0a      	cmp	r3, #10
   d658e:	d011      	beq.n	d65b4 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6590:	69f6      	ldr	r6, [r6, #28]
   d6592:	e7f4      	b.n	d657e <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d6594:	f1b8 0f00 	cmp.w	r8, #0
   d6598:	d00a      	beq.n	d65b0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d659a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d659c:	a806      	add	r0, sp, #24
   d659e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d65a0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d65a2:	f7ff fde5 	bl	d6170 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d65a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d65a8:	1d3c      	adds	r4, r7, #4
   d65aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d65ac:	682b      	ldr	r3, [r5, #0]
   d65ae:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d65b0:	4641      	mov	r1, r8
   d65b2:	e7ed      	b.n	d6590 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d65b4:	f1b9 0f00 	cmp.w	r9, #0
   d65b8:	d101      	bne.n	d65be <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d65ba:	4649      	mov	r1, r9
   d65bc:	e7e8      	b.n	d6590 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d65be:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d65c0:	2210      	movs	r2, #16
   d65c2:	a801      	add	r0, sp, #4
   d65c4:	f000 fdd8 	bl	d7178 <memset>
                    a.v = 6;
   d65c8:	2306      	movs	r3, #6
   d65ca:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d65ce:	ad01      	add	r5, sp, #4
   d65d0:	f104 0308 	add.w	r3, r4, #8
   d65d4:	3418      	adds	r4, #24
   d65d6:	6818      	ldr	r0, [r3, #0]
   d65d8:	6859      	ldr	r1, [r3, #4]
   d65da:	462a      	mov	r2, r5
   d65dc:	c203      	stmia	r2!, {r0, r1}
   d65de:	3308      	adds	r3, #8
   d65e0:	42a3      	cmp	r3, r4
   d65e2:	4615      	mov	r5, r2
   d65e4:	d1f7      	bne.n	d65d6 <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d65e6:	a901      	add	r1, sp, #4
   d65e8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d65ea:	ad07      	add	r5, sp, #28
   d65ec:	f7ff fda0 	bl	d6130 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d65f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d65f2:	1d3c      	adds	r4, r7, #4
   d65f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d65f6:	682b      	ldr	r3, [r5, #0]
   d65f8:	7023      	strb	r3, [r4, #0]
   d65fa:	e7de      	b.n	d65ba <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d65fc:	9800      	ldr	r0, [sp, #0]
   d65fe:	f7fe ffa5 	bl	d554c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6602:	4638      	mov	r0, r7
   d6604:	b015      	add	sp, #84	; 0x54
   d6606:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d660c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d660c:	4b02      	ldr	r3, [pc, #8]	; (d6618 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d660e:	4a03      	ldr	r2, [pc, #12]	; (d661c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6610:	601a      	str	r2, [r3, #0]
   d6612:	2200      	movs	r2, #0
   d6614:	605a      	str	r2, [r3, #4]

} // spark
   d6616:	4770      	bx	lr
   d6618:	2003e7cc 	.word	0x2003e7cc
   d661c:	000d7e84 	.word	0x000d7e84

000d6620 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d6620:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d6622:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d6624:	d902      	bls.n	d662c <pinAvailable+0xc>
    return false;
   d6626:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d6628:	b002      	add	sp, #8
   d662a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d662c:	f1a0 030b 	sub.w	r3, r0, #11
   d6630:	2b02      	cmp	r3, #2
   d6632:	d81a      	bhi.n	d666a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6634:	4c17      	ldr	r4, [pc, #92]	; (d6694 <pinAvailable+0x74>)
   d6636:	7821      	ldrb	r1, [r4, #0]
   d6638:	f3bf 8f5b 	dmb	ish
   d663c:	f011 0101 	ands.w	r1, r1, #1
   d6640:	d10b      	bne.n	d665a <pinAvailable+0x3a>
   d6642:	4620      	mov	r0, r4
   d6644:	9101      	str	r1, [sp, #4]
   d6646:	f7fd fd35 	bl	d40b4 <__cxa_guard_acquire>
   d664a:	9901      	ldr	r1, [sp, #4]
   d664c:	b128      	cbz	r0, d665a <pinAvailable+0x3a>
   d664e:	4812      	ldr	r0, [pc, #72]	; (d6698 <pinAvailable+0x78>)
   d6650:	f7ff fa0c 	bl	d5a6c <_ZN8SPIClassC1E19hal_spi_interface_t>
   d6654:	4620      	mov	r0, r4
   d6656:	f7fd fd32 	bl	d40be <__cxa_guard_release>
   d665a:	4b0f      	ldr	r3, [pc, #60]	; (d6698 <pinAvailable+0x78>)
   d665c:	7818      	ldrb	r0, [r3, #0]
   d665e:	f7ff f8a5 	bl	d57ac <hal_spi_is_enabled>
   d6662:	2800      	cmp	r0, #0
   d6664:	d1df      	bne.n	d6626 <pinAvailable+0x6>
  return true; // 'pin' is available
   d6666:	2001      	movs	r0, #1
   d6668:	e7de      	b.n	d6628 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d666a:	2801      	cmp	r0, #1
   d666c:	d809      	bhi.n	d6682 <pinAvailable+0x62>
   d666e:	f000 f881 	bl	d6774 <_Z19__fetch_global_Wirev>
   d6672:	2100      	movs	r1, #0
   d6674:	7c00      	ldrb	r0, [r0, #16]
   d6676:	f7ff f871 	bl	d575c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d667a:	f080 0001 	eor.w	r0, r0, #1
   d667e:	b2c0      	uxtb	r0, r0
   d6680:	e7d2      	b.n	d6628 <pinAvailable+0x8>
   d6682:	3809      	subs	r0, #9
   d6684:	2801      	cmp	r0, #1
   d6686:	d8ee      	bhi.n	d6666 <pinAvailable+0x46>
   d6688:	f7ff fe5c 	bl	d6344 <_Z22__fetch_global_Serial1v>
   d668c:	7c00      	ldrb	r0, [r0, #16]
   d668e:	f7ff f80d 	bl	d56ac <hal_usart_is_enabled>
   d6692:	e7f2      	b.n	d667a <pinAvailable+0x5a>
   d6694:	2003e644 	.word	0x2003e644
   d6698:	2003e648 	.word	0x2003e648

000d669c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d669c:	2823      	cmp	r0, #35	; 0x23
{
   d669e:	b538      	push	{r3, r4, r5, lr}
   d66a0:	4604      	mov	r4, r0
   d66a2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d66a4:	d80a      	bhi.n	d66bc <pinMode+0x20>
   d66a6:	29ff      	cmp	r1, #255	; 0xff
   d66a8:	d008      	beq.n	d66bc <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d66aa:	f7ff ffb9 	bl	d6620 <pinAvailable>
   d66ae:	b128      	cbz	r0, d66bc <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d66b0:	4629      	mov	r1, r5
   d66b2:	4620      	mov	r0, r4
}
   d66b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d66b8:	f7fe bf60 	b.w	d557c <HAL_Pin_Mode>
}
   d66bc:	bd38      	pop	{r3, r4, r5, pc}

000d66be <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d66be:	b538      	push	{r3, r4, r5, lr}
   d66c0:	4604      	mov	r4, r0
   d66c2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d66c4:	f7fe ff62 	bl	d558c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d66c8:	28ff      	cmp	r0, #255	; 0xff
   d66ca:	d010      	beq.n	d66ee <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d66cc:	2806      	cmp	r0, #6
   d66ce:	d804      	bhi.n	d66da <digitalWrite+0x1c>
   d66d0:	234d      	movs	r3, #77	; 0x4d
   d66d2:	fa23 f000 	lsr.w	r0, r3, r0
   d66d6:	07c3      	lsls	r3, r0, #31
   d66d8:	d409      	bmi.n	d66ee <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d66da:	4620      	mov	r0, r4
   d66dc:	f7ff ffa0 	bl	d6620 <pinAvailable>
   d66e0:	b128      	cbz	r0, d66ee <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d66e2:	4629      	mov	r1, r5
   d66e4:	4620      	mov	r0, r4
}
   d66e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d66ea:	f7fe bf57 	b.w	d559c <HAL_GPIO_Write>
}
   d66ee:	bd38      	pop	{r3, r4, r5, pc}

000d66f0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d66f0:	b510      	push	{r4, lr}
   d66f2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d66f4:	f7fe ff4a 	bl	d558c <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d66f8:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d66fa:	b2db      	uxtb	r3, r3
   d66fc:	2b01      	cmp	r3, #1
   d66fe:	d908      	bls.n	d6712 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d6700:	4620      	mov	r0, r4
   d6702:	f7ff ff8d 	bl	d6620 <pinAvailable>
   d6706:	b120      	cbz	r0, d6712 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6708:	4620      	mov	r0, r4
}
   d670a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d670e:	f7fe bf4d 	b.w	d55ac <HAL_GPIO_Read>
}
   d6712:	2000      	movs	r0, #0
   d6714:	bd10      	pop	{r4, pc}

000d6716 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d6716:	280d      	cmp	r0, #13
{
   d6718:	b510      	push	{r4, lr}
   d671a:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d671c:	bf9c      	itt	ls
   d671e:	340e      	addls	r4, #14
   d6720:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6722:	4620      	mov	r0, r4
   d6724:	f7ff ff7c 	bl	d6620 <pinAvailable>
   d6728:	b150      	cbz	r0, d6740 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d672a:	2103      	movs	r1, #3
   d672c:	4620      	mov	r0, r4
   d672e:	f7fe ff1d 	bl	d556c <HAL_Validate_Pin_Function>
   d6732:	2803      	cmp	r0, #3
   d6734:	d104      	bne.n	d6740 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d6736:	4620      	mov	r0, r4
}
   d6738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d673c:	f7fe bf3e 	b.w	d55bc <hal_adc_read>
}
   d6740:	2000      	movs	r0, #0
   d6742:	bd10      	pop	{r4, pc}

000d6744 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d6744:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d6746:	2300      	movs	r3, #0
   d6748:	2520      	movs	r5, #32
   d674a:	8043      	strh	r3, [r0, #2]
   d674c:	2314      	movs	r3, #20
{
   d674e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d6750:	8003      	strh	r3, [r0, #0]
   d6752:	6085      	str	r5, [r0, #8]
   d6754:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6756:	4906      	ldr	r1, [pc, #24]	; (d6770 <_Z17acquireWireBufferv+0x2c>)
   d6758:	4628      	mov	r0, r5
   d675a:	f000 f83a 	bl	d67d2 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d675e:	4904      	ldr	r1, [pc, #16]	; (d6770 <_Z17acquireWireBufferv+0x2c>)
	};
   d6760:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6762:	4628      	mov	r0, r5
   d6764:	f000 f835 	bl	d67d2 <_ZnajRKSt9nothrow_t>
	};
   d6768:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d676a:	4620      	mov	r0, r4
   d676c:	bd38      	pop	{r3, r4, r5, pc}
   d676e:	bf00      	nop
   d6770:	000d7eb8 	.word	0x000d7eb8

000d6774 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6774:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6776:	4d0f      	ldr	r5, [pc, #60]	; (d67b4 <_Z19__fetch_global_Wirev+0x40>)
   d6778:	7829      	ldrb	r1, [r5, #0]
   d677a:	f3bf 8f5b 	dmb	ish
   d677e:	f011 0401 	ands.w	r4, r1, #1
{
   d6782:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6784:	d113      	bne.n	d67ae <_Z19__fetch_global_Wirev+0x3a>
   d6786:	4628      	mov	r0, r5
   d6788:	f7fd fc94 	bl	d40b4 <__cxa_guard_acquire>
   d678c:	b178      	cbz	r0, d67ae <_Z19__fetch_global_Wirev+0x3a>
   d678e:	a801      	add	r0, sp, #4
   d6790:	f7ff ffd8 	bl	d6744 <_Z17acquireWireBufferv>
   d6794:	aa01      	add	r2, sp, #4
   d6796:	4621      	mov	r1, r4
   d6798:	4807      	ldr	r0, [pc, #28]	; (d67b8 <_Z19__fetch_global_Wirev+0x44>)
   d679a:	f7ff fe29 	bl	d63f0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d679e:	4628      	mov	r0, r5
   d67a0:	f7fd fc8d 	bl	d40be <__cxa_guard_release>
   d67a4:	4a05      	ldr	r2, [pc, #20]	; (d67bc <_Z19__fetch_global_Wirev+0x48>)
   d67a6:	4906      	ldr	r1, [pc, #24]	; (d67c0 <_Z19__fetch_global_Wirev+0x4c>)
   d67a8:	4803      	ldr	r0, [pc, #12]	; (d67b8 <_Z19__fetch_global_Wirev+0x44>)
   d67aa:	f000 f80b 	bl	d67c4 <__aeabi_atexit>
	return wire;
}
   d67ae:	4802      	ldr	r0, [pc, #8]	; (d67b8 <_Z19__fetch_global_Wirev+0x44>)
   d67b0:	b007      	add	sp, #28
   d67b2:	bd30      	pop	{r4, r5, pc}
   d67b4:	2003e7d8 	.word	0x2003e7d8
   d67b8:	2003e7dc 	.word	0x2003e7dc
   d67bc:	2003e5c4 	.word	0x2003e5c4
   d67c0:	000d6399 	.word	0x000d6399

000d67c4 <__aeabi_atexit>:
   d67c4:	460b      	mov	r3, r1
   d67c6:	4601      	mov	r1, r0
   d67c8:	4618      	mov	r0, r3
   d67ca:	f000 bcb9 	b.w	d7140 <__cxa_atexit>

000d67ce <_ZdlPvj>:
   d67ce:	f7fd bc64 	b.w	d409a <_ZdlPv>

000d67d2 <_ZnajRKSt9nothrow_t>:
   d67d2:	f7fd bc60 	b.w	d4096 <_Znaj>
	...

000d67d8 <__aeabi_drsub>:
   d67d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d67dc:	e002      	b.n	d67e4 <__adddf3>
   d67de:	bf00      	nop

000d67e0 <__aeabi_dsub>:
   d67e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d67e4 <__adddf3>:
   d67e4:	b530      	push	{r4, r5, lr}
   d67e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d67ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d67ee:	ea94 0f05 	teq	r4, r5
   d67f2:	bf08      	it	eq
   d67f4:	ea90 0f02 	teqeq	r0, r2
   d67f8:	bf1f      	itttt	ne
   d67fa:	ea54 0c00 	orrsne.w	ip, r4, r0
   d67fe:	ea55 0c02 	orrsne.w	ip, r5, r2
   d6802:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d6806:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d680a:	f000 80e2 	beq.w	d69d2 <__adddf3+0x1ee>
   d680e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d6812:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6816:	bfb8      	it	lt
   d6818:	426d      	neglt	r5, r5
   d681a:	dd0c      	ble.n	d6836 <__adddf3+0x52>
   d681c:	442c      	add	r4, r5
   d681e:	ea80 0202 	eor.w	r2, r0, r2
   d6822:	ea81 0303 	eor.w	r3, r1, r3
   d6826:	ea82 0000 	eor.w	r0, r2, r0
   d682a:	ea83 0101 	eor.w	r1, r3, r1
   d682e:	ea80 0202 	eor.w	r2, r0, r2
   d6832:	ea81 0303 	eor.w	r3, r1, r3
   d6836:	2d36      	cmp	r5, #54	; 0x36
   d6838:	bf88      	it	hi
   d683a:	bd30      	pophi	{r4, r5, pc}
   d683c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6840:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6844:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6848:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d684c:	d002      	beq.n	d6854 <__adddf3+0x70>
   d684e:	4240      	negs	r0, r0
   d6850:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6854:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6858:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d685c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6860:	d002      	beq.n	d6868 <__adddf3+0x84>
   d6862:	4252      	negs	r2, r2
   d6864:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6868:	ea94 0f05 	teq	r4, r5
   d686c:	f000 80a7 	beq.w	d69be <__adddf3+0x1da>
   d6870:	f1a4 0401 	sub.w	r4, r4, #1
   d6874:	f1d5 0e20 	rsbs	lr, r5, #32
   d6878:	db0d      	blt.n	d6896 <__adddf3+0xb2>
   d687a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d687e:	fa22 f205 	lsr.w	r2, r2, r5
   d6882:	1880      	adds	r0, r0, r2
   d6884:	f141 0100 	adc.w	r1, r1, #0
   d6888:	fa03 f20e 	lsl.w	r2, r3, lr
   d688c:	1880      	adds	r0, r0, r2
   d688e:	fa43 f305 	asr.w	r3, r3, r5
   d6892:	4159      	adcs	r1, r3
   d6894:	e00e      	b.n	d68b4 <__adddf3+0xd0>
   d6896:	f1a5 0520 	sub.w	r5, r5, #32
   d689a:	f10e 0e20 	add.w	lr, lr, #32
   d689e:	2a01      	cmp	r2, #1
   d68a0:	fa03 fc0e 	lsl.w	ip, r3, lr
   d68a4:	bf28      	it	cs
   d68a6:	f04c 0c02 	orrcs.w	ip, ip, #2
   d68aa:	fa43 f305 	asr.w	r3, r3, r5
   d68ae:	18c0      	adds	r0, r0, r3
   d68b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d68b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d68b8:	d507      	bpl.n	d68ca <__adddf3+0xe6>
   d68ba:	f04f 0e00 	mov.w	lr, #0
   d68be:	f1dc 0c00 	rsbs	ip, ip, #0
   d68c2:	eb7e 0000 	sbcs.w	r0, lr, r0
   d68c6:	eb6e 0101 	sbc.w	r1, lr, r1
   d68ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d68ce:	d31b      	bcc.n	d6908 <__adddf3+0x124>
   d68d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d68d4:	d30c      	bcc.n	d68f0 <__adddf3+0x10c>
   d68d6:	0849      	lsrs	r1, r1, #1
   d68d8:	ea5f 0030 	movs.w	r0, r0, rrx
   d68dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d68e0:	f104 0401 	add.w	r4, r4, #1
   d68e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d68e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d68ec:	f080 809a 	bcs.w	d6a24 <__adddf3+0x240>
   d68f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d68f4:	bf08      	it	eq
   d68f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d68fa:	f150 0000 	adcs.w	r0, r0, #0
   d68fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6902:	ea41 0105 	orr.w	r1, r1, r5
   d6906:	bd30      	pop	{r4, r5, pc}
   d6908:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d690c:	4140      	adcs	r0, r0
   d690e:	eb41 0101 	adc.w	r1, r1, r1
   d6912:	3c01      	subs	r4, #1
   d6914:	bf28      	it	cs
   d6916:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d691a:	d2e9      	bcs.n	d68f0 <__adddf3+0x10c>
   d691c:	f091 0f00 	teq	r1, #0
   d6920:	bf04      	itt	eq
   d6922:	4601      	moveq	r1, r0
   d6924:	2000      	moveq	r0, #0
   d6926:	fab1 f381 	clz	r3, r1
   d692a:	bf08      	it	eq
   d692c:	3320      	addeq	r3, #32
   d692e:	f1a3 030b 	sub.w	r3, r3, #11
   d6932:	f1b3 0220 	subs.w	r2, r3, #32
   d6936:	da0c      	bge.n	d6952 <__adddf3+0x16e>
   d6938:	320c      	adds	r2, #12
   d693a:	dd08      	ble.n	d694e <__adddf3+0x16a>
   d693c:	f102 0c14 	add.w	ip, r2, #20
   d6940:	f1c2 020c 	rsb	r2, r2, #12
   d6944:	fa01 f00c 	lsl.w	r0, r1, ip
   d6948:	fa21 f102 	lsr.w	r1, r1, r2
   d694c:	e00c      	b.n	d6968 <__adddf3+0x184>
   d694e:	f102 0214 	add.w	r2, r2, #20
   d6952:	bfd8      	it	le
   d6954:	f1c2 0c20 	rsble	ip, r2, #32
   d6958:	fa01 f102 	lsl.w	r1, r1, r2
   d695c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6960:	bfdc      	itt	le
   d6962:	ea41 010c 	orrle.w	r1, r1, ip
   d6966:	4090      	lslle	r0, r2
   d6968:	1ae4      	subs	r4, r4, r3
   d696a:	bfa2      	ittt	ge
   d696c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6970:	4329      	orrge	r1, r5
   d6972:	bd30      	popge	{r4, r5, pc}
   d6974:	ea6f 0404 	mvn.w	r4, r4
   d6978:	3c1f      	subs	r4, #31
   d697a:	da1c      	bge.n	d69b6 <__adddf3+0x1d2>
   d697c:	340c      	adds	r4, #12
   d697e:	dc0e      	bgt.n	d699e <__adddf3+0x1ba>
   d6980:	f104 0414 	add.w	r4, r4, #20
   d6984:	f1c4 0220 	rsb	r2, r4, #32
   d6988:	fa20 f004 	lsr.w	r0, r0, r4
   d698c:	fa01 f302 	lsl.w	r3, r1, r2
   d6990:	ea40 0003 	orr.w	r0, r0, r3
   d6994:	fa21 f304 	lsr.w	r3, r1, r4
   d6998:	ea45 0103 	orr.w	r1, r5, r3
   d699c:	bd30      	pop	{r4, r5, pc}
   d699e:	f1c4 040c 	rsb	r4, r4, #12
   d69a2:	f1c4 0220 	rsb	r2, r4, #32
   d69a6:	fa20 f002 	lsr.w	r0, r0, r2
   d69aa:	fa01 f304 	lsl.w	r3, r1, r4
   d69ae:	ea40 0003 	orr.w	r0, r0, r3
   d69b2:	4629      	mov	r1, r5
   d69b4:	bd30      	pop	{r4, r5, pc}
   d69b6:	fa21 f004 	lsr.w	r0, r1, r4
   d69ba:	4629      	mov	r1, r5
   d69bc:	bd30      	pop	{r4, r5, pc}
   d69be:	f094 0f00 	teq	r4, #0
   d69c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d69c6:	bf06      	itte	eq
   d69c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d69cc:	3401      	addeq	r4, #1
   d69ce:	3d01      	subne	r5, #1
   d69d0:	e74e      	b.n	d6870 <__adddf3+0x8c>
   d69d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d69d6:	bf18      	it	ne
   d69d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d69dc:	d029      	beq.n	d6a32 <__adddf3+0x24e>
   d69de:	ea94 0f05 	teq	r4, r5
   d69e2:	bf08      	it	eq
   d69e4:	ea90 0f02 	teqeq	r0, r2
   d69e8:	d005      	beq.n	d69f6 <__adddf3+0x212>
   d69ea:	ea54 0c00 	orrs.w	ip, r4, r0
   d69ee:	bf04      	itt	eq
   d69f0:	4619      	moveq	r1, r3
   d69f2:	4610      	moveq	r0, r2
   d69f4:	bd30      	pop	{r4, r5, pc}
   d69f6:	ea91 0f03 	teq	r1, r3
   d69fa:	bf1e      	ittt	ne
   d69fc:	2100      	movne	r1, #0
   d69fe:	2000      	movne	r0, #0
   d6a00:	bd30      	popne	{r4, r5, pc}
   d6a02:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6a06:	d105      	bne.n	d6a14 <__adddf3+0x230>
   d6a08:	0040      	lsls	r0, r0, #1
   d6a0a:	4149      	adcs	r1, r1
   d6a0c:	bf28      	it	cs
   d6a0e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d6a12:	bd30      	pop	{r4, r5, pc}
   d6a14:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6a18:	bf3c      	itt	cc
   d6a1a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d6a1e:	bd30      	popcc	{r4, r5, pc}
   d6a20:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6a24:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6a28:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6a2c:	f04f 0000 	mov.w	r0, #0
   d6a30:	bd30      	pop	{r4, r5, pc}
   d6a32:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6a36:	bf1a      	itte	ne
   d6a38:	4619      	movne	r1, r3
   d6a3a:	4610      	movne	r0, r2
   d6a3c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6a40:	bf1c      	itt	ne
   d6a42:	460b      	movne	r3, r1
   d6a44:	4602      	movne	r2, r0
   d6a46:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6a4a:	bf06      	itte	eq
   d6a4c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6a50:	ea91 0f03 	teqeq	r1, r3
   d6a54:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6a58:	bd30      	pop	{r4, r5, pc}
   d6a5a:	bf00      	nop

000d6a5c <__aeabi_ui2d>:
   d6a5c:	f090 0f00 	teq	r0, #0
   d6a60:	bf04      	itt	eq
   d6a62:	2100      	moveq	r1, #0
   d6a64:	4770      	bxeq	lr
   d6a66:	b530      	push	{r4, r5, lr}
   d6a68:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6a6c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6a70:	f04f 0500 	mov.w	r5, #0
   d6a74:	f04f 0100 	mov.w	r1, #0
   d6a78:	e750      	b.n	d691c <__adddf3+0x138>
   d6a7a:	bf00      	nop

000d6a7c <__aeabi_i2d>:
   d6a7c:	f090 0f00 	teq	r0, #0
   d6a80:	bf04      	itt	eq
   d6a82:	2100      	moveq	r1, #0
   d6a84:	4770      	bxeq	lr
   d6a86:	b530      	push	{r4, r5, lr}
   d6a88:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6a8c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6a90:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6a94:	bf48      	it	mi
   d6a96:	4240      	negmi	r0, r0
   d6a98:	f04f 0100 	mov.w	r1, #0
   d6a9c:	e73e      	b.n	d691c <__adddf3+0x138>
   d6a9e:	bf00      	nop

000d6aa0 <__aeabi_f2d>:
   d6aa0:	0042      	lsls	r2, r0, #1
   d6aa2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6aa6:	ea4f 0131 	mov.w	r1, r1, rrx
   d6aaa:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6aae:	bf1f      	itttt	ne
   d6ab0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6ab4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6ab8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6abc:	4770      	bxne	lr
   d6abe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d6ac2:	bf08      	it	eq
   d6ac4:	4770      	bxeq	lr
   d6ac6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d6aca:	bf04      	itt	eq
   d6acc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d6ad0:	4770      	bxeq	lr
   d6ad2:	b530      	push	{r4, r5, lr}
   d6ad4:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6ad8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6adc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6ae0:	e71c      	b.n	d691c <__adddf3+0x138>
   d6ae2:	bf00      	nop

000d6ae4 <__aeabi_ul2d>:
   d6ae4:	ea50 0201 	orrs.w	r2, r0, r1
   d6ae8:	bf08      	it	eq
   d6aea:	4770      	bxeq	lr
   d6aec:	b530      	push	{r4, r5, lr}
   d6aee:	f04f 0500 	mov.w	r5, #0
   d6af2:	e00a      	b.n	d6b0a <__aeabi_l2d+0x16>

000d6af4 <__aeabi_l2d>:
   d6af4:	ea50 0201 	orrs.w	r2, r0, r1
   d6af8:	bf08      	it	eq
   d6afa:	4770      	bxeq	lr
   d6afc:	b530      	push	{r4, r5, lr}
   d6afe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6b02:	d502      	bpl.n	d6b0a <__aeabi_l2d+0x16>
   d6b04:	4240      	negs	r0, r0
   d6b06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6b0a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6b0e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6b12:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6b16:	f43f aed8 	beq.w	d68ca <__adddf3+0xe6>
   d6b1a:	f04f 0203 	mov.w	r2, #3
   d6b1e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6b22:	bf18      	it	ne
   d6b24:	3203      	addne	r2, #3
   d6b26:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6b2a:	bf18      	it	ne
   d6b2c:	3203      	addne	r2, #3
   d6b2e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6b32:	f1c2 0320 	rsb	r3, r2, #32
   d6b36:	fa00 fc03 	lsl.w	ip, r0, r3
   d6b3a:	fa20 f002 	lsr.w	r0, r0, r2
   d6b3e:	fa01 fe03 	lsl.w	lr, r1, r3
   d6b42:	ea40 000e 	orr.w	r0, r0, lr
   d6b46:	fa21 f102 	lsr.w	r1, r1, r2
   d6b4a:	4414      	add	r4, r2
   d6b4c:	e6bd      	b.n	d68ca <__adddf3+0xe6>
   d6b4e:	bf00      	nop

000d6b50 <__aeabi_dmul>:
   d6b50:	b570      	push	{r4, r5, r6, lr}
   d6b52:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6b56:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6b5a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6b5e:	bf1d      	ittte	ne
   d6b60:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6b64:	ea94 0f0c 	teqne	r4, ip
   d6b68:	ea95 0f0c 	teqne	r5, ip
   d6b6c:	f000 f8de 	bleq	d6d2c <__aeabi_dmul+0x1dc>
   d6b70:	442c      	add	r4, r5
   d6b72:	ea81 0603 	eor.w	r6, r1, r3
   d6b76:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6b7a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6b7e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6b82:	bf18      	it	ne
   d6b84:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6b88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6b8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6b90:	d038      	beq.n	d6c04 <__aeabi_dmul+0xb4>
   d6b92:	fba0 ce02 	umull	ip, lr, r0, r2
   d6b96:	f04f 0500 	mov.w	r5, #0
   d6b9a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6b9e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6ba2:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6ba6:	f04f 0600 	mov.w	r6, #0
   d6baa:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6bae:	f09c 0f00 	teq	ip, #0
   d6bb2:	bf18      	it	ne
   d6bb4:	f04e 0e01 	orrne.w	lr, lr, #1
   d6bb8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6bbc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6bc0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6bc4:	d204      	bcs.n	d6bd0 <__aeabi_dmul+0x80>
   d6bc6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6bca:	416d      	adcs	r5, r5
   d6bcc:	eb46 0606 	adc.w	r6, r6, r6
   d6bd0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6bd4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6bd8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6bdc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6be0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6be4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6be8:	bf88      	it	hi
   d6bea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6bee:	d81e      	bhi.n	d6c2e <__aeabi_dmul+0xde>
   d6bf0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6bf4:	bf08      	it	eq
   d6bf6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6bfa:	f150 0000 	adcs.w	r0, r0, #0
   d6bfe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6c02:	bd70      	pop	{r4, r5, r6, pc}
   d6c04:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6c08:	ea46 0101 	orr.w	r1, r6, r1
   d6c0c:	ea40 0002 	orr.w	r0, r0, r2
   d6c10:	ea81 0103 	eor.w	r1, r1, r3
   d6c14:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6c18:	bfc2      	ittt	gt
   d6c1a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6c1e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6c22:	bd70      	popgt	{r4, r5, r6, pc}
   d6c24:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6c28:	f04f 0e00 	mov.w	lr, #0
   d6c2c:	3c01      	subs	r4, #1
   d6c2e:	f300 80ab 	bgt.w	d6d88 <__aeabi_dmul+0x238>
   d6c32:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d6c36:	bfde      	ittt	le
   d6c38:	2000      	movle	r0, #0
   d6c3a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6c3e:	bd70      	pople	{r4, r5, r6, pc}
   d6c40:	f1c4 0400 	rsb	r4, r4, #0
   d6c44:	3c20      	subs	r4, #32
   d6c46:	da35      	bge.n	d6cb4 <__aeabi_dmul+0x164>
   d6c48:	340c      	adds	r4, #12
   d6c4a:	dc1b      	bgt.n	d6c84 <__aeabi_dmul+0x134>
   d6c4c:	f104 0414 	add.w	r4, r4, #20
   d6c50:	f1c4 0520 	rsb	r5, r4, #32
   d6c54:	fa00 f305 	lsl.w	r3, r0, r5
   d6c58:	fa20 f004 	lsr.w	r0, r0, r4
   d6c5c:	fa01 f205 	lsl.w	r2, r1, r5
   d6c60:	ea40 0002 	orr.w	r0, r0, r2
   d6c64:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6c68:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6c6c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6c70:	fa21 f604 	lsr.w	r6, r1, r4
   d6c74:	eb42 0106 	adc.w	r1, r2, r6
   d6c78:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6c7c:	bf08      	it	eq
   d6c7e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6c82:	bd70      	pop	{r4, r5, r6, pc}
   d6c84:	f1c4 040c 	rsb	r4, r4, #12
   d6c88:	f1c4 0520 	rsb	r5, r4, #32
   d6c8c:	fa00 f304 	lsl.w	r3, r0, r4
   d6c90:	fa20 f005 	lsr.w	r0, r0, r5
   d6c94:	fa01 f204 	lsl.w	r2, r1, r4
   d6c98:	ea40 0002 	orr.w	r0, r0, r2
   d6c9c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6ca0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6ca4:	f141 0100 	adc.w	r1, r1, #0
   d6ca8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6cac:	bf08      	it	eq
   d6cae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6cb2:	bd70      	pop	{r4, r5, r6, pc}
   d6cb4:	f1c4 0520 	rsb	r5, r4, #32
   d6cb8:	fa00 f205 	lsl.w	r2, r0, r5
   d6cbc:	ea4e 0e02 	orr.w	lr, lr, r2
   d6cc0:	fa20 f304 	lsr.w	r3, r0, r4
   d6cc4:	fa01 f205 	lsl.w	r2, r1, r5
   d6cc8:	ea43 0302 	orr.w	r3, r3, r2
   d6ccc:	fa21 f004 	lsr.w	r0, r1, r4
   d6cd0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6cd4:	fa21 f204 	lsr.w	r2, r1, r4
   d6cd8:	ea20 0002 	bic.w	r0, r0, r2
   d6cdc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6ce0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6ce4:	bf08      	it	eq
   d6ce6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6cea:	bd70      	pop	{r4, r5, r6, pc}
   d6cec:	f094 0f00 	teq	r4, #0
   d6cf0:	d10f      	bne.n	d6d12 <__aeabi_dmul+0x1c2>
   d6cf2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d6cf6:	0040      	lsls	r0, r0, #1
   d6cf8:	eb41 0101 	adc.w	r1, r1, r1
   d6cfc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6d00:	bf08      	it	eq
   d6d02:	3c01      	subeq	r4, #1
   d6d04:	d0f7      	beq.n	d6cf6 <__aeabi_dmul+0x1a6>
   d6d06:	ea41 0106 	orr.w	r1, r1, r6
   d6d0a:	f095 0f00 	teq	r5, #0
   d6d0e:	bf18      	it	ne
   d6d10:	4770      	bxne	lr
   d6d12:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6d16:	0052      	lsls	r2, r2, #1
   d6d18:	eb43 0303 	adc.w	r3, r3, r3
   d6d1c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6d20:	bf08      	it	eq
   d6d22:	3d01      	subeq	r5, #1
   d6d24:	d0f7      	beq.n	d6d16 <__aeabi_dmul+0x1c6>
   d6d26:	ea43 0306 	orr.w	r3, r3, r6
   d6d2a:	4770      	bx	lr
   d6d2c:	ea94 0f0c 	teq	r4, ip
   d6d30:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6d34:	bf18      	it	ne
   d6d36:	ea95 0f0c 	teqne	r5, ip
   d6d3a:	d00c      	beq.n	d6d56 <__aeabi_dmul+0x206>
   d6d3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6d40:	bf18      	it	ne
   d6d42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6d46:	d1d1      	bne.n	d6cec <__aeabi_dmul+0x19c>
   d6d48:	ea81 0103 	eor.w	r1, r1, r3
   d6d4c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6d50:	f04f 0000 	mov.w	r0, #0
   d6d54:	bd70      	pop	{r4, r5, r6, pc}
   d6d56:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6d5a:	bf06      	itte	eq
   d6d5c:	4610      	moveq	r0, r2
   d6d5e:	4619      	moveq	r1, r3
   d6d60:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6d64:	d019      	beq.n	d6d9a <__aeabi_dmul+0x24a>
   d6d66:	ea94 0f0c 	teq	r4, ip
   d6d6a:	d102      	bne.n	d6d72 <__aeabi_dmul+0x222>
   d6d6c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6d70:	d113      	bne.n	d6d9a <__aeabi_dmul+0x24a>
   d6d72:	ea95 0f0c 	teq	r5, ip
   d6d76:	d105      	bne.n	d6d84 <__aeabi_dmul+0x234>
   d6d78:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6d7c:	bf1c      	itt	ne
   d6d7e:	4610      	movne	r0, r2
   d6d80:	4619      	movne	r1, r3
   d6d82:	d10a      	bne.n	d6d9a <__aeabi_dmul+0x24a>
   d6d84:	ea81 0103 	eor.w	r1, r1, r3
   d6d88:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6d8c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6d90:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6d94:	f04f 0000 	mov.w	r0, #0
   d6d98:	bd70      	pop	{r4, r5, r6, pc}
   d6d9a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6d9e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6da2:	bd70      	pop	{r4, r5, r6, pc}

000d6da4 <__aeabi_ddiv>:
   d6da4:	b570      	push	{r4, r5, r6, lr}
   d6da6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6daa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6dae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6db2:	bf1d      	ittte	ne
   d6db4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6db8:	ea94 0f0c 	teqne	r4, ip
   d6dbc:	ea95 0f0c 	teqne	r5, ip
   d6dc0:	f000 f8a7 	bleq	d6f12 <__aeabi_ddiv+0x16e>
   d6dc4:	eba4 0405 	sub.w	r4, r4, r5
   d6dc8:	ea81 0e03 	eor.w	lr, r1, r3
   d6dcc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6dd0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6dd4:	f000 8088 	beq.w	d6ee8 <__aeabi_ddiv+0x144>
   d6dd8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6ddc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6de0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6de4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6de8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6dec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6df0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6df4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6df8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6dfc:	429d      	cmp	r5, r3
   d6dfe:	bf08      	it	eq
   d6e00:	4296      	cmpeq	r6, r2
   d6e02:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d6e06:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6e0a:	d202      	bcs.n	d6e12 <__aeabi_ddiv+0x6e>
   d6e0c:	085b      	lsrs	r3, r3, #1
   d6e0e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6e12:	1ab6      	subs	r6, r6, r2
   d6e14:	eb65 0503 	sbc.w	r5, r5, r3
   d6e18:	085b      	lsrs	r3, r3, #1
   d6e1a:	ea4f 0232 	mov.w	r2, r2, rrx
   d6e1e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6e22:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d6e26:	ebb6 0e02 	subs.w	lr, r6, r2
   d6e2a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6e2e:	bf22      	ittt	cs
   d6e30:	1ab6      	subcs	r6, r6, r2
   d6e32:	4675      	movcs	r5, lr
   d6e34:	ea40 000c 	orrcs.w	r0, r0, ip
   d6e38:	085b      	lsrs	r3, r3, #1
   d6e3a:	ea4f 0232 	mov.w	r2, r2, rrx
   d6e3e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6e42:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6e46:	bf22      	ittt	cs
   d6e48:	1ab6      	subcs	r6, r6, r2
   d6e4a:	4675      	movcs	r5, lr
   d6e4c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6e50:	085b      	lsrs	r3, r3, #1
   d6e52:	ea4f 0232 	mov.w	r2, r2, rrx
   d6e56:	ebb6 0e02 	subs.w	lr, r6, r2
   d6e5a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6e5e:	bf22      	ittt	cs
   d6e60:	1ab6      	subcs	r6, r6, r2
   d6e62:	4675      	movcs	r5, lr
   d6e64:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6e68:	085b      	lsrs	r3, r3, #1
   d6e6a:	ea4f 0232 	mov.w	r2, r2, rrx
   d6e6e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6e72:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6e76:	bf22      	ittt	cs
   d6e78:	1ab6      	subcs	r6, r6, r2
   d6e7a:	4675      	movcs	r5, lr
   d6e7c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6e80:	ea55 0e06 	orrs.w	lr, r5, r6
   d6e84:	d018      	beq.n	d6eb8 <__aeabi_ddiv+0x114>
   d6e86:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d6e8a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6e8e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6e92:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d6e96:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d6e9a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6e9e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6ea2:	d1c0      	bne.n	d6e26 <__aeabi_ddiv+0x82>
   d6ea4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6ea8:	d10b      	bne.n	d6ec2 <__aeabi_ddiv+0x11e>
   d6eaa:	ea41 0100 	orr.w	r1, r1, r0
   d6eae:	f04f 0000 	mov.w	r0, #0
   d6eb2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d6eb6:	e7b6      	b.n	d6e26 <__aeabi_ddiv+0x82>
   d6eb8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6ebc:	bf04      	itt	eq
   d6ebe:	4301      	orreq	r1, r0
   d6ec0:	2000      	moveq	r0, #0
   d6ec2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6ec6:	bf88      	it	hi
   d6ec8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6ecc:	f63f aeaf 	bhi.w	d6c2e <__aeabi_dmul+0xde>
   d6ed0:	ebb5 0c03 	subs.w	ip, r5, r3
   d6ed4:	bf04      	itt	eq
   d6ed6:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6eda:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6ede:	f150 0000 	adcs.w	r0, r0, #0
   d6ee2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6ee6:	bd70      	pop	{r4, r5, r6, pc}
   d6ee8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6eec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6ef0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6ef4:	bfc2      	ittt	gt
   d6ef6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6efa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6efe:	bd70      	popgt	{r4, r5, r6, pc}
   d6f00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6f04:	f04f 0e00 	mov.w	lr, #0
   d6f08:	3c01      	subs	r4, #1
   d6f0a:	e690      	b.n	d6c2e <__aeabi_dmul+0xde>
   d6f0c:	ea45 0e06 	orr.w	lr, r5, r6
   d6f10:	e68d      	b.n	d6c2e <__aeabi_dmul+0xde>
   d6f12:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6f16:	ea94 0f0c 	teq	r4, ip
   d6f1a:	bf08      	it	eq
   d6f1c:	ea95 0f0c 	teqeq	r5, ip
   d6f20:	f43f af3b 	beq.w	d6d9a <__aeabi_dmul+0x24a>
   d6f24:	ea94 0f0c 	teq	r4, ip
   d6f28:	d10a      	bne.n	d6f40 <__aeabi_ddiv+0x19c>
   d6f2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6f2e:	f47f af34 	bne.w	d6d9a <__aeabi_dmul+0x24a>
   d6f32:	ea95 0f0c 	teq	r5, ip
   d6f36:	f47f af25 	bne.w	d6d84 <__aeabi_dmul+0x234>
   d6f3a:	4610      	mov	r0, r2
   d6f3c:	4619      	mov	r1, r3
   d6f3e:	e72c      	b.n	d6d9a <__aeabi_dmul+0x24a>
   d6f40:	ea95 0f0c 	teq	r5, ip
   d6f44:	d106      	bne.n	d6f54 <__aeabi_ddiv+0x1b0>
   d6f46:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6f4a:	f43f aefd 	beq.w	d6d48 <__aeabi_dmul+0x1f8>
   d6f4e:	4610      	mov	r0, r2
   d6f50:	4619      	mov	r1, r3
   d6f52:	e722      	b.n	d6d9a <__aeabi_dmul+0x24a>
   d6f54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6f58:	bf18      	it	ne
   d6f5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6f5e:	f47f aec5 	bne.w	d6cec <__aeabi_dmul+0x19c>
   d6f62:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d6f66:	f47f af0d 	bne.w	d6d84 <__aeabi_dmul+0x234>
   d6f6a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6f6e:	f47f aeeb 	bne.w	d6d48 <__aeabi_dmul+0x1f8>
   d6f72:	e712      	b.n	d6d9a <__aeabi_dmul+0x24a>

000d6f74 <__gedf2>:
   d6f74:	f04f 3cff 	mov.w	ip, #4294967295
   d6f78:	e006      	b.n	d6f88 <__cmpdf2+0x4>
   d6f7a:	bf00      	nop

000d6f7c <__ledf2>:
   d6f7c:	f04f 0c01 	mov.w	ip, #1
   d6f80:	e002      	b.n	d6f88 <__cmpdf2+0x4>
   d6f82:	bf00      	nop

000d6f84 <__cmpdf2>:
   d6f84:	f04f 0c01 	mov.w	ip, #1
   d6f88:	f84d cd04 	str.w	ip, [sp, #-4]!
   d6f8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6f90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6f94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6f98:	bf18      	it	ne
   d6f9a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d6f9e:	d01b      	beq.n	d6fd8 <__cmpdf2+0x54>
   d6fa0:	b001      	add	sp, #4
   d6fa2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d6fa6:	bf0c      	ite	eq
   d6fa8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d6fac:	ea91 0f03 	teqne	r1, r3
   d6fb0:	bf02      	ittt	eq
   d6fb2:	ea90 0f02 	teqeq	r0, r2
   d6fb6:	2000      	moveq	r0, #0
   d6fb8:	4770      	bxeq	lr
   d6fba:	f110 0f00 	cmn.w	r0, #0
   d6fbe:	ea91 0f03 	teq	r1, r3
   d6fc2:	bf58      	it	pl
   d6fc4:	4299      	cmppl	r1, r3
   d6fc6:	bf08      	it	eq
   d6fc8:	4290      	cmpeq	r0, r2
   d6fca:	bf2c      	ite	cs
   d6fcc:	17d8      	asrcs	r0, r3, #31
   d6fce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d6fd2:	f040 0001 	orr.w	r0, r0, #1
   d6fd6:	4770      	bx	lr
   d6fd8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6fdc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6fe0:	d102      	bne.n	d6fe8 <__cmpdf2+0x64>
   d6fe2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6fe6:	d107      	bne.n	d6ff8 <__cmpdf2+0x74>
   d6fe8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6fec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6ff0:	d1d6      	bne.n	d6fa0 <__cmpdf2+0x1c>
   d6ff2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6ff6:	d0d3      	beq.n	d6fa0 <__cmpdf2+0x1c>
   d6ff8:	f85d 0b04 	ldr.w	r0, [sp], #4
   d6ffc:	4770      	bx	lr
   d6ffe:	bf00      	nop

000d7000 <__aeabi_cdrcmple>:
   d7000:	4684      	mov	ip, r0
   d7002:	4610      	mov	r0, r2
   d7004:	4662      	mov	r2, ip
   d7006:	468c      	mov	ip, r1
   d7008:	4619      	mov	r1, r3
   d700a:	4663      	mov	r3, ip
   d700c:	e000      	b.n	d7010 <__aeabi_cdcmpeq>
   d700e:	bf00      	nop

000d7010 <__aeabi_cdcmpeq>:
   d7010:	b501      	push	{r0, lr}
   d7012:	f7ff ffb7 	bl	d6f84 <__cmpdf2>
   d7016:	2800      	cmp	r0, #0
   d7018:	bf48      	it	mi
   d701a:	f110 0f00 	cmnmi.w	r0, #0
   d701e:	bd01      	pop	{r0, pc}

000d7020 <__aeabi_dcmpeq>:
   d7020:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7024:	f7ff fff4 	bl	d7010 <__aeabi_cdcmpeq>
   d7028:	bf0c      	ite	eq
   d702a:	2001      	moveq	r0, #1
   d702c:	2000      	movne	r0, #0
   d702e:	f85d fb08 	ldr.w	pc, [sp], #8
   d7032:	bf00      	nop

000d7034 <__aeabi_dcmplt>:
   d7034:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7038:	f7ff ffea 	bl	d7010 <__aeabi_cdcmpeq>
   d703c:	bf34      	ite	cc
   d703e:	2001      	movcc	r0, #1
   d7040:	2000      	movcs	r0, #0
   d7042:	f85d fb08 	ldr.w	pc, [sp], #8
   d7046:	bf00      	nop

000d7048 <__aeabi_dcmple>:
   d7048:	f84d ed08 	str.w	lr, [sp, #-8]!
   d704c:	f7ff ffe0 	bl	d7010 <__aeabi_cdcmpeq>
   d7050:	bf94      	ite	ls
   d7052:	2001      	movls	r0, #1
   d7054:	2000      	movhi	r0, #0
   d7056:	f85d fb08 	ldr.w	pc, [sp], #8
   d705a:	bf00      	nop

000d705c <__aeabi_dcmpge>:
   d705c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7060:	f7ff ffce 	bl	d7000 <__aeabi_cdrcmple>
   d7064:	bf94      	ite	ls
   d7066:	2001      	movls	r0, #1
   d7068:	2000      	movhi	r0, #0
   d706a:	f85d fb08 	ldr.w	pc, [sp], #8
   d706e:	bf00      	nop

000d7070 <__aeabi_dcmpgt>:
   d7070:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7074:	f7ff ffc4 	bl	d7000 <__aeabi_cdrcmple>
   d7078:	bf34      	ite	cc
   d707a:	2001      	movcc	r0, #1
   d707c:	2000      	movcs	r0, #0
   d707e:	f85d fb08 	ldr.w	pc, [sp], #8
   d7082:	bf00      	nop

000d7084 <__aeabi_dcmpun>:
   d7084:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7088:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d708c:	d102      	bne.n	d7094 <__aeabi_dcmpun+0x10>
   d708e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d7092:	d10a      	bne.n	d70aa <__aeabi_dcmpun+0x26>
   d7094:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7098:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d709c:	d102      	bne.n	d70a4 <__aeabi_dcmpun+0x20>
   d709e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d70a2:	d102      	bne.n	d70aa <__aeabi_dcmpun+0x26>
   d70a4:	f04f 0000 	mov.w	r0, #0
   d70a8:	4770      	bx	lr
   d70aa:	f04f 0001 	mov.w	r0, #1
   d70ae:	4770      	bx	lr

000d70b0 <__aeabi_d2iz>:
   d70b0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d70b4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d70b8:	d215      	bcs.n	d70e6 <__aeabi_d2iz+0x36>
   d70ba:	d511      	bpl.n	d70e0 <__aeabi_d2iz+0x30>
   d70bc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d70c0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d70c4:	d912      	bls.n	d70ec <__aeabi_d2iz+0x3c>
   d70c6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d70ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d70ce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d70d2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d70d6:	fa23 f002 	lsr.w	r0, r3, r2
   d70da:	bf18      	it	ne
   d70dc:	4240      	negne	r0, r0
   d70de:	4770      	bx	lr
   d70e0:	f04f 0000 	mov.w	r0, #0
   d70e4:	4770      	bx	lr
   d70e6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d70ea:	d105      	bne.n	d70f8 <__aeabi_d2iz+0x48>
   d70ec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d70f0:	bf08      	it	eq
   d70f2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d70f6:	4770      	bx	lr
   d70f8:	f04f 0000 	mov.w	r0, #0
   d70fc:	4770      	bx	lr
   d70fe:	bf00      	nop

000d7100 <__aeabi_d2uiz>:
   d7100:	004a      	lsls	r2, r1, #1
   d7102:	d211      	bcs.n	d7128 <__aeabi_d2uiz+0x28>
   d7104:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d7108:	d211      	bcs.n	d712e <__aeabi_d2uiz+0x2e>
   d710a:	d50d      	bpl.n	d7128 <__aeabi_d2uiz+0x28>
   d710c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7110:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d7114:	d40e      	bmi.n	d7134 <__aeabi_d2uiz+0x34>
   d7116:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d711a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d711e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d7122:	fa23 f002 	lsr.w	r0, r3, r2
   d7126:	4770      	bx	lr
   d7128:	f04f 0000 	mov.w	r0, #0
   d712c:	4770      	bx	lr
   d712e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d7132:	d102      	bne.n	d713a <__aeabi_d2uiz+0x3a>
   d7134:	f04f 30ff 	mov.w	r0, #4294967295
   d7138:	4770      	bx	lr
   d713a:	f04f 0000 	mov.w	r0, #0
   d713e:	4770      	bx	lr

000d7140 <__cxa_atexit>:
   d7140:	b510      	push	{r4, lr}
   d7142:	4c05      	ldr	r4, [pc, #20]	; (d7158 <__cxa_atexit+0x18>)
   d7144:	4613      	mov	r3, r2
   d7146:	b12c      	cbz	r4, d7154 <__cxa_atexit+0x14>
   d7148:	460a      	mov	r2, r1
   d714a:	4601      	mov	r1, r0
   d714c:	2002      	movs	r0, #2
   d714e:	f3af 8000 	nop.w
   d7152:	bd10      	pop	{r4, pc}
   d7154:	4620      	mov	r0, r4
   d7156:	e7fc      	b.n	d7152 <__cxa_atexit+0x12>
   d7158:	00000000 	.word	0x00000000

000d715c <memcpy>:
   d715c:	440a      	add	r2, r1
   d715e:	4291      	cmp	r1, r2
   d7160:	f100 33ff 	add.w	r3, r0, #4294967295
   d7164:	d100      	bne.n	d7168 <memcpy+0xc>
   d7166:	4770      	bx	lr
   d7168:	b510      	push	{r4, lr}
   d716a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d716e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7172:	4291      	cmp	r1, r2
   d7174:	d1f9      	bne.n	d716a <memcpy+0xe>
   d7176:	bd10      	pop	{r4, pc}

000d7178 <memset>:
   d7178:	4402      	add	r2, r0
   d717a:	4603      	mov	r3, r0
   d717c:	4293      	cmp	r3, r2
   d717e:	d100      	bne.n	d7182 <memset+0xa>
   d7180:	4770      	bx	lr
   d7182:	f803 1b01 	strb.w	r1, [r3], #1
   d7186:	e7f9      	b.n	d717c <memset+0x4>

000d7188 <srand>:
   d7188:	b538      	push	{r3, r4, r5, lr}
   d718a:	4b0d      	ldr	r3, [pc, #52]	; (d71c0 <srand+0x38>)
   d718c:	681d      	ldr	r5, [r3, #0]
   d718e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7190:	4604      	mov	r4, r0
   d7192:	b97b      	cbnz	r3, d71b4 <srand+0x2c>
   d7194:	2018      	movs	r0, #24
   d7196:	f7fe fc05 	bl	d59a4 <malloc>
   d719a:	4a0a      	ldr	r2, [pc, #40]	; (d71c4 <srand+0x3c>)
   d719c:	4b0a      	ldr	r3, [pc, #40]	; (d71c8 <srand+0x40>)
   d719e:	63a8      	str	r0, [r5, #56]	; 0x38
   d71a0:	e9c0 2300 	strd	r2, r3, [r0]
   d71a4:	4b09      	ldr	r3, [pc, #36]	; (d71cc <srand+0x44>)
   d71a6:	6083      	str	r3, [r0, #8]
   d71a8:	230b      	movs	r3, #11
   d71aa:	8183      	strh	r3, [r0, #12]
   d71ac:	2201      	movs	r2, #1
   d71ae:	2300      	movs	r3, #0
   d71b0:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d71b4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d71b6:	2200      	movs	r2, #0
   d71b8:	611c      	str	r4, [r3, #16]
   d71ba:	615a      	str	r2, [r3, #20]
   d71bc:	bd38      	pop	{r3, r4, r5, pc}
   d71be:	bf00      	nop
   d71c0:	2003e560 	.word	0x2003e560
   d71c4:	abcd330e 	.word	0xabcd330e
   d71c8:	e66d1234 	.word	0xe66d1234
   d71cc:	0005deec 	.word	0x0005deec

000d71d0 <strlen>:
   d71d0:	4603      	mov	r3, r0
   d71d2:	f813 2b01 	ldrb.w	r2, [r3], #1
   d71d6:	2a00      	cmp	r2, #0
   d71d8:	d1fb      	bne.n	d71d2 <strlen+0x2>
   d71da:	1a18      	subs	r0, r3, r0
   d71dc:	3801      	subs	r0, #1
   d71de:	4770      	bx	lr

000d71e0 <dynalib_user>:
   d71e0:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d71f0:	0000 0000 4320 2000 0046 6564 6166 6c75     .... C. F.defaul
   d7200:	2074 4d00 4253 4c00 4253 3c00 5053 5349     t .MSB.LSB.<SPIS
   d7210:	7465 6974 676e 2073 6564 6166 6c75 3e74     ettings default>
   d7220:	3c00 5053 5349 7465 6974 676e 2073 7325     .<SPISettings %s
   d7230:	7525 2520 2073 4f4d 4544 7525 003e          %u %s MODE%u>.

000d723e <_ZL4font>:
   d723e:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   d724e:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   d725e:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   d726e:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   d727e:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   d728e:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   d729e:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   d72ae:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   d72be:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   d72ce:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   d72de:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   d72ee:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   d72fe:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   d730e:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   d731e:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   d732e:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   d733e:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   d734e:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   d735e:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   d736e:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   d737e:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   d738e:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   d739e:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   d73ae:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   d73be:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   d73ce:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   d73de:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   d73ee:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   d73fe:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   d740e:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   d741e:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   d742e:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   d743e:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   d744e:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   d745e:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   d746e:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   d747e:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   d748e:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   d749e:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   d74ae:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   d74be:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   d74ce:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   d74de:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   d74ee:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   d74fe:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   d750e:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   d751e:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   d752e:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   d753e:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   d754e:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   d755e:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   d756e:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   d757e:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   d758e:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   d759e:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   d75ae:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   d75be:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   d75ce:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   d75de:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   d75ee:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   d75fe:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   d760e:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   d761e:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   d762e:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   d763e:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   d764e:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   d765e:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   d766e:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   d767e:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   d768e:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   d769e:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   d76ae:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   d76be:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   d76ce:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   d76de:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   d76ee:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   d76fe:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   d770e:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   d771e:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   d772e:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....
	...

000d7740 <_ZTV12Adafruit_GFX>:
	...
   d7750:	4989 000d 5c45 000d 40a1 000d 4391 000d     .I..E\...@...C..
   d7760:	4393 000d 43c5 000d 43a1 000d 43b3 000d     .C...C...C...C..
   d7770:	42d5 000d 4391 000d 45bd 000d 4537 000d     .B...C...E..7E..
   d7780:	43dd 000d 441b 000d 4455 000d 449b 000d     .C...D..UD...D..
   d7790:	4539 000d 44b7 000d                         9E...D..

000d7798 <_ZTV16OledWingAdafruit>:
	...
   d77a0:	4a99 000d 4ab9 000d 4989 000d 5c45 000d     .J...J...I..E\..
   d77b0:	4c7d 000d 4391 000d 4393 000d 43c5 000d     }L...C...C...C..
   d77c0:	43a1 000d 43b3 000d 42d5 000d 4391 000d     .C...C...B...C..
   d77d0:	45bd 000d 4e37 000d 53cb 000d 537d 000d     .E..7N...S..}S..
   d77e0:	4455 000d 449b 000d 4539 000d 44b7 000d     UD...D..9E...D..

000d77f0 <_ZTVN8particle11SPISettingsE>:
	...
   d77f8:	4281 000d 4255 000d 4257 000d               .B..UB..WB..

000d7804 <_ZL12splash1_data>:
   d7804:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   d7814:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   d7824:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   d7834:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   d7844:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   d7854:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   d786c:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   d787c:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   d788c:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   d789c:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   d78ac:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   d78bc:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   d78cc:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   d78dc:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   d78ec:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   d78fc:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   d790c:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   d791c:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   d792c:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   d793c:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   d794c:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   d795c:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   d796c:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   d797c:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   d7994:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   d79ac:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   d79bc:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   d79cc:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   d79dc:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   d79ec:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   d79fc:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   d7a0c:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   d7a1c:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   d7a2c:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   d7a3c:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   d7a4c:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   d7a5c:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   d7a6c:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   d7a7c:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   d7a8c:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   d7a9c:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   d7aac:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   d7abc:	fdff 5b6b 6adb c0fd                         ..k[.j..

000d7ac4 <_ZL12splash2_data>:
   d7ac4:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   d7ad4:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   d7ae4:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   d7b00:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   d7b10:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   d7b20:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   d7b30:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   d7b40:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   d7b50:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   d7b60:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   d7b70:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   d7b80:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   d7b90:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   d7ba0:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   d7bb0:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   d7bc0:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   d7bd0:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   d7be0:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   d7bf0:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   d7c00:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   d7c10:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   d7c20:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   d7c30:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   d7c40:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   d7c58:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   d7c68:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   d7c78:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   d7c88:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   d7c98:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000d7ca4 <_ZTV16Adafruit_SSD1306>:
	...
   d7cac:	4c51 000d 4c69 000d 4989 000d 5c45 000d     QL..iL...I..E\..
   d7cbc:	4c7d 000d 4391 000d 4393 000d 43c5 000d     }L...C...C...C..
   d7ccc:	43a1 000d 43b3 000d 42d5 000d 4391 000d     .C...C...B...C..
   d7cdc:	45bd 000d 4e37 000d 53cb 000d 537d 000d     .E..7N...S..}S..
   d7cec:	4455 000d 449b 000d 4539 000d 44b7 000d     UD...D..9E...D..

000d7cfc <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   d7cfc:	8000 e0c0 f8f0 fefc                         ........

000d7d04 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   d7d04:	0100 0703 1f0f 7f3f                         ......?.

000d7d0c <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   d7d0c:	d5ae a880                                   ....

000d7d10 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   d7d10:	00d3 8d40                                   ..@.

000d7d14 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   d7d14:	0020 c8a1                                    ...

000d7d18 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   d7d18:	40db a6a4 af2e                              .@....

000d7d1e <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   d7d1e:	02da 8f81                                   ....

000d7d22 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   d7d22:	12da                                         ...

000d7d25 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   d7d25:	02da                                         ...

000d7d28 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   d7d28:	0022 21ff 0000 0000                         "..!....

000d7d30 <_ZTVN5spark13EthernetClassE>:
	...
   d7d38:	5a43 000d 5a39 000d 5a2f 000d 5a25 000d     CZ..9Z../Z..%Z..
   d7d48:	5a19 000d 5a0d 000d 64f5 000d 64fd 000d     .Z...Z...d...d..
   d7d58:	5a01 000d 59f9 000d 59ef 000d 59e5 000d     .Z...Y...Y...Y..
   d7d68:	652d 000d                                   -e..

000d7d6c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d7d6c:	0800 1810 2820 3830 616e 006e 6e69 0066     .... (08nan.inf.
   d7d7c:	766f 0066 002e 7061 0070 5925 252d 2d6d     ovf...app.%Y-%m-
   d7d8c:	6425 2554 3a48 4d25 253a 2553 007a 7361     %dT%H:%M:%S%z.as
   d7d9c:	7463 6d69 0065 0000                         ctime...

000d7da4 <_ZTV9IPAddress>:
	...
   d7dac:	60b1 000d 60a1 000d 60a3 000d               .`...`...`..

000d7db8 <_ZTV9USBSerial>:
	...
   d7dc0:	6191 000d 61f9 000d 61cf 000d 5c45 000d     .a...a...a..E\..
   d7dd0:	61c1 000d 6193 000d 61a3 000d 61f3 000d     .a...a...a...a..
   d7de0:	61b3 000d 618d 000d                         .a...a..

000d7de8 <_ZTV11USARTSerial>:
	...
   d7df0:	629d 000d 6309 000d 62e1 000d 5c45 000d     .b...c...b..E\..
   d7e00:	62b1 000d 62cd 000d 62bf 000d 62db 000d     .b...b...b...b..
   d7e10:	629f 000d 62a3 000d                         .b...b..

000d7e18 <_ZTV7TwoWire>:
	...
   d7e20:	6399 000d 63e3 000d 63bb 000d 639b 000d     .c...c...c...c..
   d7e30:	63c3 000d 63cb 000d 63d3 000d 63db 000d     .c...c...c...c..

000d7e40 <_ZTVN5spark9WiFiClassE>:
	...
   d7e48:	6497 000d 648d 000d 6483 000d 6445 000d     .d...d...d..Ed..
   d7e58:	5f1b 000d 6477 000d 64f5 000d 64fd 000d     ._..wd...d...d..
   d7e68:	646b 000d 6463 000d 6459 000d 644f 000d     kd..cd..Yd..Od..
   d7e78:	652d 000d                                   -e..

000d7e7c <_ZTVN5spark12NetworkClassE>:
	...
   d7e84:	64b5 000d 64bf 000d 64c9 000d 64d3 000d     .d...d...d...d..
   d7e94:	64dd 000d 64e9 000d 64f5 000d 64fd 000d     .d...d...d...d..
   d7ea4:	6505 000d 6511 000d 6519 000d 6523 000d     .e...e...e..#e..
   d7eb4:	652d 000d                                   -e..

000d7eb8 <_ZSt7nothrow>:
	...

000d7eb9 <link_const_variable_data_end>:
   d7eb9:	00          	.byte	0x00
	...

000d7ebc <link_constructors_location>:
   d7ebc:	000d41fd 	.word	0x000d41fd
   d7ec0:	000d5a4d 	.word	0x000d5a4d
   d7ec4:	000d5bbd 	.word	0x000d5bbd
   d7ec8:	000d5c1d 	.word	0x000d5c1d
   d7ecc:	000d5f29 	.word	0x000d5f29
   d7ed0:	000d5f39 	.word	0x000d5f39
   d7ed4:	000d5f61 	.word	0x000d5f61
   d7ed8:	000d64a1 	.word	0x000d64a1
   d7edc:	000d660d 	.word	0x000d660d
